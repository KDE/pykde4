//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KDirWatch : QObject
{
%TypeHeaderCode
#include <kdirwatch.h>
%End


public:

    enum WatchMode
    {
        WatchDirOnly, 
        WatchFiles, 
        WatchSubDirs
    };

    typedef QFlags<KDirWatch::WatchMode> WatchModes;
                         KDirWatch (QObject* /TransferThis/ = 0);
    void                 addDir (const QString&, KDirWatch::WatchModes = KDirWatch::WatchDirOnly );
    void                 addFile (const QString&);
    QDateTime            ctime (const QString&);
    void                 removeDir (const QString&);
    void                 removeFile (const QString&);
    bool                 stopDirScan (const QString&);
    bool                 restartDirScan (const QString&);
    void                 startScan (bool = 0, bool = 0);
    void                 stopScan ();
    bool                 isStopped ();
    bool                 contains (const QString&) const;
    static void          statistics ();
    void                 setCreated (const QString&);
    void                 setDirty (const QString&);
    void                 setDeleted (const QString&);

    enum Method
    {
        FAM, 
        INotify, 
        DNotify, 
        Stat
    };

    KDirWatch::Method    internalMethod ();
    static KDirWatch*    self ();
    static bool          exists ();

signals:
    void                 dirty (const QString&);
    void                 created (const QString&);
    void                 deleted (const QString&);

};  // class KDirWatch

