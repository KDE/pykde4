//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KConfigGroup : KConfigFlags
{
%TypeHeaderCode
#include <kconfiggroup.h>
%End


public:
                         KConfigGroup ();
                         KConfigGroup (KConfigBase*, const QByteArray&);
                         KConfigGroup (KConfigBase*, const QString&);
                         KConfigGroup (KConfigBase*, const char*);
                         KConfigGroup (KSharedConfig, const QByteArray&) [(KSharedConfigPtr, const QByteArray&)];
%MethodCode
//takes master | (KSharedConfig) | group | (QByteArray)
    KSharedConfigPtr *ksp = new KSharedConfigPtr (a0);
    Py_BEGIN_ALLOW_THREADS
    sipCpp = new sipKConfigGroup (*ksp, *a1);
    Py_END_ALLOW_THREADS
%End

                         KConfigGroup (KSharedConfig, const QString&) [(KSharedConfigPtr, const QString&)];
%MethodCode
//takes master | (KSharedConfig) | group | (QString)
    KSharedConfigPtr *ksp = new KSharedConfigPtr (a0);
    Py_BEGIN_ALLOW_THREADS
    sipCpp = new sipKConfigGroup (*ksp, *a1);
    Py_END_ALLOW_THREADS
%End

                         KConfigGroup (KSharedConfig, const char*) [(KSharedConfigPtr, const char*)];
%MethodCode
//takes master | (KSharedConfig) | group | (Python string)
    KSharedConfigPtr *ksp = new KSharedConfigPtr (a0);
    Py_BEGIN_ALLOW_THREADS
    sipCpp = new sipKConfigGroup (*ksp, a1);
    Py_END_ALLOW_THREADS
%End

    bool                 isValid () const;
    void                 deleteGroup (KConfigFlags::WriteConfigFlags = Normal );
    QMap<QString, QString> entryMap () const;
    void                 setDirty (bool);
    void                 putData (const KEntryKey&, const KEntry&, bool = 1);
    KEntry               lookupData (const KEntryKey&) const;
    void                 sync ();
    void                 changeGroup (const char*);
    void                 changeGroup (const QString&);
    void                 changeGroup (const QByteArray&);
    bool                 hasKey (const char*) const;
                         KConfigGroup (const KConfigGroup&);
    QString              group () const;
    bool                 exists () const;
    KConfigBase*         config () const;
    QString              readEntry (const char*, const QString&) const;
    QString              readEntry (const char*, const char* = 0) const;
    QVariant             readEntry (const char*, const QVariant&) const;
    QVariantList         readEntry (const char*, const QVariantList&) const;
    QStringList          readEntry (const char*, const QStringList&, char = ',') const;
    QStringList          readEntry (const QString&, const QStringList&, char = ',') const;
    QString              readPathEntry (const QString&, const QString& = QString ()) const;
    QString              readPathEntry (const char*, const QString& = QString ()) const;
    QStringList          readPathListEntry (const QString&, char = ',') const;
    QStringList          readPathListEntry (const char*, char = ',') const;
    QString              readEntryUntranslated (const QString&, const QString& = QString ()) const;
    QString              readEntryUntranslated (const char*, const QString& = QString ()) const;
    void                 writeEntry (const char*, const QString&, KConfigFlags::WriteConfigFlags = Normal );
    void                 writeEntry (const char*, const QVariant&, KConfigFlags::WriteConfigFlags = Normal );
    void                 writeEntry (const QString&, const QStringList&, char = ',', KConfigFlags::WriteConfigFlags = Normal );
    void                 writeEntry (const char*, const QStringList&, char = ',', KConfigFlags::WriteConfigFlags = Normal );
    void                 writeEntry (const char*, const QVariantList&, KConfigFlags::WriteConfigFlags = Normal );
    void                 writeEntry (const char*, const char*, KConfigFlags::WriteConfigFlags = Normal );
    void                 writeEntry (const char*, const QByteArray&, KConfigFlags::WriteConfigFlags = Normal );
    void                 writePathEntry (const QString&, const QString&, KConfigFlags::WriteConfigFlags = Normal );
    void                 writePathEntry (const char*, const QString&, KConfigFlags::WriteConfigFlags = Normal );
    void                 writePathEntry (const QString&, const QStringList&, char = ',', KConfigFlags::WriteConfigFlags = Normal );
    void                 writePathEntry (const char*, const QStringList&, char = ',', KConfigFlags::WriteConfigFlags = Normal );
    void                 deleteEntry (const QString&, KConfigFlags::WriteConfigFlags = Normal );
    void                 deleteEntry (const char*, KConfigFlags::WriteConfigFlags = Normal );
    bool                 hasKey (const QString&) const;
    bool                 isImmutable () const;
    bool                 entryIsImmutable (const QString&) const;
//ig     void                 setReadDefaults (bool);
    void                 revertToDefault (const QString&);
    bool                 hasDefault (const QString&) const;

protected:
    QByteArray           readEntryUtf8 (const char*) const;
    void                 init (KConfigBase*);

};  // class KConfigGroup


typedef KSharedPtr<KSharedConfig> KSharedConfigPtr;
