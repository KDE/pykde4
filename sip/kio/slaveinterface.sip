//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
#include <slaveinterface.h>
%End

namespace KIO
{

enum Info
{
    INF_TOTAL_SIZE, 
    INF_PROCESSED_SIZE, 
    INF_SPEED, 
    INF_REDIRECTION, 
    INF_MIME_TYPE, 
    INF_ERROR_PAGE, 
    INF_WARNING, 
    INF_GETTING_FILE, 
    INF_UNUSED, 
    INF_INFOMESSAGE, 
    INF_META_DATA, 
    INF_NETWORK_STATUS, 
    INF_MESSAGEBOX, 
    INF_POSITION
};


enum Message
{
    MSG_DATA, 
    MSG_DATA_REQ, 
    MSG_ERROR, 
    MSG_CONNECTED, 
    MSG_FINISHED, 
    MSG_STAT_ENTRY, 
    MSG_LIST_ENTRIES, 
    MSG_RENAMED, 
    MSG_RESUME, 
    MSG_SLAVE_STATUS, 
    MSG_SLAVE_ACK, 
    MSG_NET_REQUEST, 
    MSG_NET_DROP, 
    MSG_NEED_SUBURL_DATA, 
    MSG_CANRESUME, 
    MSG_AUTH_KEY, 
    MSG_DEL_AUTH_KEY, 
    MSG_OPENED, 
    MSG_WRITTEN
};


class SlaveInterface : QObject
{
%TypeHeaderCode
#include <slaveinterface.h>
%End


protected:
//ig                          SlaveInterface (SlaveInterfacePrivate&, QObject* /TransferThis/ = 0);

public:
    void                 setConnection (KIO::Connection*);
    KIO::Connection*     connection () const;
    void                 sendResumeAnswer (bool);
    void                 setOffset (KIO::filesize_t);
    KIO::filesize_t      offset () const;

signals:
    void                 data (const QByteArray&);
    void                 dataReq ();
    void                 error (int, const QString&);
    void                 connected ();
    void                 finished ();
    void                 slaveStatus (pid_t, const QByteArray&, const QString&, bool);
    void                 listEntries (const KIO::UDSEntryList&);
    void                 statEntry (const KIO::UDSEntry&);
    void                 needSubUrlData ();
    void                 canResume (KIO::filesize_t);
    void                 open ();
    void                 written (KIO::filesize_t);
    void                 metaData (const KIO::MetaData&);
    void                 totalSize (KIO::filesize_t);
    void                 processedSize (KIO::filesize_t);
    void                 redirection (const KUrl&);
    void                 position (KIO::filesize_t);
    void                 speed (ulong);
    void                 errorPage ();
    void                 mimeType (const QString&);
    void                 warning (const QString&);
    void                 infoMessage (const QString&);
    void                 connectFinished ();

protected:
    virtual bool         dispatch ();
    virtual bool         dispatch (int, const QByteArray&);
    void                 messageBox (int, const QString&, const QString&, const QString&, const QString&);
    void                 messageBox (int, const QString&, const QString&, const QString&, const QString&, const QString&);
    void                 requestNetwork (const QString&, const QString&);
    void                 dropNetwork (const QString&, const QString&);

protected slots:
    void                 calcSpeed ();

protected:
//force

private:
                         SlaveInterface ();
//end


};  // class SlaveInterface

};  // namespace KIO

