//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.



class KAutostart : QObject
{
%TypeHeaderCode
#include <kautostart.h>
%End


public:
    explicit                KAutostart (const QString& entryName = QString(), QObject* parent /TransferThis/ = 0);

    enum Condition
    {
        NoConditions,
        CheckCommand,
        CheckCondition,
        CheckAll
    };

    typedef QFlags<KAutostart::Condition> Conditions;


    enum StartPhase
    {
        BaseDesktop,
        DesktopServices,
        Applications
    };

    void                    setAutostarts (bool autostart);
    bool                    autostarts (const QString& environment = QString(), KAutostart::Conditions check = KAutostart::NoConditions) const;
    QString                 command () const;
    void                    setCommand (const QString& command);
    QString                 visibleName () const;
    void                    setVisibleName (const QString& entryName);
    static bool             isServiceRegistered (const QString& entryName);
    QString                 commandToCheck () const;
    void                    setCommandToCheck (const QString& exec);
    KAutostart::StartPhase  startPhase () const;
    void                    setStartPhase (KAutostart::StartPhase phase);
    QStringList             allowedEnvironments () const;
    void                    setAllowedEnvironments (const QStringList& environments);
    void                    addToAllowedEnvironments (const QString& environment);
    void                    removeFromAllowedEnvironments (const QString& environment);
    QStringList             excludedEnvironments () const;
    void                    setExcludedEnvironments (const QStringList& environments);
    void                    addToExcludedEnvironments (const QString& environment);
    void                    removeFromExcludedEnvironments (const QString& environment);
    QString                 startAfter () const;
    bool                    checkAllowedEnvironment (const QString& environment) const;
};   // KAutostart


