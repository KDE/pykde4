//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KUriFilterData
{
%TypeHeaderCode
#include <kurifilter.h>
%End


public:

    enum UriTypes
    {
        NET_PROTOCOL, 
        LOCAL_FILE, 
        LOCAL_DIR, 
        EXECUTABLE, 
        HELP, 
        SHELL, 
        BLOCKED, 
        ERROR, 
        UNKNOWN
    };

                         KUriFilterData ();
                         KUriFilterData (const KUrl&);
                         KUriFilterData (const QString&);
                         KUriFilterData (const KUriFilterData&);
    KUrl                 uri () const;
    QString              errorMsg () const;
    KUriFilterData::UriTypes uriType () const;
    void                 setData (const KUrl&);
    void                 setData (const QString&);
    bool                 setAbsolutePath (const QString&);
    QString              absolutePath () const;
    bool                 hasAbsolutePath () const;
    QString              argsAndOptions () const;
    bool                 hasArgsAndOptions () const;
    QString              iconName ();
    void                 setCheckForExecutables (bool);
    bool                 checkForExecutables () const;
    QString              typedString () const;

};  // class KUriFilterData


class KUriFilterPlugin : QObject
{
%TypeHeaderCode
#include <kurifilter.h>
%End


public:
                         KUriFilterPlugin (const QString&, QObject* /TransferThis/ = 0);
    virtual bool         filterUri (KUriFilterData&) const = 0;
    virtual KCModule*    configModule (QWidget*, const char*) const;
    virtual QString      configName () const;

protected:
    void                 setFilteredUri (KUriFilterData&, const KUrl&) const;
    void                 setErrorMsg (KUriFilterData&, const QString&) const;
    void                 setUriType (KUriFilterData&, KUriFilterData::UriTypes) const;
    void                 setArguments (KUriFilterData&, const QString&) const;

};  // class KUriFilterPlugin


class KUriFilter
{
%TypeHeaderCode
#include <kurifilter.h>
%End


public:
    static KUriFilter*   self ();
    bool                 filterUri (KUriFilterData&, const QStringList& = QStringList ());
    bool                 filterUri (KUrl&, const QStringList& = QStringList ());
    bool                 filterUri (QString&, const QStringList& = QStringList ());
    KUrl                 filteredUri (const KUrl&, const QStringList& = QStringList ());
    QString              filteredUri (const QString&, const QStringList& = QStringList ());
    QStringList          pluginNames () const;

protected:
                         KUriFilter ();
    void                 loadPlugins ();

};  // class KUriFilter

