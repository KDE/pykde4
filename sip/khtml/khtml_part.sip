//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module khtml  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
//ctscc
#include <khtml_part.h>
#include <khtmlview.h>
%End


class KHTMLPart : KParts::ReadOnlyPart
{
%TypeHeaderCode
#include <khtml_part.h>
%End


public:

    enum GUIProfile
    {
        DefaultGUI, 
        BrowserViewGUI
    };

                         KHTMLPart (QWidget* = 0, QObject* /TransferThis/ = 0, KHTMLPart::GUIProfile = KHTMLPart::DefaultGUI );
                         KHTMLPart (KHTMLView*, QObject* /TransferThis/ = 0, KHTMLPart::GUIProfile = KHTMLPart::DefaultGUI );
    virtual bool         openUrl (const KUrl&);
    virtual bool         closeUrl ();
    virtual void         showError (KJob*);
    DOM::HTMLDocument    htmlDocument () const;
    DOM::Document        document () const;
    QString              documentSource () const;
    DOM::Node            activeNode () const;
    KParts::BrowserExtension* browserExtension () const;
//ig     KParts::LiveConnectExtension* liveConnectExtension (const khtml::RenderPart*) const;
    KParts::BrowserHostExtension* browserHostExtension () const;
    KHTMLView*           view () const;
    void                 setJScriptEnabled (bool);
    bool                 jScriptEnabled () const;
//ig     KJS::Interpreter*    jScriptInterpreter ();
    void                 setStatusMessagesEnabled (bool);
    bool                 statusMessagesEnabled () const;
    void                 setMetaRefreshEnabled (bool);
    bool                 metaRefreshEnabled () const;
    QVariant             executeScript (const DOM::Node&, const QString&);
    void                 setDNDEnabled (bool);
    bool                 dndEnabled () const;
    void                 setJavaEnabled (bool);
    bool                 javaEnabled () const;
    void                 setPluginsEnabled (bool);
    bool                 pluginsEnabled () const;
    void                 setAutoloadImages (bool);
    bool                 autoloadImages () const;
    void                 setOnlyLocalReferences (bool);
    bool                 onlyLocalReferences () const;
    bool                 isCaretMode () const;
    bool                 isEditable () const;
    void                 setCaretPosition (DOM::Node, long, bool = 0);

    enum CaretDisplayPolicy
    {
        CaretVisible, 
        CaretInvisible, 
        CaretBlink
    };

    KHTMLPart::CaretDisplayPolicy caretDisplayPolicyNonFocused () const;
    void                 setCaretDisplayPolicyNonFocused (KHTMLPart::CaretDisplayPolicy);
    void                 enableJScript (bool);
    void                 enableJava (bool);
    void                 enablePlugins (bool);
    void                 autoloadImages (bool);
    void                 enableMetaRefresh (bool);
    bool                 setCharset (const QString&, bool = 0);
    KUrl                 baseURL () const;
    QString              baseTarget () const;
    KUrl                 backgroundURL () const;
    void                 scheduleRedirection (int, const QString&, bool = 1);
    virtual void         begin (const KUrl& = KUrl (), int = 0, int = 0);
    virtual void         write (const char*, int = -1);
    virtual void         write (const QString&);
    virtual void         end ();
    void                 paint (QPainter*, const QRect&, int = 0, bool* /Out/ = 0);
    bool                 setEncoding (const QString&, bool = 0);
    QString              encoding ();
    void                 setUserStyleSheet (const KUrl&);
    void                 setUserStyleSheet (const QString&);

public:
    void                 setStandardFont (const QString&);
    void                 setFixedFont (const QString&);
    bool                 gotoAnchor (const QString&);
    bool                 nextAnchor ();
    bool                 prevAnchor ();
    void                 setURLCursor (const QCursor&);
    QCursor              urlCursor () const;

    enum FindOptions
    {
        FindLinksOnly, 
        FindNoPopups
    };

    void                 findText ();
    void                 findText (const QString&, long, QWidget* /Transfer/ = 0, KFindDialog* = 0);
    void                 findTextBegin ();
    bool                 findTextNext (const QString&, bool, bool, bool);
    bool                 findTextNext (bool = 0);
    void                 setZoomFactor (int);
    int                  zoomFactor () const;
    void                 setFontScaleFactor (int);
    int                  fontScaleFactor () const;
    virtual QString      selectedText () const;
    QString              selectedTextAsHTML () const;
    DOM::Range           selection () const;
    void                 selection (DOM::Node&, long& /Out/, DOM::Node&, long& /Out/) const;
    void                 setSelection (const DOM::Range&);
    bool                 hasSelection () const;
    void                 selectAll ();
    void                 show ();
    void                 hide ();
    KParts::PartManager* partManager ();
    virtual void         saveState (QDataStream&);
    virtual void         restoreState (QDataStream&);
    DOM::Node            nodeUnderMouse () const;
    DOM::Node            nonSharedNodeUnderMouse () const;
    const KHTMLSettings* settings () const;
    KHTMLPart*           parentPart ();
    QStringList          frameNames () const;
    QList<KParts::ReadOnlyPart*> frames () const;
    KHTMLPart*           findFrame (const QString&);
//ig     KHTMLPart*           findFrameParent (KParts::ReadOnlyPart*, const QString&, khtml::ChildFrame** = 0) const;
    KParts::ReadOnlyPart* currentFrame () const;
    bool                 frameExists (const QString&);
//ig     KJSProxy*            framejScript (KParts::ReadOnlyPart*);
    KParts::ReadOnlyPart* findFramePart (const QString&);
    void                 setJSStatusBarText (const QString&);
    void                 setJSDefaultStatusBarText (const QString&);
    QString              jsStatusBarText () const;
    QString              jsDefaultStatusBarText () const;
    QString              referrer () const;
    QString              pageReferrer () const;
    QString              lastModified () const;
    void                 preloadStyleSheet (const QString&, const QString&);
    void                 preloadScript (const QString&, const QString&);
    bool                 restored () const;

    enum FormNotification
    {
        NoNotification, 
        Before, 
        Only, 
        Unused
    };

    void                 setFormNotification (KHTMLPart::FormNotification);
    KHTMLPart::FormNotification formNotification () const;
    KUrl                 toplevelURL ();
    bool                 isModified () const;
    void                 setSuppressedPopupIndicator (bool);
    void                 setSuppressedPopupIndicator (bool, KHTMLPart*);
    bool                 inProgress () const;

signals:
    void                 onURL (const QString&);
    void                 popupMenu (const QString&, const QPoint&);
    void                 selectionChanged ();
    void                 nodeActivated (const DOM::Node&);
    void                 docCreated ();
    void                 caretPositionChanged (const DOM::Node&, long);
    void                 formSubmitNotification (const char*, const QString&, const QByteArray&, const QString&, const QString&, const QString&);
    void                 configurationChanged ();

protected:
    KUrl                 completeURL (const QString&);
    void                 htmlError (int, const QString&, const KUrl&);
    virtual void         customEvent (QEvent*);
//ig     virtual void         khtmlMousePressEvent (khtml::MousePressEvent*);
//ig     virtual void         khtmlMouseDoubleClickEvent (khtml::MouseDoubleClickEvent*);
//ig     virtual void         khtmlMouseMoveEvent (khtml::MouseMoveEvent*);
//ig     virtual void         khtmlMouseReleaseEvent (khtml::MouseReleaseEvent*);
//ig     virtual void         khtmlDrawContentsEvent (khtml::DrawContentsEvent*);
    virtual void         guiActivateEvent (KParts::GUIActivateEvent*);
    virtual bool         openFile ();
    virtual bool         urlSelected (const QString&, int, int, const QString&, const KParts::OpenUrlArguments& = KParts::OpenUrlArguments (), const KParts::BrowserArguments& = KParts::BrowserArguments ());
    virtual KParts::ReadOnlyPart* createPart (QWidget*, QObject* /Transfer/, const QString&, QString&, QStringList&, const QStringList&);
    bool                 pluginPageQuestionAsked (const QString&) const;
    void                 setPluginPageQuestionAsked (const QString&);

    enum PageSecurity
    {
        NotCrypted, 
        Encrypted, 
        Mixed
    };

//ig     void                 setPageSecurity (KHTMLPart::PageSecurity);
    virtual bool         doOpenStream (const QString&);
    virtual bool         doWriteStream (const QByteArray&);
    virtual bool         doCloseStream ();

public slots:
    void                 setActiveNode (const DOM::Node&);
    void                 stopAnimations ();
    QVariant             executeScript (const QString&);
    void                 setCaretMode (bool);
    void                 setEditable (bool);
    void                 setCaretVisible (bool);
    void                 submitFormProxy (const char*, const QString&, const QByteArray&, const QString&, const QString& = QString::null , const QString& = QString::null );

protected slots:
    virtual void         slotFinished (KJob*);

protected:
    virtual void         startingJob (KIO::Job*);

public:


//force

private:
    void                 setStatusBarText (const QString&, int);

// Subclasses for QObject

public:
%ConvertToSubClassCode

    if (dynamic_cast<KHTMLPart*>(sipCpp))
        sipClass = sipClass_KHTMLPart;
    else if (dynamic_cast<KHTMLView*>(sipCpp))
        sipClass = sipClass_KHTMLView;
    else
        sipClass = NULL;
%End

//end


};  // class KHTMLPart

