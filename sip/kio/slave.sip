//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace KIO
{

class Slave : KIO::SlaveInterface
{
%TypeHeaderCode
#include <slave.h>
%End


public:
                         Slave (const QString&, QObject* /TransferThis/ = 0);
    void                 setPID (pid_t);
    int                  slave_pid ();
    void                 kill ();
    bool                 isAlive ();
    virtual void         setHost (const QString&, int, const QString&, const QString&);
    void                 resetHost ();
    virtual void         setConfig (const KIO::MetaData&);
    QString              protocol ();
    void                 setProtocol (const QString&);
    QString              slaveProtocol ();
    QString              host ();
    quint16              port ();
    QString              user ();
    QString              passwd ();
    static KIO::Slave*   createSlave (const QString&, const KUrl&, int& /Out/, QString&);
    static KIO::Slave*   holdSlave (const QString&, const KUrl&);
    virtual void         suspend ();
    virtual void         resume ();
    virtual bool         suspended ();
    virtual void         send (int, const QByteArray& = QByteArray ());
    virtual void         hold (const KUrl&);
    time_t               idleTime ();
    void                 setIdle ();
    bool                 isConnected ();
    void                 setConnected (bool);
    void                 ref ();
    void                 deref ();

public slots:
    void                 accept ();
    void                 gotInput ();
    void                 timeout ();

signals:
    void                 slaveDied (KIO::Slave*);

};  // class Slave

};  // namespace KIO

