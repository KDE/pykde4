//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KStandardDirs
{
%TypeHeaderCode
#include <kstandarddirs.h>
%End


public:

                         KStandardDirs ();


    enum SearchOption
    {
        NoSearchOptions, 
        Recursive, 
        NoDuplicates, 
        IgnoreExecBit
    };

    typedef QFlags<KStandardDirs::SearchOption> SearchOptions;
    void                 addPrefix (const QString&);
    void                 addXdgConfigPrefix (const QString&);
    void                 addXdgDataPrefix (const QString&);
    bool                 addResourceType (const char*, const QString&, bool = 1);
    bool                 addResourceType (const char*, const char*, const QString&, bool = 1);
    bool                 addResourceType (const char*, const char*, const char*, bool = 1);
    bool                 addResourceDir (const char*, const QString&, bool = 1);
    QString              findResource (const char*, const QString&) const;
    bool                 isRestrictedResource (const char*, const QString& = QString ()) const;
    quint32              calcResourceHash (const char*, const QString&, KStandardDirs::SearchOptions = KStandardDirs::NoSearchOptions ) const;
    QStringList          findDirs (const char*, const QString&) const;
    QString              findResourceDir (const char*, const QString&) const;
    QStringList          findAllResources (const char*, const QString& = QString (), KStandardDirs::SearchOptions = KStandardDirs::NoSearchOptions ) const;
    QStringList          findAllResources (const char*, const QString&, KStandardDirs::SearchOptions, QStringList&) const;
    static QStringList   systemPaths (const QString& = QString ());
    static QString       findExe (const QString&, const QString& = QString (), KStandardDirs::SearchOptions = KStandardDirs::NoSearchOptions );
    static int           findAllExe (QStringList&, const QString&, const QString& = QString (), KStandardDirs::SearchOptions = KStandardDirs::NoSearchOptions );
    bool                 addCustomized (KConfig*);
    QStringList          resourceDirs (const char*) const;
    QStringList          allTypes () const;
    QString              saveLocation (const char*, const QString& = QString (), bool = 1) const;
    QString              relativeLocation (const char*, const QString&);
    static bool          makeDir (const QString&, int = 493);
    static QString       kde_default (const char*);
    QString              kfsstnd_prefixes ();
    QString              kfsstnd_xdg_conf_prefixes ();
    QString              kfsstnd_xdg_data_prefixes ();
    QString              localkdedir () const;
    QString              localxdgdatadir () const;
    QString              localxdgconfdir () const;
    static QString       installPath (const char*);
    static bool          exists (const QString&);
    static QString       realPath (const QString&);
    static QString       realFilePath (const QString&);
    static QString       locate (const char*, const QString&, const KComponentData& = KGlobal::mainComponent ());
    static QString       locateLocal (const char*, const QString&, const KComponentData& = KGlobal::mainComponent ());
    static QString       locateLocal (const char*, const QString&, bool, const KComponentData& = KGlobal::mainComponent ());
    static bool          checkAccess (const QString&, int);

private:
                         KStandardDirs (const KStandardDirs&);

public:



};  // class KStandardDirs

