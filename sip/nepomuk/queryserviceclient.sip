// Copyright 2010 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

namespace Nepomuk
{
namespace Query
{
class QueryServiceClient : QObject
{
%TypeHeaderCode
#include <nepomuk/queryserviceclient.h>
%End

public:
                            QueryServiceClient (QObject* parent /TransferThis/ = 0);
    ~QueryServiceClient ();
    static bool             serviceAvailable ();
    bool                    query (const Nepomuk::Query::Query& query);
    bool                    sparqlQuery (const QString& query, const Nepomuk::Query::RequestPropertyMap& requestPropertyMap = Nepomuk::Query::RequestPropertyMap());
    bool                    desktopQuery (const QString& query);
    bool                    blockingQuery (const Nepomuk::Query::Query& query);
    bool                    blockingSparqlQuery (const QString& query, const Nepomuk::Query::RequestPropertyMap& requestPropertyMap = Nepomuk::Query::RequestPropertyMap());
    bool                    blockingDesktopQuery (const QString& query);
    void                    close ();
signals:
    void                    newEntries (const QList<Nepomuk::Query::Result>& entries);
    void                    entriesRemoved (const QList<QUrl>& entries);
    void                    finishedListing ();
public:
    static QList<Nepomuk::Query::Result>  syncQuery (const Nepomuk::Query::Query& query, bool* ok = 0);
    static QList<Nepomuk::Query::Result>  syncSparqlQuery (const QString& query, const Nepomuk::Query::RequestPropertyMap& requestPropertyMap = Nepomuk::Query::RequestPropertyMap(), bool* ok = 0);
    static QList<Nepomuk::Query::Result>  syncDesktopQuery (const QString& query, bool* ok = 0);
};
};
};
