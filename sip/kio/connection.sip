//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace KIO
{

class Connection : QObject
{
%TypeHeaderCode
#include <connection.h>
%End


public:
                         Connection (QObject* /TransferThis/ = 0);
    void                 connectToRemote (const QString&);
    void                 close ();
    QString              errorString () const;
    bool                 isConnected () const;
    bool                 inited () const;
    bool                 send (int, const QByteArray& = QByteArray ());
    bool                 sendnow (int, const QByteArray&);
    bool                 hasTaskAvailable () const;
    bool                 waitForIncomingTask (int = 30000);
//ig     int                  read (int*, QByteArray&);
    void                 suspend ();
    void                 resume ();
    bool                 suspended () const;

signals:
    void                 readyRead ();

};  // class Connection


class ConnectionServer : QObject
{
%TypeHeaderCode
#include <connection.h>
%End


public:
                         ConnectionServer (QObject* /TransferThis/ = 0);
    void                 listenForRemote ();
    bool                 isListening () const;
    void                 close ();
    QString              address () const;
    KIO::Connection*     nextPendingConnection ();
    void                 setNextPendingConnection (KIO::Connection*);

signals:
    void                 newConnection ();

};  // class ConnectionServer

};  // namespace KIO

