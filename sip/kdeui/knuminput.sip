//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KNumInput : QWidget
{
%TypeHeaderCode
#include <knuminput.h>
%End


public:
                         KNumInput (QWidget* /TransferThis/ = 0);
                         KNumInput (QWidget* /TransferThis/, KNumInput*);
    virtual void         setLabel (const QString&, Qt::Alignment);
    QString              label () const;
    bool                 showSlider () const;
    void                 setSteps (int, int);
    virtual QSize        sizeHint () const;

protected:
    QSlider*             slider () const;
    void                 layout (bool);
    virtual void         doLayout ()  = 0;

private:
                         KNumInput (const KNumInput&) [()];

public:



};  // class KNumInput


class KIntNumInput : KNumInput
{
%TypeHeaderCode
#include <knuminput.h>
%End


public:
                         KIntNumInput (QWidget* /TransferThis/ = 0);
                         KIntNumInput (int, QWidget* /TransferThis/ = 0, int = 10);
                         KIntNumInput (KNumInput*, int, QWidget* /TransferThis/, int = 10);
    int                  value () const;
    double               relativeValue () const;
    int                  referencePoint () const;
    QString              suffix () const;
    QString              prefix () const;
    QString              specialValueText () const;
    void                 setRange (int, int, int = 1, bool = 1);
    void                 setMinimum (int);
    int                  minimum () const;
    void                 setMaximum (int);
    int                  maximum () const;
    void                 setSpecialValueText (const QString&);
    virtual void         setLabel (const QString&, Qt::Alignment);
    virtual QSize        minimumSizeHint () const;

public slots:
    void                 setValue (int);
    void                 setRelativeValue (double);
    void                 setReferencePoint (int);
    void                 setSuffix (const QString&);
    void                 setPrefix (const QString&);
    void                 setEditFocus (bool = 1);

signals:
    void                 valueChanged (int);
    void                 relativeValueChanged (double);

protected:
    QSpinBox*            spinBox () const;
    virtual void         doLayout ();
    void                 resizeEvent (QResizeEvent*);

private:
                         KIntNumInput (const KIntNumInput&) [()];

};  // class KIntNumInput


class KDoubleNumInput : KNumInput
{
%TypeHeaderCode
#include <knuminput.h>
%End


public:
                         KDoubleNumInput (QWidget* /TransferThis/ = 0);
                         KDoubleNumInput (double, double, double, QWidget* /TransferThis/ = 0, double = 0.01, int = 2);
                         KDoubleNumInput (KNumInput*, double, double, double, QWidget* /TransferThis/ = 0, double = 0.02, int = 2);
    double               value () const;
    QString              suffix () const;
    QString              prefix () const;
    int                  decimals () const;
    QString              specialValueText () const;
    void                 setRange (double, double, double = 1, bool = 1);
    void                 setMinimum (double);
    double               minimum () const;
    void                 setMaximum (double);
    double               maximum () const;
    void                 setDecimals (int);
    double               referencePoint () const;
    double               relativeValue () const;
    void                 setSpecialValueText (const QString&);
    virtual void         setLabel (const QString&, Qt::Alignment);
    virtual QSize        minimumSizeHint () const;

public slots:
    void                 setValue (double);
    void                 setRelativeValue (double);
    void                 setReferencePoint (double);
    void                 setSuffix (const QString&);
    void                 setPrefix (const QString&);

signals:
    void                 valueChanged (double);
    void                 relativeValueChanged (double);

protected:
    virtual void         doLayout ();
    void                 resizeEvent (QResizeEvent*);

private:
                         KDoubleNumInput (const KDoubleNumInput&) [()];

};  // class KDoubleNumInput


class KIntSpinBox : QSpinBox
{
%TypeHeaderCode
#include <knuminput.h>
%End


public:
                         KIntSpinBox (QWidget* /TransferThis/ = 0);
                         KIntSpinBox (int, int, int, int, QWidget* /TransferThis/, int = 10);
    void                 setBase (int);
    int                  base () const;
    void                 setEditFocus (bool);

protected:
    virtual QString      textFromValue (int) const;
    virtual int          valueFromText (const QString&) const;

private:
                         KIntSpinBox (const KIntSpinBox&) [()];

};  // class KIntSpinBox
