//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace DOM
{

class HTMLButtonElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_form.h>
%End


public:
                            HTMLButtonElement ();
                            HTMLButtonElement (const DOM::HTMLButtonElement& other);
                            HTMLButtonElement (const DOM::Node& other);

protected:
//ig                        HTMLButtonElement (HTMLButtonElementImpl* impl);

public:
    DOM::HTMLFormElement    form () const;
    DOM::DOMString          accessKey () const;
    void                    setAccessKey (const DOM::DOMString&);
    bool                    disabled () const;
    void                    setDisabled (bool);
    DOM::DOMString          name () const;
    void                    setName (const DOM::DOMString&);
    long                    tabIndex () const;
    void                    setTabIndex (long);
    DOM::DOMString          type () const;
    DOM::DOMString          value () const;
    void                    setValue (const DOM::DOMString&);
    void                    blur ();
    void                    focus ();
};   // HTMLButtonElement


class HTMLFieldSetElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_form.h>
%End


public:
                            HTMLFieldSetElement ();
                            HTMLFieldSetElement (const DOM::HTMLFieldSetElement& other);
                            HTMLFieldSetElement (const DOM::Node& other);

protected:
//ig                        HTMLFieldSetElement (HTMLFieldSetElementImpl* impl);

public:
    DOM::HTMLFormElement    form () const;
};   // HTMLFieldSetElement


class HTMLFormElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_form.h>
%End


public:
                            HTMLFormElement ();
                            HTMLFormElement (const DOM::HTMLFormElement& other);
                            HTMLFormElement (const DOM::Node& other);

protected:
//ig                        HTMLFormElement (HTMLFormElementImpl* impl);

public:
    DOM::HTMLCollection     elements () const;
    long                    length () const;
    DOM::DOMString          name () const;
    void                    setName (const DOM::DOMString&);
    DOM::DOMString          acceptCharset () const;
    void                    setAcceptCharset (const DOM::DOMString&);
    DOM::DOMString          action () const;
    void                    setAction (const DOM::DOMString&);
    DOM::DOMString          enctype () const;
    void                    setEnctype (const DOM::DOMString&);
    DOM::DOMString          method () const;
    void                    setMethod (const DOM::DOMString&);
    DOM::DOMString          target () const;
    void                    setTarget (const DOM::DOMString&);
    void                    submit ();
    void                    reset ();
};   // HTMLFormElement


class HTMLInputElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_form.h>
%End


public:
                            HTMLInputElement ();
                            HTMLInputElement (const DOM::HTMLInputElement& other);
                            HTMLInputElement (const DOM::Node& other);

protected:
//ig                        HTMLInputElement (HTMLInputElementImpl* impl);

public:
    DOM::DOMString          defaultValue () const;
    void                    setDefaultValue (const DOM::DOMString&);
    bool                    defaultChecked () const;
    void                    setDefaultChecked (bool);
    DOM::HTMLFormElement    form () const;
    DOM::DOMString          accept () const;
    void                    setAccept (const DOM::DOMString&);
    DOM::DOMString          accessKey () const;
    void                    setAccessKey (const DOM::DOMString&);
    DOM::DOMString          align () const;
    void                    setAlign (const DOM::DOMString&);
    DOM::DOMString          alt () const;
    void                    setAlt (const DOM::DOMString&);
    bool                    checked () const;
    void                    setChecked (bool);
    bool                    indeterminate () const;
    void                    setIndeterminate (bool);
    bool                    disabled () const;
    void                    setDisabled (bool);
    long                    maxLength () const;
    void                    setMaxLength (long);
    DOM::DOMString          name () const;
    void                    setName (const DOM::DOMString&);
    bool                    readOnly () const;
    void                    setReadOnly (bool);
    DOM::DOMString          size () const;
    void                    setSize (const DOM::DOMString&);
    long                    getSize () const;
    void                    setSize (long);
    DOM::DOMString          src () const;
    void                    setSrc (const DOM::DOMString&);
    long                    tabIndex () const;
    void                    setTabIndex (long);
    DOM::DOMString          type () const;
    void                    setType (const DOM::DOMString&);
    DOM::DOMString          useMap () const;
    void                    setUseMap (const DOM::DOMString&);
    DOM::DOMString          value () const;
    void                    setValue (const DOM::DOMString&);
    void                    blur ();
    void                    focus ();
    void                    select ();
    void                    click ();
    long                    selectionStart ();
    void                    setSelectionStart (long offset);
    long                    selectionEnd ();
    void                    setSelectionEnd (long offset);
    void                    setSelectionRange (long start, long end);
};   // HTMLInputElement


class HTMLLabelElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_form.h>
%End


public:
                            HTMLLabelElement ();
                            HTMLLabelElement (const DOM::HTMLLabelElement& other);
                            HTMLLabelElement (const DOM::Node& other);

protected:
//ig                        HTMLLabelElement (HTMLLabelElementImpl* impl);

public:
    DOM::DOMString          accessKey () const;
    void                    setAccessKey (const DOM::DOMString&);
    DOM::DOMString          htmlFor () const;
    void                    setHtmlFor (const DOM::DOMString&);
};   // HTMLLabelElement


class HTMLLegendElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_form.h>
%End


public:
                            HTMLLegendElement ();
                            HTMLLegendElement (const DOM::HTMLLegendElement& other);
                            HTMLLegendElement (const DOM::Node& other);

protected:
//ig                        HTMLLegendElement (HTMLLegendElementImpl* impl);

public:
    DOM::HTMLFormElement    form () const;
    DOM::DOMString          accessKey () const;
    void                    setAccessKey (const DOM::DOMString&);
    DOM::DOMString          align () const;
    void                    setAlign (const DOM::DOMString&);
};   // HTMLLegendElement


class HTMLOptGroupElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_form.h>
%End


public:
                            HTMLOptGroupElement ();
                            HTMLOptGroupElement (const DOM::HTMLOptGroupElement& other);
                            HTMLOptGroupElement (const DOM::Node& other);

protected:
//ig                        HTMLOptGroupElement (HTMLOptGroupElementImpl* impl);

public:
    bool                    disabled () const;
    void                    setDisabled (bool);
    DOM::DOMString          label () const;
    void                    setLabel (const DOM::DOMString&);
};   // HTMLOptGroupElement


class HTMLSelectElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_form.h>
%End


public:
                            HTMLSelectElement ();
                            HTMLSelectElement (const DOM::HTMLSelectElement& other);
                            HTMLSelectElement (const DOM::Node& other);

protected:
//ig                        HTMLSelectElement (HTMLSelectElementImpl* impl);

public:
    DOM::DOMString          type () const;
    long                    selectedIndex () const;
    void                    setSelectedIndex (long);
    DOM::DOMString          value () const;
    void                    setValue (const DOM::DOMString&);
    long                    length () const;
    DOM::HTMLFormElement    form () const;
    DOM::HTMLCollection     options () const;
    bool                    disabled () const;
    void                    setDisabled (bool);
    bool                    multiple () const;
    void                    setMultiple (bool);
    DOM::DOMString          name () const;
    void                    setName (const DOM::DOMString&);
    long                    size () const;
    void                    setSize (long);
    long                    tabIndex () const;
    void                    setTabIndex (long);
    void                    add (const DOM::HTMLElement& element, const DOM::HTMLElement& before);
    void                    remove (long index);
    void                    blur ();
    void                    focus ();
};   // HTMLSelectElement


class HTMLTextAreaElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_form.h>
%End


public:
                            HTMLTextAreaElement ();
                            HTMLTextAreaElement (const DOM::HTMLTextAreaElement& other);
                            HTMLTextAreaElement (const DOM::Node& other);

protected:
//ig                        HTMLTextAreaElement (HTMLTextAreaElementImpl* impl);

public:
    DOM::DOMString          defaultValue () const;
    void                    setDefaultValue (const DOM::DOMString&);
    DOM::HTMLFormElement    form () const;
    DOM::DOMString          accessKey () const;
    void                    setAccessKey (const DOM::DOMString&);
    long                    cols () const;
    void                    setCols (long);
    bool                    disabled () const;
    void                    setDisabled (bool);
    DOM::DOMString          name () const;
    void                    setName (const DOM::DOMString&);
    bool                    readOnly () const;
    void                    setReadOnly (bool);
    long                    rows () const;
    void                    setRows (long);
    long                    tabIndex () const;
    void                    setTabIndex (long);
    DOM::DOMString          type () const;
    DOM::DOMString          value () const;
    void                    setValue (const DOM::DOMString&);
    void                    blur ();
    void                    focus ();
    void                    select ();
    long                    selectionStart ();
    void                    setSelectionStart (long offset);
    long                    selectionEnd ();
    void                    setSelectionEnd (long offset);
    void                    setSelectionRange (long start, long end);
    long                    textLength ();
};   // HTMLTextAreaElement


class HTMLOptionElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_form.h>
%End


public:
                            HTMLOptionElement ();
                            HTMLOptionElement (const DOM::HTMLOptionElement& other);
                            HTMLOptionElement (const DOM::Node& other);

protected:
//ig                        HTMLOptionElement (HTMLOptionElementImpl* impl);

public:
    DOM::HTMLFormElement    form () const;
    bool                    defaultSelected () const;
    void                    setDefaultSelected (bool);
    DOM::DOMString          text () const;
    long                    index () const;
    void                    setIndex (long);
    bool                    disabled () const;
    void                    setDisabled (bool);
    DOM::DOMString          label () const;
    void                    setLabel (const DOM::DOMString&);
    bool                    selected () const;
    void                    setSelected (bool);
    DOM::DOMString          value () const;
    void                    setValue (const DOM::DOMString&);
};   // HTMLOptionElement


class HTMLIsIndexElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_form.h>
%End


public:
                            HTMLIsIndexElement ();
                            HTMLIsIndexElement (const DOM::HTMLIsIndexElement& other);
                            HTMLIsIndexElement (const DOM::Node& other);

protected:
//ig                        HTMLIsIndexElement (HTMLIsIndexElementImpl* impl);

public:
    DOM::HTMLFormElement    form () const;
    DOM::DOMString          prompt () const;
    void                    setPrompt (const DOM::DOMString&);
};   // HTMLIsIndexElement

};   // DOM


