//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KBookmark
{
%TypeHeaderCode
#include <kbookmark.h>
%End


public:

    enum MetaDataOverwriteMode
    {
        OverwriteMetaData, 
        DontOverwriteMetaData
    };


    class List
    {

    public:
                             List ();
        void                 populateMimeData (QMimeData*) const;
        static bool          canDecode (const QMimeData*);
        static QStringList   mimeDataTypes ();
        static KBookmark::List fromMimeData (const QMimeData*);

    };  // class List


public:
                         KBookmark ();
                         KBookmark (const QDomElement&);
    static KBookmark     standaloneBookmark (const QString&, const KUrl&, const QString& = QString ());
    bool                 isGroup () const;
    bool                 isSeparator () const;
    bool                 isNull () const;
    bool                 hasParent () const;
    QString              text () const;
    QString              fullText () const;
    void                 setFullText (const QString&);
    KUrl                 url () const;
    void                 setUrl (const KUrl&);
    QString              icon () const;
    void                 setIcon (const QString&);

    bool                 showInToolbar () const;
    void                 setShowInToolbar (bool);

    KBookmarkGroup       parentGroup () const;
    KBookmarkGroup       toGroup () const;
    QString              address () const;
    int                  positionInParent () const;
    QDomElement          internalElement () const;
    void                 updateAccessMetadata ();
    static QString       parentAddress (const QString&);
    static uint          positionInParent (const QString&);
    static QString       previousAddress (const QString&);
    static QString       nextAddress (const QString&);
    static QString       commonParent (const QString&, const QString&);
    QString              metaDataItem (const QString&) const;
    void                 setMetaDataItem (const QString&, const QString&, KBookmark::MetaDataOverwriteMode = KBookmark::OverwriteMetaData );
    void                 populateMimeData (QMimeData*) const;
    bool                 operator == (const KBookmark&) const;

protected:

};  // class KBookmark


class KBookmarkGroup : KBookmark
{
%TypeHeaderCode
#include <kbookmark.h>
%End


public:
                         KBookmarkGroup ();
                         KBookmarkGroup (const QDomElement&);
    bool                 isOpen () const;
    KBookmark            first () const;
    KBookmark            previous (const KBookmark&) const;
    KBookmark            next (const KBookmark&) const;
    int                  indexOf (const KBookmark&) const;
    KBookmarkGroup       createNewFolder (const QString& = QString ());
    KBookmark            createNewSeparator ();
    KBookmark            addBookmark (const KBookmark&);
    KBookmark            addBookmark (const QString&, const KUrl&, const QString& = QString ());

    bool                 moveBookmark (const KBookmark&, const KBookmark&);

    bool                 moveItem (const KBookmark&, const KBookmark&);
    void                 deleteBookmark (const KBookmark&);
    bool                 isToolbarGroup () const;
    QDomElement          findToolbar () const;
    QList<KUrl>          groupUrlList () const;

protected:
    QDomElement          nextKnownTag (const QDomElement&, bool) const;

public:



};  // class KBookmarkGroup


class KBookmarkGroupTraverser
{
%TypeHeaderCode
#include <kbookmark.h>
%End


protected:
                         ~KBookmarkGroupTraverser ();
    void                 traverse (const KBookmarkGroup&);
    virtual void         visit (const KBookmark&);
    virtual void         visitEnter (const KBookmarkGroup&);
    virtual void         visitLeave (const KBookmarkGroup&);

};  // class KBookmarkGroupTraverser

