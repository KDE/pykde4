//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KApplication : QApplication
{
%TypeHeaderCode
#include <kapplication.h>
%End

%TypeCode
// Convert a Python argv list to a conventional C argc count and argv array.
static char **kdeui_ArgvToC(PyObject *argvlist, int &argc)
{
    char **argv;

    argc = PyList_GET_SIZE(argvlist);

    // Allocate space for two copies of the argument pointers, plus the
    // terminating NULL.
    if ((argv = (char **)sipMalloc(2 * (argc + 1) * sizeof (char *))) == NULL)
        return NULL;

    // Convert the list.
    for (int a = 0; a < argc; ++a)
    {
        char *arg;

        // Get the argument and allocate memory for it.
        if ((arg = PyString_AsString(PyList_GET_ITEM(argvlist, a))) == NULL ||
            (argv[a] = (char *)sipMalloc(strlen(arg) + 1)) == NULL)
            return NULL;

        // Copy the argument and save a pointer to it.
        strcpy(argv[a], arg);
        argv[a + argc + 1] = argv[a];
    }

    argv[argc + argc + 1] = argv[argc] = NULL;

    return argv;
}


// Remove arguments from the Python argv list that have been removed from the
// C argv array.
static void kdeui_UpdatePyArgv(PyObject *argvlist, int argc, char **argv)
{
    for (int a = 0, na = 0; a < argc; ++a)
    {
        // See if it was removed.
        if (argv[na] == argv[a + argc + 1])
            ++na;
        else
            PyList_SetSlice(argvlist, na, na + 1, NULL);
    }
}
%End


public:
                         KApplication (bool);
                         KApplication (Qt::HANDLE = 0, Qt::HANDLE = 0) [(Display*, Qt::HANDLE = 0, Qt::HANDLE = 0)];
%MethodCode
//returns ()
            Display *display = QX11Info::display ();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipKApplication(display, a0, a1);
            Py_END_ALLOW_THREADS
%End

                         KApplication (SIP_PYLIST, const QByteArray&, bool = 1) [(Display*, int&, char**, const QByteArray&, bool = 1)];
%MethodCode
//returns ()
//takes display | (Display) | a Python list | (SIP_PYLIST) | rAppName | (QByteArray) | GUIenabled | (bool - default = 1)
        // The Python interface is a list of argument strings that is modified.

        Display *display = QX11Info::display ();
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = kdeui_ArgvToC(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipKApplication(display, nargc, argv, *a1, a2);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            kdeui_UpdatePyArgv(a0, argc, argv);
        }
%End

    static KApplication* kApplication ();
    KConfig*             sessionConfig ();
    void                 disableSessionManagement ();
    void                 enableSessionManagement ();
    void                 commitData (QSessionManager&);
    void                 saveState (QSessionManager&);
    bool                 sessionSaving () const;
    void                 setTopWidget (QWidget*);
    static QString       tempSaveName (const QString&);
    static QString       checkRecoverFile (const QString&, bool& /Out/);
    void                 installX11EventFilter (QWidget*);
    void                 removeX11EventFilter (const QWidget*);
    QByteArray           startupId () const;
    void                 setStartupId (const QByteArray&);
    void                 clearStartupId ();
    void                 setSynchronizeClipboard (bool);

public slots:
    void                 updateUserTimestamp (int = 0);
    void                 reparseConfiguration ();
    void                 quit ();

public:
    ulong                userTimestamp () const;
    void                 updateRemoteUserTimestamp (const QString&, int = 0);

protected:
                         KApplication (bool, const KComponentData&);
                         KApplication (Display*, Qt::HANDLE, Qt::HANDLE, const KComponentData&);
//ig     bool                 x11EventFilter (XEvent*);

public:
    bool                 notify (QObject*, QEvent*);
//ig     int                  xErrhandler (Display*, void*);
    int                  xioErrhandler (Display*);
//ig     void                 iceIOErrorHandler (_IceConn*);
    static bool          loadedByKdeinit;

signals:
    void                 saveYourself ();

private:
                         KApplication (const KApplication&);
                         KApplication (bool, bool);

public:



};  // class KApplication

typedef ulong Atom;
//ig typedef void Display;
