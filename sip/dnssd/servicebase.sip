//
//     Copyright 2008 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace DNSSD
{
class ServiceBase : KShared
{
%TypeHeaderCode
#include <dnssd/servicebase.h>
%End

//    typedef KSharedPtr<DNSSD::ServiceBase> Ptr;

public:
    explicit                ServiceBase (const QString& name = QString(), const QString& type = QString(), const QString& domain = QString(), const QString& host = QString(), unsigned short port = 0);
    QString                 serviceName () const;
    QString                 type () const;
    QString                 domain () const;
    QString                 hostName () const;
    unsigned short          port () const;
    QMap<QString,QByteArray>  textData () const;
    bool                    operator == (const DNSSD::ServiceBase& o) const;
    bool                    operator != (const DNSSD::ServiceBase& o) const;

private:
//force
                            ServiceBase (const DNSSD::ServiceBase& other);
//end
public:
    ~ServiceBase ();
protected:
//ig    virtual void            virtual_hook (int, void*);
%ConvertToSubClassCode
    // CTSCC for subclasses of 'ServiceBase'
    sipClass = NULL;

    if (dynamic_cast<DNSSD::ServiceBase*>(sipCpp))
        {
        sipClass = sipClass_DNSSD_ServiceBase;
        if (dynamic_cast<DNSSD::PublicService*>(sipCpp))
            sipClass = sipClass_DNSSD_PublicService;
        else if (dynamic_cast<DNSSD::RemoteService*>(sipCpp))
            sipClass = sipClass_DNSSD_RemoteService;
        }
%End
//ig                            ServiceBase (ServiceBasePrivate*const d);
};
// ServiceBase

// //This should be public but it doesn't appear to be exported by the library.
//ig bool                    domainIsLocal (const QString& domain);
};
// DNSSD


%ModuleHeaderCode
//ctscc
#include <dnssd/publicservice.h>
#include <dnssd/remoteservice.h>
#include <dnssd/servicebase.h>
%End
