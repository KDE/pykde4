//
//     Copyright 2008 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


namespace Soprano
{
namespace Util
{

class AsyncModel : Soprano::FilterModel
{
%TypeHeaderCode
#include <soprano/asyncmodel.h>
%End


public:
                            AsyncModel (Soprano::Model* parent = 0);

    enum AsyncModelMode
    {
        SingleThreaded,
        MultiThreaded
    };

    void                    setMode (Soprano::Util::AsyncModel::AsyncModelMode mode);
    Soprano::Util::AsyncModel::AsyncModelMode  mode () const;
    Soprano::Util::AsyncResult*  addStatementAsync (const Soprano::Statement& statement);
    Soprano::Util::AsyncResult*  addStatementAsync (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node());
    Soprano::Util::AsyncResult*  addStatementsAsync (const QList<Soprano::Statement>& statements);
    Soprano::Util::AsyncResult*  removeStatementAsync (const Soprano::Statement& statement);
    Soprano::Util::AsyncResult*  removeStatementAsync (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node());
    Soprano::Util::AsyncResult*  removeStatementsAsync (const QList<Soprano::Statement>& statements);
    Soprano::Util::AsyncResult*  removeAllStatementsAsync (const Soprano::Statement& statement);
    Soprano::Util::AsyncResult*  removeAllStatementsAsync (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node());
    Soprano::Util::AsyncResult*  isEmptyAsync () const;
    Soprano::Util::AsyncResult*  statementCountAsync () const;
    Soprano::Util::AsyncResult*  listStatementsAsync (const Soprano::Statement& statement) const;
    Soprano::Util::AsyncResult*  listStatementsAsync (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node()) const;
    Soprano::Util::AsyncResult*  listStatementsAsync () const;
    Soprano::Util::AsyncResult*  listContextsAsync () const;
    Soprano::Util::AsyncResult*  executeQueryAsync (const QString& query, Soprano::Query::QueryLanguage language, const QString& userQueryLanguage = QString()) const;
    Soprano::Util::AsyncResult*  containsStatementAsync (const Soprano::Statement& statement) const;
    Soprano::Util::AsyncResult*  containsStatementAsync (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node()) const;
    Soprano::Util::AsyncResult*  containsAnyStatementAsync (const Soprano::Statement& statement) const;
    Soprano::Util::AsyncResult*  containsAnyStatementAsync (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node()) const;
    Soprano::Util::AsyncResult*  createBlankNodeAsync ();
    ~AsyncModel ();
    Soprano::StatementIterator  listStatements (const Soprano::Statement& partial) const;
    Soprano::NodeIterator   listContexts () const;
    Soprano::QueryResultIterator  executeQuery (const QString& query, Soprano::Query::QueryLanguage language, const QString& userQueryLanguage = QString()) const;
};
// AsyncModel

};
// Util

};
// Soprano




