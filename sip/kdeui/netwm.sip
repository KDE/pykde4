//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class NETRootInfo : NET
{
%TypeHeaderCode
#include <netwm.h>
%End


public:

    enum 
    {
        PROTOCOLS, 
        WINDOW_TYPES, 
        STATES, 
        PROTOCOLS2, 
        ACTIONS, 
        PROPERTIES_SIZE
    };

                         NETRootInfo (Window, const char*, SIP_PYLIST, int = -1, bool = 1) [(Display*, Window, const char*, const ulong*, int, int = -1, bool = 1)];
%MethodCode
//takes supportWindow | (Window) | wmName | (a Python string) | properties | (a Python list) |  screen | (int = -1) | doActivate | (bool = True)
    int count   = PyList_Size (a2);
    unsigned long *list = new unsigned long [count];

    for (int i = 0; i < count; i++)
        list [i] = (unsigned long)PyInt_AS_LONG (PyList_GET_ITEM (a2, i));

    Py_BEGIN_ALLOW_THREADS
    Display *d = QX11Info::display ();
    sipCpp = new sipNETRootInfo (d, a0, a1, list, count, a3, a4);
    Py_END_ALLOW_THREADS

    delete list;
%End

                         NETRootInfo (SIP_PYLIST, int = -1, bool = 1) [(Display*, const ulong*, int, int = -1, bool = 1)];
%MethodCode
//takes properties | (ulong) | screen | (int = -1) | doActivate | (bool = 1)
    int count   = PyList_Size (a0);
    unsigned long *list = new unsigned long [count];

    for (int i = 0; i < count; i++)
        list [i] = (unsigned long)PyInt_AS_LONG (PyList_GET_ITEM (a2, i));

    Py_BEGIN_ALLOW_THREADS
    Display *d = QX11Info::display ();
    sipCpp = new sipNETRootInfo (d, list, count, a1, a2);
    Py_END_ALLOW_THREADS

    delete list;
%End

                         NETRootInfo (ulong, int = -1, bool = 1) [(Display*, ulong, int = -1, bool = 1)];
%MethodCode
//takes  properties | (ulong) | screen | (int = -1) | doActivate | (bool = 1)

    Py_BEGIN_ALLOW_THREADS
    Display *d = QX11Info::display ();
    sipCpp = new sipNETRootInfo (d, a0, a1, a2);
    Py_END_ALLOW_THREADS
%End

                         NETRootInfo (const NETRootInfo&);
//ig     Display*             x11Display () const;
    Window               rootWindow () const;
    Window               supportWindow () const;
    const char*          wmName () const;
    int                  screenNumber () const;
    bool                 isSupported (NET::Property) const;
    bool                 isSupported (NET::Property2) const;
    bool                 isSupported (NET::WindowType) const;
    bool                 isSupported (NET::State) const;
    bool                 isSupported (NET::Action) const;
    SIP_PYLIST           supportedProperties () const [ulong* ()];
%MethodCode
//returns a Python list of ulong
    int count = 5;
    const ulong *props;
    Py_BEGIN_ALLOW_THREADS
    props = sipCpp->supportedProperties ();
    Py_END_ALLOW_THREADS

    for (int i = 0; i < count; i++)
        PyList_Append (sipRes, PyLong_FromUnsignedLong (props [i]));
%End

    SIP_PYLIST           passedProperties () const [ulong* ()];
%MethodCode
//returns a Python list of ulong
    int count = 5;
    const ulong *props;
    Py_BEGIN_ALLOW_THREADS
    props = sipCpp->passedProperties ();
    Py_END_ALLOW_THREADS

    for (int i = 0; i < count; i++)
        PyList_Append (sipRes, PyLong_FromUnsignedLong (props [i]));
%End

    SIP_PYLIST           clientList () const [Window* ()];
%MethodCode
//returns a Python list of Window
    int count = sipCpp->clientListCount ();
    const Window *props;
    Py_BEGIN_ALLOW_THREADS
    props = sipCpp->clientList ();
    Py_END_ALLOW_THREADS

    for (int i = 0; i < count; i++)
        PyList_Append (sipRes, PyLong_FromUnsignedLong ((unsigned long)props [i]));
%End

    int                  clientListCount () const;
    SIP_PYLIST           clientListStacking () const [Window* ()];
%MethodCode
//returns a Python list of Window
    int count = sipCpp->clientListStackingCount ();
    const Window *props;
    Py_BEGIN_ALLOW_THREADS
    props = sipCpp->clientListStacking ();
    Py_END_ALLOW_THREADS

    for (int i = 0; i < count; i++)
        PyList_Append (sipRes, PyLong_FromUnsignedLong ((unsigned long)props [i]));
%End

    int                  clientListStackingCount () const;
    NETSize              desktopGeometry (int) const;
    NETPoint             desktopViewport (int) const;
    NETRect              workArea (int) const;
    const char*          desktopName (int) const;
    SIP_PYLIST           virtualRoots () const [Window* ()];
%MethodCode
//returns a Python list of Window
    int count = sipCpp->virtualRootsCount ();
    const Window *props;
    Py_BEGIN_ALLOW_THREADS
    props = sipCpp->virtualRoots ();
    Py_END_ALLOW_THREADS

    for (int i = 0; i < count; i++)
        PyList_Append (sipRes, PyLong_FromUnsignedLong ((unsigned long)props [i]));
%End

    int                  virtualRootsCount () const;
    NET::Orientation     desktopLayoutOrientation () const;
    QSize                desktopLayoutColumnsRows () const;
    NET::DesktopLayoutCorner desktopLayoutCorner () const;
    int                  numberOfDesktops (bool = 0) const;
    int                  currentDesktop (bool = 0) const;
    Window               activeWindow () const;
    void                 activate ();
    void                 setClientList (SIP_PYLIST) [void (Window*, uint)];
%MethodCode
//takes windows | (a Python list of Window)

    int n = PyList_Size (a0);
    Window array [n];
    PyObject *elem;

    for (int i = 0; i < n; i++)
    {
        elem = PyList_GetItem (a0, i);
        if (!PyLong_Check (elem))
            return NULL;

        array [i] = (Window) PyLong_AsUnsignedLong (elem);
    }

    Py_BEGIN_ALLOW_THREADS
    sipCpp->setClientList (array, n);
    Py_END_ALLOW_THREADS
%End

    void                 setClientListStacking (SIP_PYLIST) [void (Window*, uint)];
%MethodCode
//takes windows | (a Python list of Window)

    int n = PyList_Size (a0);
    Window array [n];
    PyObject *elem;

    for (int i = 0; i < n; i++)
    {
        elem = PyList_GetItem (a0, i);
        if (!PyLong_Check (elem))
            return NULL;

        array [i] = (Window) PyLong_AsUnsignedLong (elem);
    }

    Py_BEGIN_ALLOW_THREADS
    sipCpp->setClientListStacking (array, n);
    Py_END_ALLOW_THREADS
%End

    void                 setCurrentDesktop (int, bool = 0);
    void                 setDesktopGeometry (int, const NETSize&);
    void                 setDesktopViewport (int, const NETPoint&);
    void                 setNumberOfDesktops (int);
    void                 setDesktopName (int, const char*);
    void                 setActiveWindow (Window, NET::RequestSource, Time, Window);
    void                 setActiveWindow (Window);
    void                 setWorkArea (int, const NETRect&);
    void                 setVirtualRoots (SIP_PYLIST) [void (Window*, uint)];
%MethodCode
//takes windows | (a Python list of Window)
    int n = PyList_Size (a0);

    Window array [n];
    PyObject *elem;

    for (int i = 0; i < n; i++)
    {
        elem = PyList_GetItem (a0, i);
        if (!PyLong_Check (elem))
            return NULL;

        array [i] = (Window) PyLong_AsUnsignedLong (elem);
    }

    Py_BEGIN_ALLOW_THREADS
    sipCpp->setVirtualRoots (array, n);
    Py_END_ALLOW_THREADS
%End

    void                 setDesktopLayout (NET::Orientation, int, int, NET::DesktopLayoutCorner);
    void                 setShowingDesktop (bool);
    bool                 showingDesktop () const;
    void                 closeWindowRequest (Window);
    void                 moveResizeRequest (Window, int, int, Direction);
    void                 moveResizeWindowRequest (Window, int, int, int, int, int);
    void                 restackRequest (Window, RequestSource, Window, int, Time);
    void                 sendPing (Window, Time);
    void                 takeActivity (Window, Time, long);
//ig     void                 event (XEvent*, ulong*, int);
//ig     ulong                event (XEvent*);

protected:
    virtual void         addClient (Window);
    virtual void         removeClient (Window);
    virtual void         changeNumberOfDesktops (int);
    virtual void         changeDesktopGeometry (int, const NETSize&);
    virtual void         changeDesktopViewport (int, const NETPoint&);
    virtual void         changeCurrentDesktop (int);
    virtual void         closeWindow (Window);
    virtual void         moveResize (Window, int, int, ulong);
    virtual void         gotPing (Window, Time);
    virtual void         changeActiveWindow (Window, NET::RequestSource, Time, Window);
    virtual void         moveResizeWindow (Window, int, int, int, int, int);
    virtual void         restackWindow (Window, NET::RequestSource, Window, int, Time);
    virtual void         gotTakeActivity (Window, Time, long);
    virtual void         changeShowingDesktop (bool);

protected:
//igx     virtual void         virtual_hook (int, void*);

};  // class NETRootInfo


class NETWinInfo : NET
{
%TypeHeaderCode
#include <netwm.h>
%End


public:

    enum 
    {
        PROTOCOLS, 
        PROTOCOLS2, 
        PROPERTIES_SIZE
    };

                         NETWinInfo (Window, Window, SIP_PYLIST, Role = Client ) [(Display*, Window, Window, const ulong*, int, Role = Client )];
%MethodCode
//takes window | (Window) | rootWindow | (Window) | properties | (ulong) | role | (int) | a3 | (Role = Client)
    int count   = PyList_Size (a2);
    unsigned long *list = new unsigned long [count];

    for (int i = 0; i < count; i++)
        list [i] = (unsigned long)PyInt_AS_LONG (PyList_GET_ITEM (a2, i));

    Py_BEGIN_ALLOW_THREADS
    Display *d = QX11Info::display ();
    sipCpp = new sipNETWinInfo (d, a0, a1, list, count, a3);
    Py_END_ALLOW_THREADS

    delete list;
%End

                         NETWinInfo (Window, Window, ulong, Role = Client ) [(Display*, Window, Window, ulong, Role = Client )];
%MethodCode
//returns ()
//takes window (Window) | rootWindow (Window) | properties (ulong) | role (Role = Client)

    Py_BEGIN_ALLOW_THREADS
    Display *d = QX11Info::display ();
    sipCpp = new sipNETWinInfo (d, a0, a1, a2, a3);
    Py_END_ALLOW_THREADS
%End

                         NETWinInfo (const NETWinInfo&);
    bool                 hasNETSupport () const;
    SIP_PYLIST           passedProperties () const [ulong* ()];
%MethodCode
//returns a Python list of ulong
    int count = 2;
    const ulong *props;
    Py_BEGIN_ALLOW_THREADS
    props = sipCpp->passedProperties ();
    Py_END_ALLOW_THREADS

    for (int i = 0; i < count; i++)
        PyList_Append (sipRes, PyLong_FromUnsignedLong (props [i]));
%End

    NETRect              iconGeometry () const;
    ulong                state () const;
    NETExtendedStrut     extendedStrut () const;
    NETStrut             strut () const;
    WindowType           windowType (ulong) const;
    const char*          name () const;
    const char*          visibleName () const;
    const char*          iconName () const;
    const char*          visibleIconName () const;
    int                  desktop (bool = 0) const;
    int                  pid () const;
    Bool                 handledIcons () const;
    MappingState         mappingState () const;
//ig     void                 setIcon (NETIcon, Bool = True);
    void                 setIconGeometry (NETRect);
    void                 setExtendedStrut (const NETExtendedStrut&);
    void                 setStrut (NETStrut);
    void                 setState (ulong, ulong);
    void                 setWindowType (WindowType);
    void                 setName (const char*);
    void                 setVisibleName (const char*);
    void                 setIconName (const char*);
    void                 setVisibleIconName (const char*);
    void                 setDesktop (int, bool = 0);
    void                 setPid (int);
    void                 setHandledIcons (Bool);
    void                 setFrameExtents (NETStrut);
//ig     NETIcon              icon (int = -1, int = -1) const;
    void                 setUserTime (Time);
    Time                 userTime () const;
    void                 setStartupId (const char*);
    const char*          startupId () const;
    void                 setOpacity (ulong);
    ulong                opacity () const;
    void                 setAllowedActions (ulong);
    ulong                allowedActions () const;
    Window               transientFor () const;
    Window               groupLeader () const;
    const char*          windowClassClass () const;
    const char*          windowClassName () const;
    const char*          windowRole () const;
    const char*          clientMachine () const;
    void                 kdeGeometry (NETRect&, NETRect&);
//ig     void                 event (XEvent*, ulong*, int);
//ig     ulong                event (XEvent*);
//ig     const int            OnAllDesktops;

protected:
    virtual void         changeDesktop (int);
    virtual void         changeState (ulong, ulong);

protected:
//igx     virtual void         virtual_hook (int, void*);

};  // class NETWinInfo

//force
typedef ulong Time;
//end
