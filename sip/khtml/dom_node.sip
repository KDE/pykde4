//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module khtml  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
//ctscc
#include <dom_text.h>
#include <dom_xml.h>
#include <dom_doc.h>
#include <html_document.h>
#include <dom_element.h>
#include <html_element.h>
#include <html_head.h>
#include <html_form.h>
#include <html_base.h>
#include <html_block.h>
#include <html_inline.h>
#include <html_list.h>
#include <html_image.h>
#include <html_table.h>
#include <html_object.h>
#include <html_misc.h>
%End

namespace DOM
{

class NamedNodeMap
{
%TypeHeaderCode
#include <dom_node.h>
%End


public:
                         NamedNodeMap ();
                         NamedNodeMap (const DOM::NamedNodeMap&);
    ulong                length () const;
    DOM::Node            getNamedItem (const DOM::DOMString&) const;
    DOM::Node            setNamedItem (const DOM::Node&);
    DOM::Node            removeNamedItem (const DOM::DOMString&);
    DOM::Node            item (ulong) const;
    DOM::Node            getNamedItemNS (const DOM::DOMString&, const DOM::DOMString&) const;
    DOM::Node            setNamedItemNS (const DOM::Node&);
    DOM::Node            removeNamedItemNS (const DOM::DOMString&, const DOM::DOMString&);
//ig     NamedNodeMapImpl*    handle () const;
    bool                 isNull () const;

protected:
//ig                          NamedNodeMap (NamedNodeMapImpl*);

};  // class NamedNodeMap


class Node
{
%TypeHeaderCode
#include <dom_node.h>
%End


public:
                         Node ();
                         Node (const DOM::Node&);
//ig                          Node (NodeImpl*);
    bool                 operator == (const DOM::Node&);
    bool                 operator != (const DOM::Node&);

    enum NodeType
    {
        ELEMENT_NODE, 
        ATTRIBUTE_NODE, 
        TEXT_NODE, 
        CDATA_SECTION_NODE, 
        ENTITY_REFERENCE_NODE, 
        ENTITY_NODE, 
        PROCESSING_INSTRUCTION_NODE, 
        COMMENT_NODE, 
        DOCUMENT_NODE, 
        DOCUMENT_TYPE_NODE, 
        DOCUMENT_FRAGMENT_NODE, 
        NOTATION_NODE
    };

    DOM::DOMString       nodeName () const;
    DOM::DOMString       nodeValue () const;
    void                 setNodeValue (const DOM::DOMString&);
    ushort               nodeType () const;
    DOM::Node            parentNode () const;
    DOM::NodeList        childNodes () const;
    DOM::Node            firstChild () const;
    DOM::Node            lastChild () const;
    DOM::Node            previousSibling () const;
    DOM::Node            nextSibling () const;
    DOM::NamedNodeMap    attributes () const;
    DOM::Document        ownerDocument () const;
    DOM::Node            insertBefore (const DOM::Node&, const DOM::Node&);
    DOM::Node            replaceChild (const DOM::Node&, const DOM::Node&);
    DOM::Node            removeChild (const DOM::Node&);
    DOM::Node            appendChild (const DOM::Node&);
    bool                 hasChildNodes ();
    DOM::Node            cloneNode (bool);
    void                 normalize ();
    bool                 isSupported (const DOM::DOMString&, const DOM::DOMString&) const;
    DOM::DOMString       namespaceURI () const;
    DOM::DOMString       prefix () const;
    void                 setPrefix (const DOM::DOMString&);
    DOM::DOMString       localName () const;
    bool                 hasAttributes ();
    void                 addEventListener (const DOM::DOMString&, DOM::EventListener*, const bool);
    void                 removeEventListener (const DOM::DOMString&, DOM::EventListener*, bool);
    bool                 dispatchEvent (const DOM::Event&);
    DOM::DOMString       textContent () const;
    void                 setTextContent (const DOM::DOMString&);
    quint32              elementId () const;
    bool                 isNull () const;
//ig     NodeImpl*            handle () const;
    ulong                index () const;
    QString              toHTML ();
    void                 applyChanges ();
    void                 getCursor (int, int& /Out/, int& /Out/, int& /Out/);
    QRect                getRect ();

protected:

// Subclasses for DOM::Node

public:
%ConvertToSubClassCode

    if (dynamic_cast<DOM::CharacterData*>(sipCpp))
    {
        sipClass = sipClass_DOM_CharacterData;
        if (dynamic_cast<DOM::Comment*>(sipCpp))
            sipClass = sipClass_DOM_Comment;
        else if (dynamic_cast<DOM::Text*>(sipCpp))
        {
            sipClass = sipClass_DOM_Text;
            if (dynamic_cast<DOM::CDATASection*>(sipCpp))
                sipClass = sipClass_DOM_CDATASection;
        }
    }
    else if (dynamic_cast<DOM::Document*>(sipCpp))
    {
        sipClass = sipClass_DOM_Document;
        if (dynamic_cast<DOM::HTMLDocument*>(sipCpp))
            sipClass = sipClass_DOM_HTMLDocument;
    }
    else if (dynamic_cast<DOM::Element*>(sipCpp))
    {
        sipClass = sipClass_DOM_Element;
        if (dynamic_cast<DOM::HTMLElement*>(sipCpp))
        {
            sipClass = sipClass_DOM_HTMLElement;
            if (dynamic_cast<DOM::HTMLLinkElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLLinkElement;
            else if (dynamic_cast<DOM::HTMLOptionElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLOptionElement;
            else if (dynamic_cast<DOM::HTMLStyleElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLStyleElement;
            else if (dynamic_cast<DOM::HTMLFormElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLFormElement;
            else if (dynamic_cast<DOM::HTMLIFrameElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLIFrameElement;
            else if (dynamic_cast<DOM::HTMLIsIndexElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLIsIndexElement;
            else if (dynamic_cast<DOM::HTMLPreElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLPreElement;
            else if (dynamic_cast<DOM::HTMLFrameSetElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLFrameSetElement;
            else if (dynamic_cast<DOM::HTMLButtonElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLButtonElement;
            else if (dynamic_cast<DOM::HTMLTitleElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLTitleElement;
            else if (dynamic_cast<DOM::HTMLMetaElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLMetaElement;
            else if (dynamic_cast<DOM::HTMLModElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLModElement;
            else if (dynamic_cast<DOM::HTMLHtmlElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLHtmlElement;
            else if (dynamic_cast<DOM::HTMLDListElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLDListElement;
            else if (dynamic_cast<DOM::HTMLMapElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLMapElement;
            else if (dynamic_cast<DOM::HTMLHeadingElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLHeadingElement;
            else if (dynamic_cast<DOM::HTMLFrameElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLFrameElement;
            else if (dynamic_cast<DOM::HTMLOptGroupElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLOptGroupElement;
            else if (dynamic_cast<DOM::HTMLBodyElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLBodyElement;
            else if (dynamic_cast<DOM::HTMLFontElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLFontElement;
            else if (dynamic_cast<DOM::HTMLTableCaptionElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLTableCaptionElement;
            else if (dynamic_cast<DOM::HTMLDirectoryElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLDirectoryElement;
            else if (dynamic_cast<DOM::HTMLTextAreaElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLTextAreaElement;
            else if (dynamic_cast<DOM::HTMLQuoteElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLQuoteElement;
            else if (dynamic_cast<DOM::HTMLTableRowElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLTableRowElement;
            else if (dynamic_cast<DOM::HTMLBRElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLBRElement;
            else if (dynamic_cast<DOM::HTMLHRElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLHRElement;
            else if (dynamic_cast<DOM::HTMLAppletElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLAppletElement;
            else if (dynamic_cast<DOM::HTMLHeadElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLHeadElement;
            else if (dynamic_cast<DOM::HTMLDivElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLDivElement;
            else if (dynamic_cast<DOM::HTMLScriptElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLScriptElement;
            else if (dynamic_cast<DOM::HTMLLayerElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLLayerElement;
            else if (dynamic_cast<DOM::HTMLUListElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLUListElement;
            else if (dynamic_cast<DOM::HTMLInputElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLInputElement;
            else if (dynamic_cast<DOM::HTMLAnchorElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLAnchorElement;
            else if (dynamic_cast<DOM::HTMLSelectElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLSelectElement;
            else if (dynamic_cast<DOM::HTMLOListElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLOListElement;
            else if (dynamic_cast<DOM::HTMLParamElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLParamElement;
            else if (dynamic_cast<DOM::HTMLTableCellElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLTableCellElement;
            else if (dynamic_cast<DOM::HTMLMenuElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLMenuElement;
            else if (dynamic_cast<DOM::HTMLTableColElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLTableColElement;
            else if (dynamic_cast<DOM::HTMLBaseElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLBaseElement;
            else if (dynamic_cast<DOM::HTMLObjectElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLObjectElement;
            else if (dynamic_cast<DOM::HTMLFieldSetElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLFieldSetElement;
            else if (dynamic_cast<DOM::HTMLImageElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLImageElement;
            else if (dynamic_cast<DOM::HTMLTableSectionElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLTableSectionElement;
            else if (dynamic_cast<DOM::HTMLLIElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLLIElement;
            else if (dynamic_cast<DOM::HTMLLegendElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLLegendElement;
            else if (dynamic_cast<DOM::HTMLAreaElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLAreaElement;
            else if (dynamic_cast<DOM::HTMLParagraphElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLParagraphElement;
            else if (dynamic_cast<DOM::HTMLBlockquoteElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLBlockquoteElement;
            else if (dynamic_cast<DOM::HTMLTableElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLTableElement;
            else if (dynamic_cast<DOM::HTMLBaseFontElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLBaseFontElement;
            else if (dynamic_cast<DOM::HTMLLabelElement*>(sipCpp))
                sipClass = sipClass_DOM_HTMLLabelElement;
        }
    }
    else if (dynamic_cast<DOM::Attr*>(sipCpp))
        sipClass = sipClass_DOM_Attr;
    else if (dynamic_cast<DOM::DocumentFragment*>(sipCpp))
        sipClass = sipClass_DOM_DocumentFragment;
    else if (dynamic_cast<DOM::DocumentType*>(sipCpp))
        sipClass = sipClass_DOM_DocumentType;
    else if (dynamic_cast<DOM::Entity*>(sipCpp))
        sipClass = sipClass_DOM_Entity;
    else if (dynamic_cast<DOM::EntityReference*>(sipCpp))
        sipClass = sipClass_DOM_EntityReference;
    else if (dynamic_cast<DOM::Notation*>(sipCpp))
        sipClass = sipClass_DOM_Notation;
    else if (dynamic_cast<DOM::ProcessingInstruction*>(sipCpp))
        sipClass = sipClass_DOM_ProcessingInstruction;
    else
        sipClass = NULL;
%End


};  // class Node


class NodeList
{
%TypeHeaderCode
#include <dom_node.h>
%End


public:
                         NodeList ();
                         NodeList (const DOM::NodeList&);
    ulong                length () const;
    DOM::Node            item (ulong) const;
//ig     NodeListImpl*        handle () const;
    bool                 isNull () const;

protected:
//ig                          NodeList (const NodeListImpl*);

};  // class NodeList

typedef qlonglong DOMTimeStamp;
};  // namespace DOM

