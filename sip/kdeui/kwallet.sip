//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace KWallet
{

class Wallet : QObject
{
%TypeHeaderCode
#include <kwallet.h>
%End


protected:
                         Wallet (int, const QString&);
//ig                          Wallet (const KWallet::Wallet&);

public:

    enum EntryType
    {
        Unknown, 
        Password, 
        Stream, 
        Map, 
        Unused
    };

    static QStringList   walletList ();
    static bool          isEnabled ();
    static bool          isOpen (const QString&);
    static int           closeWallet (const QString&, bool);
    static int           deleteWallet (const QString&);
    static bool          disconnectApplication (const QString&, const QString&);

    enum OpenType
    {
        Synchronous, 
        Asynchronous, 
        Path, 
        OpenTypeUnused
    };

    static KWallet::Wallet* openWallet (const QString&, WId, KWallet::Wallet::OpenType = KWallet::Wallet::Synchronous );
    static QStringList   users (const QString&);
    static const QString LocalWallet ();
    static const QString NetworkWallet ();
    static const QString PasswordFolder ();
    static const QString FormDataFolder ();
    static void          changePassword (const QString&, WId);
    virtual int          sync ();
    virtual int          lockWallet ();
    virtual const QString& walletName () const;
    virtual bool         isOpen () const;
    virtual void         requestChangePassword (WId);
    virtual QStringList  folderList ();
    virtual bool         hasFolder (const QString&);
    virtual bool         setFolder (const QString&);
    virtual bool         removeFolder (const QString&);
    virtual bool         createFolder (const QString&);
    virtual const QString& currentFolder () const;
    virtual QStringList  entryList ();
    virtual int          renameEntry (const QString&, const QString&);
    virtual int          readEntry (const QString&, QByteArray&);
    virtual int          readMap (const QString&, QMap<QString, QString>&);
    virtual int          readPassword (const QString&, QString&);
    int                  readEntryList (const QString&, QMap<QString, QByteArray>&);
//ig     int                  readMapList (const QString&, QMap<QString, QMap<QString, QString>>&);
    int                  readPasswordList (const QString&, QMap<QString, QString>&);
    virtual int          writeEntry (const QString&, const QByteArray&, KWallet::Wallet::EntryType);
    virtual int          writeEntry (const QString&, const QByteArray&);
    virtual int          writeMap (const QString&, const QMap<QString, QString>&);
    virtual int          writePassword (const QString&, const QString&);
    virtual bool         hasEntry (const QString&);
    virtual int          removeEntry (const QString&);
    virtual KWallet::Wallet::EntryType entryType (const QString&);
    static bool          folderDoesNotExist (const QString&, const QString&);
    static bool          keyDoesNotExist (const QString&, const QString&, const QString&);

signals:
    void                 walletClosed ();
    void                 folderUpdated (const QString&);
    void                 folderListUpdated ();
    void                 folderRemoved (const QString&);
    void                 walletOpened (bool);

protected:
//igx     virtual void         virtual_hook (int, void*);

};  // class Wallet

};  // namespace KWallet

