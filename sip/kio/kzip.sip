//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine
//            PyKDE4 module kio  version KDE 4.0.2

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KZip : KArchive
{
%TypeHeaderCode
#include <kzip.h>
%End


public:
                            KZip (const QString& filename);
                            KZip (QIODevice* dev);

    enum ExtraField
    {
        NoExtraField,
        ModificationTime,
        DefaultExtraField
    };

    void                    setExtraField (KZip::ExtraField ef);
    KZip::ExtraField        extraField () const;

    enum Compression
    {
        NoCompression,
        DeflateCompression
    };

    void                    setCompression (KZip::Compression c);
    KZip::Compression       compression () const;
    virtual bool            writeData (const char* data, qint64 size);

protected:
    virtual bool            doWriteSymLink (const QString& name, const QString& target, const QString& user, const QString& group, mode_t perm, time_t atime, time_t mtime, time_t ctime);
    virtual bool            doPrepareWriting (const QString& name, const QString& user, const QString& group, qint64 size, mode_t perm, time_t atime, time_t mtime, time_t ctime);
    virtual bool            doFinishWriting (qint64 size);
    virtual bool            openArchive (QIODevice::OpenMode mode);
    virtual bool            closeArchive ();
    virtual bool            doWriteDir (const QString& name, const QString& user, const QString& group, mode_t perm, time_t atime, time_t mtime, time_t ctime);
//ig     virtual void       virtual_hook (int id, void* data);
private:
                            KZip (const KZip &other);
};   // KZip


class KZipFileEntry : KArchiveFile
{
%TypeHeaderCode
#include <kzip.h>
%End


public:
                            KZipFileEntry (KZip* zip, const QString& name, int access, int date, const QString& user, const QString& group, const QString& symlink, const QString& path, qint64 start, qint64 uncompressedSize, int encoding, qint64 compressedSize);
    int                     encoding () const;
    qint64                  compressedSize () const;
    void                    setCompressedSize (qint64 compressedSize);
    void                    setHeaderStart (qint64 headerstart);
    qint64                  headerStart () const;
    unsigned long           crc32 () const;
    void                    setCRC32 (unsigned long crc32);
    const QString&          path () const;
    virtual QByteArray      data () const;
    virtual QIODevice*      createDevice () const;

private:
                            KZipFileEntry (const KZipFileEntry &other);
};   // KZipFileEntry


