//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module khtml  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
#include <css_value.h>
%End

namespace DOM
{

class CSSStyleDeclaration
{
%TypeHeaderCode
#include <css_value.h>
%End


public:
                         CSSStyleDeclaration ();
                         CSSStyleDeclaration (const DOM::CSSStyleDeclaration&);
//ig                          CSSStyleDeclaration (CSSStyleDeclarationImpl*);

public:
    DOM::DOMString       cssText () const;
    void                 setCssText (const DOM::DOMString&);
    ulong                length () const;
    DOM::CSSRule         parentRule () const;
    DOM::DOMString       getPropertyValue (const DOM::DOMString&);
    DOM::CSSValue        getPropertyCSSValue (const DOM::DOMString&);
    DOM::DOMString       removeProperty (const DOM::DOMString&);
    DOM::DOMString       getPropertyPriority (const DOM::DOMString&);
    void                 setProperty (const DOM::DOMString&, const DOM::DOMString&, const DOM::DOMString&);
    DOM::DOMString       item (ulong);
//ig     CSSStyleDeclarationImpl* handle () const;
    bool                 isNull () const;

protected:

};  // class CSSStyleDeclaration


class CSSValue
{
%TypeHeaderCode
#include <css_value.h>
%End


public:
                         CSSValue ();
                         CSSValue (const DOM::CSSValue&);
//ig                          CSSValue (CSSValueImpl*);

public:

    enum UnitTypes
    {
        CSS_INHERIT, 
        CSS_PRIMITIVE_VALUE, 
        CSS_VALUE_LIST, 
        CSS_CUSTOM, 
        CSS_INITIAL
    };

    DOM::DOMString       cssText () const;
    void                 setCssText (const DOM::DOMString&);
    ushort               cssValueType () const;
    bool                 isCSSValueList () const;
    bool                 isCSSPrimitiveValue () const;
//ig     CSSValueImpl*        handle () const;
    bool                 isNull () const;

protected:

};  // class CSSValue


class CSSValueList : DOM::CSSValue
{
%TypeHeaderCode
#include <css_value.h>
%End


public:
                         CSSValueList ();
                         CSSValueList (const DOM::CSSValueList&);
                         CSSValueList (const DOM::CSSValue&);
//ig                          CSSValueList (CSSValueListImpl*);

public:
    ulong                length () const;
    DOM::CSSValue        item (ulong);

protected:

};  // class CSSValueList


class CSSPrimitiveValue : DOM::CSSValue
{
%TypeHeaderCode
#include <css_value.h>
%End


public:
                         CSSPrimitiveValue ();
                         CSSPrimitiveValue (const DOM::CSSPrimitiveValue&);
                         CSSPrimitiveValue (const DOM::CSSValue&);
//ig                          CSSPrimitiveValue (CSSPrimitiveValueImpl*);

public:

    enum UnitTypes
    {
        CSS_UNKNOWN, 
        CSS_NUMBER, 
        CSS_PERCENTAGE, 
        CSS_EMS, 
        CSS_EXS, 
        CSS_PX, 
        CSS_CM, 
        CSS_MM, 
        CSS_IN, 
        CSS_PT, 
        CSS_PC, 
        CSS_DEG, 
        CSS_RAD, 
        CSS_GRAD, 
        CSS_MS, 
        CSS_S, 
        CSS_HZ, 
        CSS_KHZ, 
        CSS_DIMENSION, 
        CSS_STRING, 
        CSS_URI, 
        CSS_IDENT, 
        CSS_ATTR, 
        CSS_COUNTER, 
        CSS_RECT, 
        CSS_RGBCOLOR, 
        CSS_PAIR, 
        CSS_HTML_RELATIVE
    };

    ushort               primitiveType () const;
    void                 setFloatValue (ushort, float);
    float                getFloatValue (ushort);
    void                 setStringValue (ushort, const DOM::DOMString&);
    DOM::DOMString       getStringValue ();
    DOM::Counter         getCounterValue ();
    DOM::Rect            getRectValue ();
    DOM::RGBColor        getRGBColorValue ();

};  // class CSSPrimitiveValue


class RGBColor
{
%TypeHeaderCode
#include <css_value.h>
%End


public:
                         RGBColor ();
                         RGBColor (const QColor&);
                         RGBColor (QRgb);
                         RGBColor (const DOM::RGBColor&);
    DOM::CSSPrimitiveValue red () const;
    DOM::CSSPrimitiveValue green () const;
    DOM::CSSPrimitiveValue blue () const;
    QRgb                 color () const;

protected:

};  // class RGBColor


class Rect
{
%TypeHeaderCode
#include <css_value.h>
%End


public:
                         Rect ();
                         Rect (const DOM::Rect&);
    DOM::CSSPrimitiveValue top () const;
    DOM::CSSPrimitiveValue right () const;
    DOM::CSSPrimitiveValue bottom () const;
    DOM::CSSPrimitiveValue left () const;
//ig     RectImpl*            handle () const;
    bool                 isNull () const;

protected:
//ig                          Rect (RectImpl*);

};  // class Rect


class Counter
{
%TypeHeaderCode
#include <css_value.h>
%End


public:
                         Counter ();
                         Counter (const DOM::Counter&);

public:
    DOM::DOMString       identifier () const;
    DOM::DOMString       listStyle () const;
    DOM::DOMString       separator () const;
//ig     CounterImpl*         handle () const;
    bool                 isNull () const;

protected:
//ig                          Counter (CounterImpl*);

};  // class Counter

};  // namespace DOM

