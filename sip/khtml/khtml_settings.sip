//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KHTMLSettings
{
%TypeHeaderCode
#include <khtml_settings.h>
%End


public:

    enum KJavaScriptAdvice
    {
        KJavaScriptDunno,
        KJavaScriptAccept,
        KJavaScriptReject
    };


    enum KAnimationAdvice
    {
        KAnimationDisabled,
        KAnimationLoopOnce,
        KAnimationEnabled
    };



    enum KSmoothScrollingMode
    {
        KSmoothScrollingDisabled,
        KSmoothScrollingWhenEfficient,
        KSmoothScrollingEnabled
    };



    enum KJSWindowOpenPolicy
    {
        KJSWindowOpenAllow,
        KJSWindowOpenAsk,
        KJSWindowOpenDeny,
        KJSWindowOpenSmart
    };


    enum KJSWindowStatusPolicy
    {
        KJSWindowStatusAllow,
        KJSWindowStatusIgnore
    };


    enum KJSWindowMovePolicy
    {
        KJSWindowMoveAllow,
        KJSWindowMoveIgnore
    };


    enum KJSWindowResizePolicy
    {
        KJSWindowResizeAllow,
        KJSWindowResizeIgnore
    };


    enum KJSWindowFocusPolicy
    {
        KJSWindowFocusAllow,
        KJSWindowFocusIgnore
    };

                            KHTMLSettings ();
//                            KHTMLSettings (const KHTMLSettings& other);
    void                    init ();
    void                    init (KConfig* config, bool reset = 1);
    bool                    changeCursor () const;
    bool                    underlineLink () const;
    bool                    hoverLink () const;
    bool                    allowTabulation () const;
    bool                    autoSpellCheck () const;
    KHTMLSettings::KAnimationAdvice  showAnimations () const;

    KHTMLSettings::KSmoothScrollingMode  smoothScrolling () const;

    QString                 stdFontName () const;
    QString                 fixedFontName () const;
    QString                 serifFontName () const;
    QString                 sansSerifFontName () const;
    QString                 cursiveFontName () const;
    QString                 fantasyFontName () const;
    void                    setStdFontName (const QString& n);
    void                    setFixedFontName (const QString& n);
    int                     minFontSize () const;
    int                     mediumFontSize () const;
    bool                    jsErrorsEnabled () const;
    void                    setJSErrorsEnabled (bool enabled);
    const QString&          encoding () const;
    bool                    followSystemColors () const;
    const QColor&           textColor () const;
    const QColor&           baseColor () const;
    const QColor&           linkColor () const;
    const QColor&           vLinkColor () const;
    bool                    autoLoadImages () const;
    bool                    unfinishedImageFrame () const;
    bool                    isOpenMiddleClickEnabled ();
    bool                    isBackRightClickEnabled ();
    bool                    isJavaEnabled (const QString& hostname = QString()) const;
    bool                    isJavaScriptEnabled (const QString& hostname = QString()) const;
    bool                    isJavaScriptDebugEnabled (const QString& hostname = QString()) const;
    bool                    isJavaScriptErrorReportingEnabled (const QString& hostname = QString()) const;
    bool                    isPluginsEnabled (const QString& hostname = QString()) const;
    bool                    isAdFiltered (const QString& url) const;
    bool                    isAdFilterEnabled () const;
    bool                    isHideAdsEnabled () const;
    void                    addAdFilter (const QString& url);
    bool                    accessKeysEnabled () const;
    KHTMLSettings::KJSWindowOpenPolicy  windowOpenPolicy (const QString& hostname = QString()) const;
    KHTMLSettings::KJSWindowMovePolicy  windowMovePolicy (const QString& hostname = QString()) const;
    KHTMLSettings::KJSWindowResizePolicy  windowResizePolicy (const QString& hostname = QString()) const;
    KHTMLSettings::KJSWindowStatusPolicy  windowStatusPolicy (const QString& hostname = QString()) const;
    KHTMLSettings::KJSWindowFocusPolicy  windowFocusPolicy (const QString& hostname = QString()) const;
    static KHTMLSettings::KJavaScriptAdvice  strToAdvice (const QString& _str);
//ig     static void        splitDomainAdvice (const QString& configStr, QString& domain, KHTMLSettings::KJavaScriptAdvice& javaAdvice, KHTMLSettings::KJavaScriptAdvice& javaScriptAdvice);
    static const char*      adviceToStr (KHTMLSettings::KJavaScriptAdvice _advice);
//ig     void               readDomainSettings (const KConfigGroup& config, bool reset, bool global, KPerDomainSettings& pd_settings);
    QString                 settingsToCSS () const;
    static const QString&   availableFamilies ();
    QString                 userStyleSheet () const;
    bool                    isFormCompletionEnabled () const;
    int                     maxFormCompletionItems () const;
    bool                    isAutoDelayedActionsEnabled () const;
    QList<QPair<QString,QChar>>  fallbackAccessKeysAssignments () const;
    void                    setJSPopupBlockerPassivePopup (bool enabled);
    bool                    jsPopupBlockerPassivePopup () const;

private:
    KHTMLSettings(const KHTMLSettings &);
};   // KHTMLSettings


