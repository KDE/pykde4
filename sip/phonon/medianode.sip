//
//     Copyright 2008 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace Phonon
{

class MediaNode /NoDefaultCtors/
{
%TypeHeaderCode
#include <phonon/medianode.h>
%End

public:
    bool                    isValid () const;
    QList<Phonon::Path>     inputPaths () const;
    QList<Phonon::Path>     outputPaths () const;

protected:
//ig                            MediaNode (MediaNodePrivate& dd);

public:
    virtual ~MediaNode ();
%ConvertToSubClassCode
    // CTSCC for subclasses of 'MediaNode'
    sipType = NULL;

    if (dynamic_cast<Phonon::AbstractAudioOutput*>(sipCpp))
        {
        sipType = sipType_Phonon_AbstractAudioOutput;
        if (dynamic_cast<Phonon::AudioDataOutput*>(sipCpp))
            sipType = sipType_Phonon_AudioDataOutput;
        }
    else if (dynamic_cast<Phonon::AbstractVideoOutput*>(sipCpp))
        {
        sipType = sipType_Phonon_AbstractVideoOutput;
        if (dynamic_cast<Phonon::VideoWidget*>(sipCpp))
            sipType = sipType_Phonon_VideoWidget;
        else if (dynamic_cast<Phonon::VideoWidget*>(sipCpp))
            sipType = sipType_Phonon_VideoWidget;
        }
    else if (dynamic_cast<Phonon::AudioOutput*>(sipCpp))
        sipType = sipType_Phonon_AudioOutput;
    else if (dynamic_cast<Phonon::Effect*>(sipCpp))
        {
        sipType = sipType_Phonon_Effect;
        if (dynamic_cast<Phonon::VolumeFaderEffect*>(sipCpp))
            sipType = sipType_Phonon_VolumeFaderEffect;
        }
    else if (dynamic_cast<Phonon::MediaObject*>(sipCpp))
        sipType = sipType_Phonon_MediaObject;
%End
};
// MediaNode

};
// Phonon


%ModuleHeaderCode
//ctscc
#include <phonon/abstractaudiooutput.h>
#include <phonon/abstractvideooutput.h>
#include <phonon/audiodataoutput.h>
#include <phonon/audiooutput.h>
#include <phonon/effect.h>
#include <phonon/medianode.h>
#include <phonon/mediaobject.h>
#include <videowidget.h>
#include <phonon/volumefadereffect.h>
%End
