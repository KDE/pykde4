//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KService : KSycocaEntry
{
%TypeHeaderCode
#include <kservice.h>
%End


public:
    typedef KSharedPtr<KService> Ptr;
    typedef QList<KService::Ptr> List;
                         KService (const QString&, const QString&, const QString&);
                         KService (const QString&);
                         KService (const KDesktopFile*);
                         KService (QDataStream&, int);
    bool                 isApplication () const;
    QString              type () const;
    QString              exec () const;
    QString              library () const;
    QString              icon () const;
    bool                 terminal () const;
    QString              terminalOptions () const;
    bool                 substituteUid () const;
    QString              username () const;
    QString              desktopEntryPath () const;
    QString              desktopEntryName () const;
    QString              menuId () const;
    QString              storageId () const;

    enum DBUSStartupType_t
    {
        DBUS_None, 
        DBUS_Unique, 
        DBUS_Multi, 
        DBUS_Wait
    };

    KService::DBUSStartupType_t DBUSStartupType () const;
    QString              path () const;
    QString              comment () const;
    QString              genericName () const;
    QString              untranslatedGenericName () const;
    QStringList          keywords () const;
    QStringList          categories () const;
    QStringList          serviceTypes () const;
    bool                 hasServiceType (const QString&) const;
    bool                 hasMimeType (const KServiceType*) const;
    bool                 allowAsDefault () const;
    bool                 allowMultipleFiles () const;
    int                  initialPreference () const;
    bool                 noDisplay () const;
    QString              parentApp () const;
    QString              pluginKeyword () const;
    QVariant             property (const QString&, QVariant::Type) const;
    QString              locateLocal () const;
    void                 setMenuId (const QString&);
    void                 setTerminal (bool);
    void                 setTerminalOptions (const QString&);
    static KService::Ptr serviceByName (const QString&);
    static KService::Ptr serviceByDesktopPath (const QString&);
    static KService::Ptr serviceByDesktopName (const QString&);
    static KService::Ptr serviceByMenuId (const QString&);
    static KService::Ptr serviceByStorageId (const QString&);
    static KService::List allServices ();
    static QString       newServicePath (bool, const QString&, QString* = 0, const QStringList* = 0);

protected:
    QStringList&         accessServiceTypes ();

public:



protected:





};  // class KService



%MappedType QList<KService::Ptr>
{
%TypeHeaderCode
#include <qlist.h>
%End

%ConvertFromTypeCode
    // Create the list.
    PyObject *l;

    if ((l = PyList_New(sipCpp->size())) == NULL)
        return NULL;

    // Set the list elements.
    for (int i = 0; i < sipCpp->size(); ++i)
    {
        KService::Ptr *t = new KService::Ptr (sipCpp->at(i));
        PyObject *tobj;

        if ((tobj = sipConvertFromNewInstance(t->data(), sipClass_KService, sipTransferObj)) == NULL)
        {
            Py_DECREF(l);
            delete t;

            return NULL;
        }

        PyList_SET_ITEM(l, i, tobj);
    }

    return l;
%End

%ConvertToTypeCode
    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (!PyList_Check(sipPy))
            return 0;

        for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
            if (!sipCanConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_KService, SIP_NOT_NONE))
                return 0;

        return 1;
    }

    QList<KService::Ptr> *ql = new QList<KService::Ptr>;
 
    for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
    {
        int state;
        KService *t = reinterpret_cast<KService *>(sipConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_KService, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr));
 
        if (*sipIsErr)
        {
            sipReleaseInstance(t, sipClass_KService, state);

            delete ql;
            return 0;
        }

        KSharedPtr<KService> *tptr = new KSharedPtr<KService> (t);

        ql->append(*tptr);

        sipReleaseInstance(t, sipClass_KService, state);
    }
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
%End
};


