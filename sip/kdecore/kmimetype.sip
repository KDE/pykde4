//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KMimeType : KServiceType
{
%TypeHeaderCode
#include <kmimetype.h>
%End


public:
    typedef KSharedPtr<KMimeType> Ptr;
    typedef QList<KMimeType::Ptr> List;
    QString              iconName () const;
    virtual QString      iconName (const KUrl&) const;
    static QString       iconNameForUrl (const KUrl&, mode_t = 0);
    static QString       favIconForUrl (const KUrl&);
    virtual QString      comment (const KUrl& = KUrl ()) const;
    QStringList          patterns () const;
    virtual void         load (QDataStream&);
    virtual void         save (QDataStream&);
    virtual QVariant     property (const QString&) const;
    virtual QStringList  propertyNames () const;

    enum FindByNameOption
    {
        DontResolveAlias, 
        ResolveAliases
    };

    static KMimeType::Ptr mimeType (const QString&, KMimeType::FindByNameOption = KMimeType::DontResolveAlias );
    static KMimeType::Ptr findByUrl (const KUrl&, mode_t = 0, bool = 0, bool = 0, int* /Out/ = 0);
    static KMimeType::Ptr findByPath (const QString&, mode_t = 0, bool = 0, int* /Out/ = 0);
    static KMimeType::Ptr findByContent (const QByteArray&, int* /Out/ = 0);
    static KMimeType::Ptr findByNameAndContent (const QString&, const QByteArray&, mode_t = 0, int* /Out/ = 0);
    static KMimeType::Ptr findByFileContent (const QString&, int* /Out/ = 0);
    static bool          isBinaryData (const QString&);
    static bool          isBufferBinaryData (const QByteArray&);
    static KMimeType::List allMimeTypes ();
    static QString       defaultMimeType ();
    static KMimeType::Ptr defaultMimeTypePtr ();
    bool                 isDefault () const;
    QString              parentMimeType () const;
    bool                 is (const QString&) const;
    static QString       extractKnownExtension (const QString&);

protected:
                         KMimeType (QDataStream&, int);
                         KMimeType (const QString&, const QString&, const QString&);
//ig                          KMimeType (KMimeTypePrivate&, QDataStream&, int);
//ig                          KMimeType (KMimeTypePrivate&, const QString&, const QString&, const QString&);
    void                 addPattern (const QString&);
    void                 setParentMimeType (const QString& /Transfer/);
    void                 internalClearData ();

protected:
//igx     virtual void         virtual_hook (int, void*);

};  // class KMimeType



%MappedType QList<KMimeType::Ptr>
{
%TypeHeaderCode
#include <qlist.h>
%End

%ConvertFromTypeCode
    // Create the list.
    PyObject *l;

    if ((l = PyList_New(sipCpp->size())) == NULL)
        return NULL;

    // Set the list elements.
    for (int i = 0; i < sipCpp->size(); ++i)
    {
        KMimeType::Ptr *t = new KMimeType::Ptr (sipCpp->at(i));
        PyObject *tobj;

        if ((tobj = sipConvertFromNewInstance(t->data(), sipClass_KMimeType, sipTransferObj)) == NULL)
        {
            Py_DECREF(l);
            delete t;

            return NULL;
        }

        PyList_SET_ITEM(l, i, tobj);
    }

    return l;
%End

%ConvertToTypeCode
    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (!PyList_Check(sipPy))
            return 0;

        for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
            if (!sipCanConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_KMimeType, SIP_NOT_NONE))
                return 0;

        return 1;
    }

    QList<KMimeType::Ptr> *ql = new QList<KMimeType::Ptr>;
 
    for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
    {
        int state;
        KMimeType *t = reinterpret_cast<KMimeType *>(sipConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_KMimeType, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr));
 
        if (*sipIsErr)
        {
            sipReleaseInstance(t, sipClass_KMimeType, state);

            delete ql;
            return 0;
        }

        KSharedPtr<KMimeType> *tptr = new KSharedPtr<KMimeType> (t);

        ql->append(*tptr);

        sipReleaseInstance(t, sipClass_KMimeType, state);
    }
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
%End
};


