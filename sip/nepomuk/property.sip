//
//     Copyright 2008 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace Nepomuk
{
namespace Types
{

class Property : Nepomuk::Types::Entity
{
%TypeHeaderCode
#include <nepomuk/property.h>
%End

public:
                            Property ();
                            Property (const QUrl& uri);
                            Property (const Nepomuk::Types::Property&);
    QList<Nepomuk::Types::Property>  parentProperties ();
    QList<Nepomuk::Types::Property>  subProperties ();
    Nepomuk::Types::Property  inverseProperty ();
    Nepomuk::Types::Class   range ();
    Nepomuk::Types::Literal  literalRangeType ();
    Nepomuk::Types::Class   domain ();
    int                     cardinality ();
    int                     minCardinality ();
    int                     maxCardinality ();
    bool                    isParentOf (const Nepomuk::Types::Property& other);
    bool                    isSubPropertyOf (const Nepomuk::Types::Property& other);
    ~Property ();
//ig    QList<Nepomuk::Types::Property>  parentProperties () const;
//ig    QList<Nepomuk::Types::Property>  subProperties () const;
//ig    Nepomuk::Types::Property  inverseProperty () const;
//ig    Nepomuk::Types::Class   range () const;
//ig    Nepomuk::Types::Literal  literalRangeType () const;
//ig    Nepomuk::Types::Class   domain () const;
//ig    int                     cardinality () const;
//ig    int                     minCardinality () const;
//ig    int                     maxCardinality () const;
//ig    bool                    isParentOf (const Nepomuk::Types::Property& other) const;
//ig    bool                    isSubPropertyOf (const Nepomuk::Types::Property& other) const;
};
// Property

};
// Types

//ig class Property;
// Nepomuk::Property is deprecated.
};
