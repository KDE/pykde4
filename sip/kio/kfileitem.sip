//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KFileItem
{
%TypeHeaderCode
#include <kfileitem.h>
%End


public:

    enum 
    {
        Unknown
    };


    enum FileTimes
    {
        ModificationTime, 
        AccessTime, 
        CreationTime
    };

                         KFileItem ();
                         KFileItem (const KIO::UDSEntry&, const KUrl&, bool = 0, bool = 0);
                         KFileItem (mode_t, mode_t, const KUrl&, bool = 0);
                         KFileItem (const KUrl&, const QString&, mode_t);
                         KFileItem (const KFileItem&);
    void                 refresh ();
    void                 refreshMimeType ();
    KUrl                 url () const;
    void                 setUrl (const KUrl&);
    void                 setName (const QString&);
    mode_t               permissions () const;
    QString              permissionsString () const;
    bool                 hasExtendedACL () const;
    KACL                 ACL () const;
    KACL                 defaultACL () const;
    mode_t               mode () const;
    QString              user () const;
    QString              group () const;
    bool                 isLink () const;
    bool                 isDir () const;
    bool                 isFile () const;
    bool                 isReadable () const;
    bool                 isWritable () const;
    bool                 isHidden () const;
    QString              linkDest () const;
    QString              localPath () const;
    KIO::filesize_t      size () const;
    KDateTime            time (KFileItem::FileTimes) const;
    time_t               time (uint) const;
    QString              timeString (KFileItem::FileTimes = KFileItem::ModificationTime ) const;
//ig     QString              timeString (uint) const;
    bool                 isLocalFile () const;
    QString              text () const;
    QString              name (bool = 0) const;
    QString              mimetype () const;
    KMimeType::Ptr       determineMimeType ();
    KMimeType::Ptr       mimeTypePtr ();
    bool                 isMimeTypeKnown () const;
    QString              mimeComment ();
    QString              iconName ();
    QPixmap              pixmap (int, int = 0) const;
    QStringList          overlays () const;
    QString              getStatusBarInfo ();
    QString              getToolTipText (int = 6);
    bool                 acceptsDrops ();
    void                 run (QWidget* = 0) const;
    KIO::UDSEntry        entry () const;
    bool                 isMarked () const;
    void                 mark ();
    void                 unmark ();
    bool                 cmp (const KFileItem&);
    bool                 operator == (const KFileItem&) const;
    bool                 operator != (const KFileItem&) const;
//ig                          operator QVariant () const;
//ig     void                 setExtraData (const void*, void*);
//ig     const void*          extraData (const void*) const;
//ig     void                 removeExtraData (const void*);
    void                 setMetaInfo (const KFileMetaInfo&);
    KFileMetaInfo        metaInfo (bool = 1, int = KFileMetaInfo::Fastest ) const;
    void                 assign (const KFileItem&);
    void                 setUDSEntry (const KIO::UDSEntry&, const KUrl&, bool = 0, bool = 0);
    KUrl                 mostLocalUrl (bool& /Out/) const;
    bool                 isNull () const;

};  // class KFileItem


class KFileItemList
{
%TypeHeaderCode
#include <kfileitem.h>
%End


public:

                         KFileItemList ();
                         KFileItemList (const QList<KFileItem>&);
    KFileItem            findByName (const QString&) const;
    KFileItem            findByUrl (const KUrl&) const;

    KUrl::List           urlList () const;

public:



public:
//force
    int                  __len__ ()  /NonLazy/;
%MethodCode
//returns (int)
    Py_BEGIN_ALLOW_THREADS
    sipRes = sipCpp -> count();
    Py_END_ALLOW_THREADS
%End

    void                 __setitem__ (int, const KFileItem&);
%MethodCode
//takes index | (int) | value | (KFileItem)
    int len;

    len = sipCpp -> count();

    if ((a0 = sipConvertFromSequenceIndex(a0,len)) < 0)
        sipIsErr = 1;
    else
        (*sipCpp)[a0] = *a1;
%End

    void                 __setitem__ (SIP_PYSLICE, const KFileItemList&);
%MethodCode
//takes range | (a Python slice) | urlList | (KFileItemList)

    int len, start, stop, step, slicelength;

    len = sipCpp -> count();

    if (sipConvertFromSliceObject(a0,len,&start,&stop,&step,&slicelength) < 0)
        sipIsErr = 1;
    else
    {
        int vlen = a1 -> count();
        if (vlen != slicelength)
        {
            sipBadLengthForSlice(vlen,slicelength);
            sipIsErr = 1;
        }
        else
        {
            KFileItemList::ConstIterator it = a1 -> begin();
            for (int i = 0; i < slicelength; ++i)
            {
                (*sipCpp)[start] = *it;
                start += step;
                ++it;
            }
        }
    }
%End

    void                 __delitem__ (int);
%MethodCode
//takes index | (int)
    int len;

    len = sipCpp -> count();

    if ((a0 = sipConvertFromSequenceIndex(a0,len)) < 0)
        sipIsErr = 1;
    else
        sipCpp -> removeAt ( a0);
%End

    void                 __delitem__ (SIP_PYSLICE);
%MethodCode
//takes range | (a Python slice)
    int len, start, stop, step, slicelength;

    len = sipCpp -> count();
    if (sipConvertFromSliceObject(a0,len,&start,&stop,&step,&slicelength) < 0)
        sipIsErr = 1;
    else
        for (int i = 0; i < slicelength; ++i)
        {
            sipCpp -> removeAt (start);
            start += step - 1;
        }
%End

//end


};  // class KFileItemList

//igx QDataStream&         operator << (QDataStream&, const KFileItem&);
//igx QDataStream&         operator >> (QDataStream&, KFileItem&);
