//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
//ctscc
#include <kconfig.h>
#include <kdesktopfile.h>
#include <ksharedconfig.h>
%End


class KConfigBase : KConfigFlags
{
%TypeHeaderCode
#include <kconfigbase.h>
%End


public:
                         KConfigBase ();
                         KConfigBase (const KComponentData&);
    const KComponentData& componentData () const;
    void                 setGroup (const QString&);
    QString              group () const;
    bool                 hasGroup (const QString&) const;
    virtual QStringList  groupList () const = 0;
    QString              readEntry (const char*, const char* = 0) const;
    QVariant             readPropertyEntry (const QString&, const QVariant&) const;
    QVariant             readPropertyEntry (const char*, const QVariant&) const;
    QStringList          readListEntry (const QString&, char = ',') const;
    QStringList          readListEntry (const char*, char = ',') const;
    QStringList          readListEntry (const char*, const QStringList&, char = ',') const;
    QStringList          readEntry (const char*, const QStringList&, char = ',') const;
    QStringList          readEntry (const QString&, const QStringList&, char = ',') const;
    QList<int>           readIntListEntry (const QString&) const;
    QList<int>           readIntListEntry (const char*) const;
    QString              readPathEntry (const QString&, const QString& = QString ()) const;
    QString              readPathEntry (const char*, const QString& = QString ()) const;
    QStringList          readPathListEntry (const QString&, char = ',') const;
    QStringList          readPathListEntry (const char*, char = ',') const;
    int                  readNumEntry (const QString&, int = 0) const;
    int                  readNumEntry (const char*, int = 0) const;
    uint                 readUnsignedNumEntry (const QString&, uint = 0) const;
    uint                 readUnsignedNumEntry (const char*, uint = 0) const;
    long                 readLongNumEntry (const QString&, long = 0) const;
    long                 readLongNumEntry (const char*, long = 0) const;
    ulong                readUnsignedLongNumEntry (const QString&, ulong = 0) const;
    ulong                readUnsignedLongNumEntry (const char*, ulong = 0) const;
    qint64               readNum64Entry (const QString&, qint64 = 0) const;
    qint64               readNum64Entry (const char*, qint64 = 0) const;
    quint64              readUnsignedNum64Entry (const QString&, quint64 = 0) const;
    quint64              readUnsignedNum64Entry (const char*, quint64 = 0) const;
    double               readDoubleNumEntry (const QString&, double = 0.0) const;
    double               readDoubleNumEntry (const char*, double = 0.0) const;
    bool                 readBoolEntry (const QString&, bool = 0) const;
    bool                 readBoolEntry (const char*, bool = 0) const;
    QRect                readRectEntry (const QString&, const QRect* = 0) const;
    QRect                readRectEntry (const char*, const QRect* = 0) const;
    QPoint               readPointEntry (const QString&, const QPoint* = 0) const;
    QPoint               readPointEntry (const char*, const QPoint* = 0) const;
    QSize                readSizeEntry (const QString&, const QSize* = 0) const;
    QSize                readSizeEntry (const char*, const QSize* = 0) const;
    QDateTime            readDateTimeEntry (const QString&, const QDateTime* = 0) const;
    QDateTime            readDateTimeEntry (const char*, const QDateTime* = 0) const;
    QString              readEntryUntranslated (const QString&, const QString& = QString ()) const;
    QString              readEntryUntranslated (const char*, const QString& = QString ()) const;
    void                 writeEntry (const QString&, const QStringList&, char = ',', KConfigFlags::WriteConfigFlags = Normal );
    void                 writeEntry (const char*, const QStringList&, char = ',', KConfigFlags::WriteConfigFlags = Normal );
    void                 writePathEntry (const QString&, const QString&, KConfigFlags::WriteConfigFlags = Normal );
    void                 writePathEntry (const char*, const QString&, KConfigFlags::WriteConfigFlags = Normal );
    void                 writePathEntry (const QString&, const QStringList&, char = ',', KConfigFlags::WriteConfigFlags = Normal );
    void                 writePathEntry (const char*, const QStringList&, char = ',', KConfigFlags::WriteConfigFlags = Normal );
    void                 deleteEntry (const QString&, KConfigFlags::WriteConfigFlags = Normal );
    void                 deleteEntry (const char*, KConfigFlags::WriteConfigFlags = Normal );

public:
    void                 deleteGroup (const QString&, KConfigFlags::WriteConfigFlags = Normal );
    void                 setDollarExpansion (bool);
    bool                 isDollarExpansion () const;
    virtual void         rollback (bool = 1);
    virtual void         sync ();
    bool                 isDirty () const;
    bool                 hasKey (const QString&) const;
    virtual QMap<QString, QString> entryMap (const QString&) const = 0;

public:
    virtual void         reparseConfiguration ()  = 0;
    bool                 isImmutable () const;
    bool                 groupIsImmutable (const QString&) const;
    bool                 entryIsImmutable (const QString&) const;

    enum ConfigState
    {
        NoAccess, 
        ReadOnly, 
        ReadWrite
    };

    KConfigBase::ConfigState getConfigState () const;
    bool                 checkConfigFilesWritable (bool);
    void                 setReadDefaults (bool);
    bool                 readDefaults () const;
    void                 revertToDefault (const QString&);
    bool                 hasDefault (const QString&) const;

protected:
    void                 setDirty (bool);
    void                 setBackEnd (KConfigBackEnd*);
    KConfigBackEnd*      backEnd () const;
    virtual void         parseConfigFiles ();
    virtual KEntryMap    internalEntryMap (const QString&) const = 0;
    virtual KEntryMap    internalEntryMap () const = 0;
    virtual void         putData (const KEntryKey&, const KEntry&, bool = 1)  = 0;
    virtual KEntry       lookupData (const KEntryKey&) const = 0;

public:
    void                 setGroup (const QByteArray&);
    void                 setGroup (const char*);
    bool                 hasKey (const char*) const;
    bool                 hasGroup (const QByteArray&) const;
    bool                 hasGroup (const char*) const;

protected:
    virtual bool         internalHasGroup (const QByteArray&) const = 0;
    KConfigGroup&        internalGroup () const;
//igx     virtual void         virtual_hook (int, void*);

// Subclasses for KConfigBase

public:
%ConvertToSubClassCode

    if (dynamic_cast<KConfig*>(sipCpp))
    {
        sipClass = sipClass_KConfig;
        if (dynamic_cast<KDesktopFile*>(sipCpp))
            sipClass = sipClass_KDesktopFile;
        else if (dynamic_cast<KSharedConfig*>(sipCpp))
            sipClass = sipClass_KSharedConfig;
    }
    else
        sipClass = NULL;
%End


};  // class KConfigBase

