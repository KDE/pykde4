//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module ktexteditor  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace KTextEditor
{

class Range
{
%TypeHeaderCode
#include <ktexteditor/range.h>
%End


public:
                         Range ();
                         Range (const KTextEditor::Cursor&, const KTextEditor::Cursor&);
                         Range (const KTextEditor::Cursor&, int);
                         Range (const KTextEditor::Cursor&, int, int);
                         Range (int, int, int, int);
                         Range (const KTextEditor::Range&);
    virtual bool         isValid () const;
    static KTextEditor::Range invalid ();
    virtual bool         isSmartRange () const;
    virtual KTextEditor::SmartRange* toSmartRange () const;
    KTextEditor::Cursor& start ();
    KTextEditor::Cursor& end ();
    void                 setBothLines (int);
    void                 setBothColumns (int);
    virtual void         setRange (const KTextEditor::Range&);
    void                 setRange (const KTextEditor::Cursor&, const KTextEditor::Cursor&);
    virtual bool         expandToRange (const KTextEditor::Range&);
    virtual bool         confineToRange (const KTextEditor::Range&);
    bool                 onSingleLine () const;
    int                  numberOfLines () const;
    int                  columnWidth () const;
    bool                 isEmpty () const;
    bool                 contains (const KTextEditor::Range&) const;
    bool                 contains (const KTextEditor::Cursor&) const;
    bool                 containsLine (int) const;
//ig     bool                 containsColumn (int) const;
    bool                 overlaps (const KTextEditor::Range&) const;
    bool                 overlapsLine (int) const;
    bool                 overlapsColumn (int) const;
    int                  positionRelativeToCursor (const KTextEditor::Cursor&) const;
    int                  positionRelativeToLine (int) const;
    bool                 boundaryAtCursor (const KTextEditor::Cursor&) const;
    bool                 boundaryOnLine (int) const;
//ig     bool                 boundaryOnColumn (int) const;
    KTextEditor::Range   intersect (const KTextEditor::Range&) const;
    KTextEditor::Range   encompass (const KTextEditor::Range&) const;
//ig     KTextEditor::Range   operator + (const KTextEditor::Range&, const KTextEditor::Range&);
//ig     KTextEditor::Range&  operator += (KTextEditor::Range&, const KTextEditor::Range&);
//ig     KTextEditor::Range   operator - (const KTextEditor::Range&, const KTextEditor::Range&);
//ig     KTextEditor::Range&  operator -= (KTextEditor::Range&, const KTextEditor::Range&);
//ig     KTextEditor::Range   operator & (const KTextEditor::Range&, const KTextEditor::Range&);
//ig     KTextEditor::Range&  operator &= (KTextEditor::Range&, const KTextEditor::Range&);
//ig     bool                 operator == (const KTextEditor::Range&, const KTextEditor::Range&);
//ig     bool                 operator != (const KTextEditor::Range&, const KTextEditor::Range&);
//ig     bool                 operator > (const KTextEditor::Range&, const KTextEditor::Range&);
//ig     bool                 operator < (const KTextEditor::Range&, const KTextEditor::Range&);


//mt  undefined symbol: QDebug -- need mapped type?
//mt  undefined symbol: QDebug -- need mapped type?
//mt     QDebug               operator << (QDebug, const KTextEditor::Range&);


protected:
                         Range (KTextEditor::Cursor*, KTextEditor::Cursor*);
    virtual void         rangeChanged (KTextEditor::Cursor*, const KTextEditor::Range&);

public:



};  // class Range

};  // namespace KTextEditor

