//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.93.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.



class KStyle : QStyle
{
%TypeHeaderCode
#include <kstyle.h>
%End

public:
                         KStyle ();

protected:
    void                 drawInsideRect (QPainter*, const QRect&) const;
    QRect                centerRect (const QRect&, int, int) const;
    QRect                centerRect (const QRect&, const QSize&) const;

    enum WidgetType
    {
        WT_Generic, 
        WT_PushButton, 
        WT_Splitter, 
        WT_CheckBox, 
        WT_RadioButton, 
        WT_DockWidget, 
        WT_ProgressBar, 
        WT_MenuBar, 
        WT_MenuBarItem, 
        WT_Menu, 
        WT_MenuItem, 
        WT_ScrollBar, 
        WT_TabBar, 
        WT_TabWidget, 
        WT_Slider, 
        WT_Tree, 
        WT_SpinBox, 
        WT_ComboBox, 
        WT_Header, 
        WT_LineEdit, 
        WT_GroupBox, 
        WT_StatusBar, 
        WT_ToolBar, 
        WT_ToolButton, 
        WT_ToolBoxTab, 
        WT_Window, 
        WT_Limit
    };


    enum MarginOffsets
    {
        MainMargin, 
        Top, 
        Bot, 
        Left, 
        Right, 
        MarginInc
    };

    void                 setWidgetLayoutProp (KStyle::WidgetType, int, int);
    virtual int          widgetLayoutProp (KStyle::WidgetType, int, const QStyleOption* = 0, const QWidget* = 0) const;
//ig    virtual void         drawKStylePrimitive (KStyle::WidgetType, int, const QStyleOption*, const QRect&, const QPalette&, QStyle::State, QPainter*, const QWidget* = 0, KStyle::Option* = 0) const;

public:
    void                 drawControl (QStyle::ControlElement, const QStyleOption*, QPainter*, const QWidget*) const;
    void                 drawPrimitive (QStyle::PrimitiveElement, const QStyleOption*, QPainter*, const QWidget*) const;
    int                  pixelMetric (QStyle::PixelMetric, const QStyleOption* = 0, const QWidget* = 0) const;
    QRect                subElementRect (QStyle::SubElement, const QStyleOption*, const QWidget*) const;
    QSize                sizeFromContents (QStyle::ContentsType, const QStyleOption*, const QSize&, const QWidget*) const;
    int                  styleHint (QStyle::StyleHint, const QStyleOption*, const QWidget*, QStyleHintReturn*) const;
    QRect                subControlRect (QStyle::ComplexControl, const QStyleOptionComplex*, QStyle::SubControl, const QWidget*) const;
    QStyle::SubControl   hitTestComplexControl (QStyle::ComplexControl, const QStyleOptionComplex*, const QPoint&, const QWidget*) const;
    void                 drawComplexControl (QStyle::ComplexControl, const QStyleOptionComplex*, QPainter*, const QWidget*) const;
    void                 polish (QWidget*);
    void                 unpolish (QWidget*);
    void                 polish (QApplication*);
    void                 unpolish (QApplication*);
    void                 polish (QPalette&);
    QRect                itemTextRect (const QFontMetrics&, const QRect&, int, bool, const QString&) const;
    QRect                itemPixmapRect (const QRect&, int, const QPixmap&) const;
    void                 drawItemText (QPainter*, const QRect&, int, const QPalette&, bool, const QString&, QPalette::ColorRole = QPalette::NoRole) const;
    void                 drawItemPixmap (QPainter*, const QRect&, int, const QPixmap&) const;
    QPalette             standardPalette () const;
    QPixmap              standardPixmap (QStyle::StandardPixmap, const QStyleOption*, const QWidget* = 0) const;
    QPixmap              generatedIconPixmap (QIcon::Mode, const QPixmap&, const QStyleOption*) const;
    bool                 eventFilter (QObject*, QEvent*);

};  // class KStyle





//ig class KStyleFactory : QStylePlugin;


