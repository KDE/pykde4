//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
//ctscc
#include <kconfig.h>
#include <kdesktopfile.h>
#include <ksharedconfig.h>
#include <kconfiggroup.h>
%End





class KConfigBase /Abstract/
{
%TypeHeaderCode
#include <kconfigbase.h>
%End


public:


    enum WriteConfigFlag
    {
        Persistent, 
        Global, 
        Localized, 
        Normal
    };

    typedef QFlags<KConfigBase::WriteConfigFlag> WriteConfigFlags;
    virtual QStringList  groupList () const = 0;
    bool                 hasGroup (const QString&) const;
    bool                 hasGroup (const char*) const;
    bool                 hasGroup (const QByteArray&) const;
    KConfigGroup         group (const QByteArray&);
    KConfigGroup         group (const QString&);
    KConfigGroup         group (const char*);
    void                 deleteGroup (const QByteArray&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 deleteGroup (const QString&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 deleteGroup (const char*, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    virtual void         sync ()  = 0;
    virtual void         markAsClean ()  = 0;

    enum AccessMode
    {
        NoAccess, 
        ReadOnly, 
        ReadWrite
    };

    virtual KConfigBase::AccessMode accessMode () const = 0;
    virtual bool         isImmutable () const = 0;
    bool                 isGroupImmutable (const QByteArray&) const;
    bool                 isGroupImmutable (const QString&) const;
    bool                 isGroupImmutable (const char*) const;

protected:
                         KConfigBase ();
    virtual bool         hasGroupImpl (const QByteArray&) const = 0;
    virtual KConfigGroup groupImpl (const QByteArray&)  = 0;
    virtual void         deleteGroupImpl (const QByteArray&, KConfigBase::WriteConfigFlags = KConfigBase::Normal )  = 0;
    virtual bool         isGroupImmutableImpl (const QByteArray&) const = 0;


//io argument void* ambiguous - add tag: In, Out or both
//io    virtual void         virtual_hook (int, void*);

// Subclasses for KConfigBase

public:
%ConvertToSubClassCode

    if (dynamic_cast<KConfig*>(sipCpp))
    {
        sipClass = sipClass_KConfig;
        if (dynamic_cast<KDesktopFile*>(sipCpp))
            sipClass = sipClass_KDesktopFile;
        else if (dynamic_cast<KSharedConfig*>(sipCpp))
            sipClass = sipClass_KSharedConfig;
    }
    else if (dynamic_cast<KConfigGroup*>(sipCpp))
        sipClass = sipClass_KConfigGroup;
    else
        sipClass = NULL;
%End



};  // class KConfigBase

