//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeprint  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KMManager : QObject
{
%TypeHeaderCode
#include <kmmanager.h>
%End


public:

    enum PrinterOperations
    {
        PrinterEnabling, 
        PrinterCreation, 
        PrinterDefault, 
        PrinterTesting, 
        PrinterConfigure, 
        PrinterRemoval, 
        PrinterAll
    };


    enum ServerOperations
    {
        ServerRestarting, 
        ServerConfigure, 
        ServerAll
    };

                         KMManager (QObject* /TransferThis/ = 0);
    static KMManager*    self ();
    QString              errorMsg () const;
    void                 setErrorMsg (const QString&);
    bool                 hasManagement () const;
    virtual bool         createPrinter (KMPrinter*);
    virtual bool         removePrinter (KMPrinter*);
    virtual bool         enablePrinter (KMPrinter*, bool);
    virtual bool         startPrinter (KMPrinter*, bool);
    virtual bool         completePrinter (KMPrinter*);
    virtual bool         completePrinterShort (KMPrinter*);
    virtual bool         setDefaultPrinter (KMPrinter*);
    virtual bool         testPrinter (KMPrinter*);
    bool                 upPrinter (KMPrinter*, bool);
    bool                 modifyPrinter (KMPrinter*, KMPrinter*);
    bool                 removePrinter (const QString&);
    bool                 enablePrinter (const QString&, bool);
    bool                 startPrinter (const QString&, bool);
    bool                 completePrinter (const QString&);
    bool                 setDefaultPrinter (const QString&);
    int                  printerOperationMask () const;
    int                  addPrinterWizard (QWidget* /Transfer/ = 0);
    bool                 createSpecialPrinter (KMPrinter*);
    bool                 removeSpecialPrinter (KMPrinter*);
    KMPrinter*           findPrinter (const QString&);
    QList<KMPrinter*>    printerList (bool = 1);
    QList<KMPrinter*>    printerListComplete (bool = 1);
    KMPrinter*           defaultPrinter ();
    void                 enableFilter (bool);
    bool                 isFilterEnabled () const;
    virtual QString      driverDbCreationProgram ();
    virtual QString      driverDirectory ();
//ig     virtual DrMain*      loadPrinterDriver (KMPrinter*, bool = 0);
//ig     virtual DrMain*      loadDbDriver (KMDBEntry*);
//ig     virtual DrMain*      loadFileDriver (const QString&);
//ig     DrMain*              loadDriver (KMPrinter*, bool = 0);
//ig     virtual bool         savePrinterDriver (KMPrinter*, DrMain*);
//ig     virtual bool         validateDbDriver (KMDBEntry*);
    bool                 invokeOptionsDialog (QWidget* /Transfer/ = 0);
    virtual QString      stateInformation ();
    int                  serverOperationMask () const;
    virtual bool         restartServer ();
    virtual bool         configureServer (QWidget* /Transfer/ = 0);
    virtual QStringList  detectLocalPrinters ();
    QActionGroup*        pluginGroup () const;
    virtual void         createPluginActions (KActionCollection*);
    virtual void         validatePluginActions (KActionCollection*, KMPrinter*);
    void                 checkUpdatePossible ();

signals:
    void                 updatePossible (bool);

protected:
    virtual void         listPrinters ();
    void                 addPrinter (KMPrinter*);
    void                 setHardDefault (KMPrinter*);
    void                 setSoftDefault (KMPrinter*);
    KMPrinter*           softDefault () const;
    KMPrinter*           hardDefault () const;
    bool                 uncompressFile (const QString&, QString&);
    bool                 notImplemented ();
    void                 setHasManagement (bool);
    void                 setPrinterOperationMask (int);
    void                 setServerOperationMask (int);
    virtual QString      testPage ();
    QString              getTestPage ();
    void                 discardAllPrinters (bool);
    void                 setUpdatePossible (bool);
    virtual void         checkUpdatePossibleInternal ();

protected:

};  // class KMManager

