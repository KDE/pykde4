//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KDialog : QDialog
{
%TypeHeaderCode
#include <kconfigbase.h>
#include <kdialog.h>
%End


public:


    enum ButtonCode
    {
        None, 
        Help, 
        Default, 
        Ok, 
        Apply, 
        Try, 
        Cancel, 
        Close, 
        No, 
        Yes, 
        Reset, 
        Details, 
        User1, 
        User2, 
        User3, 
        NoDefault
    };


    typedef QFlags<KDialog::ButtonCode> ButtonCodes;

    enum ButtonPopupMode
    {
        InstantPopup, 
        DelayedPopup
    };

    typedef QFlags<KDialog::ButtonPopupMode> ButtonPopupModes;

public:
                         KDialog (QWidget* /TransferThis/ = 0, Qt::WFlags = 0);
    void                 setButtons (KDialog::ButtonCodes);
    void                 setButtonsOrientation (Qt::Orientation);
    void                 setEscapeButton (KDialog::ButtonCode);
    void                 setDefaultButton (KDialog::ButtonCode);
    KDialog::ButtonCode  defaultButton () const;
    void                 showButtonSeparator (bool);
    void                 showButton (KDialog::ButtonCode, bool);
    void                 setButtonText (KDialog::ButtonCode, const QString&);
    QString              buttonText (KDialog::ButtonCode) const;
    void                 setButtonIcon (KDialog::ButtonCode, const KIcon&);
    KIcon                buttonIcon (KDialog::ButtonCode) const;
    void                 setButtonToolTip (KDialog::ButtonCode, const QString&);
    QString              buttonToolTip (KDialog::ButtonCode) const;
    void                 setButtonWhatsThis (KDialog::ButtonCode, const QString&);
    QString              buttonWhatsThis (KDialog::ButtonCode) const;
    void                 setButtonGuiItem (KDialog::ButtonCode, const KGuiItem&);
    void                 setButtonMenu (KDialog::ButtonCode, QMenu*, KDialog::ButtonPopupMode = KDialog::InstantPopup );
    void                 setButtonFocus (KDialog::ButtonCode);
    void                 setInitialSize (const QSize&);
    void                 incrementInitialSize (const QSize&);
    void                 restoreDialogSize (const KConfigGroup&);

//FIXME
//    void                 saveDialogSize (KConfigGroup&, KConfigBase::WriteConfigFlags = 0) const;

    QString              helpLinkText () const;
    bool                 isButtonEnabled (KDialog::ButtonCode) const;
    KPushButton*         button (KDialog::ButtonCode) const;
    static int           marginHint ();
    static int           spacingHint ();

    enum CaptionFlag
    {
        NoCaptionFlags, 
        AppNameCaption, 
        ModifiedCaption, 
        HIGCompliantCaption
    };

    typedef QFlags<KDialog::CaptionFlag> CaptionFlags;
    static QString       makeStandardCaption (const QString&, QWidget* = 0, KDialog::CaptionFlags = KDialog::HIGCompliantCaption );
    static void          resizeLayout (QWidget*, int, int);
    static void          resizeLayout (QLayout*, int, int);
    static void          centerOnScreen (QWidget*, int = -1);
    static bool          avoidArea (QWidget*, const QRect&, int = -1);
    void                 setMainWidget (QWidget*);
    QWidget*             mainWidget ();
    virtual QSize        sizeHint () const;
    virtual QSize        minimumSizeHint () const;

public slots:
    virtual void         setCaption (const QString&);
    virtual void         setCaption (const QString&, bool);
    virtual void         setPlainCaption (const QString&);
    void                 enableButton (KDialog::ButtonCode, bool);
    void                 enableButtonOk (bool);
    void                 enableButtonApply (bool);
    void                 enableButtonCancel (bool);
    void                 enableLinkedHelp (bool);
    void                 setHelpLinkText (const QString&);
    void                 setHelp (const QString&, const QString& = QString ());
    bool                 isDetailsWidgetVisible () const;
    void                 setDetailsWidgetVisible (bool);
    void                 setDetailsWidget (QWidget*);
    void                 delayedDestruct ();

signals:
    void                 layoutHintChanged ();
    void                 helpClicked ();
    void                 defaultClicked ();

    void                 resetClicked ();

    void                 user3Clicked ();
    void                 user2Clicked ();
    void                 user1Clicked ();
    void                 applyClicked ();
    void                 tryClicked ();
    void                 okClicked ();
    void                 yesClicked ();
    void                 noClicked ();
    void                 cancelClicked ();
    void                 closeClicked ();
    void                 buttonClicked (KDialog::ButtonCode);
    void                 hidden ();
    void                 finished ();
    void                 aboutToShowDetails ();

protected:
    virtual void         hideEvent (QHideEvent*);
    virtual void         closeEvent (QCloseEvent*);
    virtual void         keyPressEvent (QKeyEvent*);

protected slots:
    virtual void         slotButtonClicked (int);
    void                 updateGeometry ();

protected:
//igx                          KDialog (KDialogPrivate&, QWidget* /TransferThis/, Qt::WFlags = 0);

private:
                         KDialog (const KDialog&) [()];

public:



};  // class KDialog

