//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.



class KShortcut
{
%TypeHeaderCode
#include <kshortcut.h>
%End



public:
    enum EmptyHandling
    {
        KeepEmpty,
        RemoveEmpty
    };

                            KShortcut ();
    explicit                KShortcut (const QKeySequence& primary);
                            KShortcut (const QKeySequence& primary, const QKeySequence& alternate);
    explicit                KShortcut (int keyQtPri, int keyQtAlt = 0);
                            KShortcut (const KShortcut& other);
    explicit                KShortcut (const QString& description);
    explicit                KShortcut (const QList<QKeySequence>& seqs);
    QKeySequence            primary () const;
    QKeySequence            alternate () const;
    bool                    isEmpty () const;
    bool                    contains (const QKeySequence& needle) const;
    bool                    conflictsWith (const QKeySequence& needle) const;
    QString                 toString () const;
    QString                 toString (QKeySequence::SequenceFormat format) const;
    bool                    operator == (const KShortcut& other) const;
    bool                    operator != (const KShortcut& other) const;
    QList<QKeySequence>     toList (KShortcut::EmptyHandling handleEmpty = KShortcut::RemoveEmpty) const;
    void                    setPrimary (const QKeySequence& keySeq);
    void                    setAlternate (const QKeySequence& keySeq);
    void                    remove (const QKeySequence& keySeq, KShortcut::EmptyHandling handleEmpty = KShortcut::RemoveEmpty);
//ig    QVariant                operator QVariant () const;
    ~KShortcut ();
//ig    QList<QKeySequence>     operator QList<QKeySequence> () const;
};
// KShortcut

uint                    qHash (int);
uint                    qHash (const KShortcut& key);
uint                    qHash (const QKeySequence& key);
%ModuleHeaderCode
#include <kshortcut.h>
%End

%ModuleHeaderCode
#include <kshortcut.h>
%End


