//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
//ctscc
#include <kjob.h>
#include <kcompositejob.h>
#include <kprocess.h>
#include <kptyprocess.h>
#include <kautosavefile.h>
#include <kautostart.h>
#include <kdedmodule.h>
#include <kfilterdev.h>
#include <kjobtrackerinterface.h>
#include <kjobuidelegate.h>
#include <klibloader.h>
#include <klocalsocket.h>
#include <kptydevice.h>
#include <ksavefile.h>
#include <ksycoca.h>
#include <ktemporaryfile.h>
#include <ktoolinvocation.h>
#include <backgroundchecker.h>
%End


class KAutoSaveFile : QFile
{
%TypeHeaderCode
#include <kautosavefile.h>
%End


public:
                         KAutoSaveFile (const KUrl&, QObject* /TransferThis/ = 0);
                         KAutoSaveFile (QObject* /TransferThis/ = 0);
    KUrl                 managedFile () const;
    void                 setManagedFile (const KUrl&);
    virtual void         releaseLock ();
    virtual bool         open (OpenMode);
    static QList<KAutoSaveFile*> staleFiles (const KUrl&, const QString& = QString ());
    static QList<KAutoSaveFile*> allStaleFiles (const QString& = QString ());

private:
                         KAutoSaveFile (const KAutoSaveFile&);

// Subclasses for QObject

public:
%ConvertToSubClassCode

    if (dynamic_cast<KJob*>(sipCpp))
    {
        sipClass = sipClass_KJob;
        if (dynamic_cast<KCompositeJob*>(sipCpp))
            sipClass = sipClass_KCompositeJob;
    }
    else if (dynamic_cast<KProcess*>(sipCpp))
    {
        sipClass = sipClass_KProcess;
        if (dynamic_cast<KPtyProcess*>(sipCpp))
            sipClass = sipClass_KPtyProcess;
    }
    else if (dynamic_cast<KAutoSaveFile*>(sipCpp))
        sipClass = sipClass_KAutoSaveFile;
    else if (dynamic_cast<KAutostart*>(sipCpp))
        sipClass = sipClass_KAutostart;
    else if (dynamic_cast<KDEDModule*>(sipCpp))
        sipClass = sipClass_KDEDModule;
    else if (dynamic_cast<KFilterDev*>(sipCpp))
        sipClass = sipClass_KFilterDev;
    else if (dynamic_cast<KJobTrackerInterface*>(sipCpp))
        sipClass = sipClass_KJobTrackerInterface;
    else if (dynamic_cast<KJobUiDelegate*>(sipCpp))
        sipClass = sipClass_KJobUiDelegate;
    else if (dynamic_cast<KLibLoader*>(sipCpp))
        sipClass = sipClass_KLibLoader;
    else if (dynamic_cast<KLibrary*>(sipCpp))
        sipClass = sipClass_KLibrary;
    else if (dynamic_cast<KLocalSocket*>(sipCpp))
        sipClass = sipClass_KLocalSocket;
    else if (dynamic_cast<KLocalSocketServer*>(sipCpp))
        sipClass = sipClass_KLocalSocketServer;
    else if (dynamic_cast<KPtyDevice*>(sipCpp))
        sipClass = sipClass_KPtyDevice;
    else if (dynamic_cast<KSaveFile*>(sipCpp))
        sipClass = sipClass_KSaveFile;
    else if (dynamic_cast<KSycoca*>(sipCpp))
        sipClass = sipClass_KSycoca;
    else if (dynamic_cast<KTemporaryFile*>(sipCpp))
        sipClass = sipClass_KTemporaryFile;
    else if (dynamic_cast<KToolInvocation*>(sipCpp))
        sipClass = sipClass_KToolInvocation;
    else if (dynamic_cast<Sonnet::BackgroundChecker*>(sipCpp))
        sipClass = sipClass_Sonnet_BackgroundChecker;
    else
        sipClass = NULL;
%End


};  // class KAutoSaveFile

