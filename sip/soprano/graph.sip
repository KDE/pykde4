//
//     Copyright 2009 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace Soprano
{

class Graph
{
%TypeHeaderCode
#include <soprano/graph.h>
%End

public:
                            Graph ();
                            Graph (const Soprano::Graph&);
                            Graph (const QList<Soprano::Statement>&);
    void                    addStatement (const Soprano::Statement& statement);
    void                    addStatement (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node());
    void                    addStatements (const QList<Soprano::Statement>& statements);
    void                    removeStatement (const Soprano::Statement& statement);
    void                    removeStatement (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node());
    void                    removeAllStatements (const Soprano::Statement& statement = Soprano::Statement());
    void                    removeAllStatements (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node());
    void                    removeStatements (const QList<Soprano::Statement>& statements);
    void                    removeContext (const Soprano::Node&);
    Soprano::StatementIterator  listStatements (const Soprano::Statement& partial = Soprano::Statement()) const;
    Soprano::StatementIterator  listStatements (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node()) const;
    Soprano::StatementIterator  listStatementsInContext (const Soprano::Node& context) const;
    Soprano::NodeIterator   listContexts () const;
    bool                    containsAnyStatement (const Soprano::Statement& statement) const;
    bool                    containsAnyStatement (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node()) const;
    bool                    containsStatement (const Soprano::Statement& statement) const;
    bool                    containsStatement (const Soprano::Node& subject, const Soprano::Node& predicate, const Soprano::Node& object, const Soprano::Node& context = Soprano::Node()) const;
    bool                    containsContext (const Soprano::Node& context) const;
    bool                    isEmpty () const;
    int                     statementCount () const;
    QList<Soprano::Statement>  toList () const;
    Soprano::Graph          operator + (const Soprano::Graph& g) const;
    Soprano::Graph          operator + (const Soprano::Statement& s) const;
    Soprano::Graph&         operator += (const Soprano::Graph& g);
    Soprano::Graph&         operator += (const Soprano::Statement& s);
    Soprano::Graph          operator - (const Soprano::Graph&) const;
    Soprano::Graph          operator - (const Soprano::Statement& s) const;
    Soprano::Graph&         operator -= (const Soprano::Graph& g);
    Soprano::Graph&         operator -= (const Soprano::Statement& s);
    Soprano::Graph&         operator << (const Soprano::Graph&);
    Soprano::Graph&         operator << (const Soprano::Statement&);
    bool                    operator == (const Soprano::Graph& g) const;
    bool                    operator != (const Soprano::Graph& g) const;
};   // Graph

};   // Soprano


