//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KSharedConfig : KConfig
{
%TypeHeaderCode
#include <ksharedconfig.h>
%End


public:
    typedef KSharedPtr<KSharedConfig> Ptr;

    static KSharedConfig::Ptr  openConfig (const QString& fileName = QString(), KConfig::OpenFlags mode = KConfig::FullConfig, const char* resourceType = "config");
    static KSharedConfig::Ptr  openConfig (const KComponentData& componentData, const QString& fileName = QString(), KConfig::OpenFlags mode = KConfig::FullConfig, const char* resourceType = "config");

private:
                            KSharedConfig (const KComponentData& componentData, const QString& file, KConfig::OpenFlags mode, const char* resourceType);
};   // KSharedConfig

typedef KSharedConfig::Ptr KSharedConfigPtr;

%ModuleHeaderCode
#include <ksharedconfig.h>
%End

%ModuleHeaderCode
#include <ksharedconfig.h>
%End



%MappedType KSharedConfigPtr
{
%TypeHeaderCode
#include <ksharedconfig.h>
%End

%ConvertFromTypeCode
    if (!sipCpp)
        return NULL;

    KSharedConfigPtr kcpp = *sipCpp;
    KSharedConfig *ksc    = kcpp.data ();
    PyObject *pyKsc       = sipConvertFromInstance(ksc, sipClass_KSharedConfig, sipTransferObj);
    return pyKsc;
%End

%ConvertToTypeCode
    if (sipIsErr == NULL)
        return PyInstance_Check(sipPy);

    int state;
    KSharedConfig* ksc = (KSharedConfig *)sipConvertToInstance(sipPy, sipClass_KSharedConfig, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr);
    *sipCppPtr = new KSharedConfigPtr (ksc);
    return sipGetState(sipTransferObj);
%End
};

