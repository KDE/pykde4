//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


%ModuleHeaderCode
//ctscc
#include <forwardingslavebase.h>
#include <slavebase.h>
#include <tcpslavebase.h>
%End

namespace KIO
{

class TCPSlaveBase : KIO::SlaveBase
{
%TypeHeaderCode
#include <tcpslavebase.h>
%End


public:
                            TCPSlaveBase (const QByteArray& protocol, const QByteArray& poolSocket, const QByteArray& appSocket, bool autoSsl = 0);


protected:
    enum SslResultDetail
    {
        ResultOk,
        ResultOverridden,
        ResultFailed,
        ResultFailedEarly
    };

    ssize_t                 write (const char* data, ssize_t len);
    ssize_t                 read (char* data, ssize_t len);
    ssize_t                 readLine (char* data, ssize_t len);
    bool                    connectToHost (const QString& protocol, const QString& host, quint16 port);
    quint16                 port () const;
    bool                    isAutoSsl () const;
    bool                    isUsingSsl () const;
    bool                    startSsl ();
    void                    disconnectFromHost ();
    bool                    atEnd () const;
    bool                    isConnected () const;
    bool                    waitForResponse (int t);
    void                    setBlocking (bool b);
    QIODevice*              socket () const;
//ig    virtual void            virtual_hook (int id, void* data);

private:
//force
                            TCPSlaveBase (const KIO::TCPSlaveBase& other);

//  Subclasses of KIO::SlaveBase

//end
%ConvertToSubClassCode
    // CTSCC for subclasses of 'SlaveBase'
    sipType = NULL;

    if (dynamic_cast<KIO::ForwardingSlaveBase*>(sipCpp))
        sipType = sipType_KIO_ForwardingSlaveBase;
    else if (dynamic_cast<KIO::TCPSlaveBase*>(sipCpp))
        sipType = sipType_KIO_TCPSlaveBase;
%End

public:
    ~TCPSlaveBase ();
    typedef QFlags<KIO::TCPSlaveBase::SslResultDetail> SslResult;
};
// TCPSlaveBase

};
// KIO


