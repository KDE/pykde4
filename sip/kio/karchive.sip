//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
//ctscc
#include <kar.h>
#include <ktar.h>
#include <kzip.h>
%End


%ModuleHeaderCode
//ctscc
#include <karchive.h>
#include <kzip.h>
%End


class KArchive
{
%TypeHeaderCode
#include <karchive.h>
%End


protected:
                         KArchive (const QString&);
                         KArchive (QIODevice*);

public:
    virtual bool         open (QIODevice::OpenMode);
    virtual bool         close ();
    bool                 isOpen () const;
    QIODevice::OpenMode  mode () const;
    QIODevice*           device () const;
    QString              fileName () const;
    const KArchiveDirectory* directory () const;
    bool                 addLocalFile (const QString&, const QString&);
    bool                 addLocalDirectory (const QString&, const QString&);

    enum 
    {
        UnknownTime
    };

    virtual bool         writeDir (const QString&, const QString&, const QString&, mode_t = 16877, time_t = KArchive::UnknownTime , time_t = KArchive::UnknownTime , time_t = KArchive::UnknownTime );
    virtual bool         writeSymLink (const QString&, const QString&, const QString&, const QString&, mode_t = 41453, time_t = KArchive::UnknownTime , time_t = KArchive::UnknownTime , time_t = KArchive::UnknownTime );
    virtual bool         writeFile (const QString&, const QString&, const QString&, const char*, qint64, mode_t = 33188, time_t = KArchive::UnknownTime , time_t = KArchive::UnknownTime , time_t = KArchive::UnknownTime );
    virtual bool         prepareWriting (const QString&, const QString&, const QString&, qint64, mode_t = 33188, time_t = KArchive::UnknownTime , time_t = KArchive::UnknownTime , time_t = KArchive::UnknownTime );
    virtual bool         writeData (const char*, qint64);
    virtual bool         finishWriting (qint64);

protected:
    virtual bool         openArchive (QIODevice::OpenMode)  = 0;
    virtual bool         closeArchive ()  = 0;
    virtual KArchiveDirectory* rootDir ();
    virtual bool         doWriteDir (const QString&, const QString&, const QString&, mode_t, time_t, time_t, time_t)  = 0;
    virtual bool         doWriteSymLink (const QString&, const QString&, const QString&, const QString&, mode_t, time_t, time_t, time_t)  = 0;
    virtual bool         doPrepareWriting (const QString&, const QString&, const QString&, qint64, mode_t, time_t, time_t, time_t)  = 0;
    virtual bool         doFinishWriting (qint64)  = 0;
    KArchiveDirectory*   findOrCreate (const QString&);
    virtual bool         createDevice (QIODevice::OpenMode);
    void                 setDevice (QIODevice*);
    void                 setRootDir (KArchiveDirectory*);

protected:
//igx     virtual void         virtual_hook (int, void*);

// Subclasses for KArchive

public:
%ConvertToSubClassCode

    if (dynamic_cast<KAr*>(sipCpp))
        sipClass = sipClass_KAr;
    else if (dynamic_cast<KTar*>(sipCpp))
        sipClass = sipClass_KTar;
    else if (dynamic_cast<KZip*>(sipCpp))
        sipClass = sipClass_KZip;
    else
        sipClass = NULL;
%End


};  // class KArchive


class KArchiveEntry
{
%TypeHeaderCode
#include <karchive.h>
%End


public:
                         KArchiveEntry (KArchive*, const QString&, int, int, const QString&, const QString&, const QString&);
    QDateTime            datetime () const;
    int                  date () const;
    QString              name () const;
    mode_t               permissions () const;
    QString              user () const;
    QString              group () const;
    QString              symLinkTarget () const;
    virtual bool         isFile () const;
    virtual bool         isDirectory () const;

protected:
    KArchive*            archive () const;

protected:
//igx     virtual void         virtual_hook (int, void*);

// Subclasses for KArchiveEntry

public:
%ConvertToSubClassCode

    if (dynamic_cast<KArchiveFile*>(sipCpp))
    {
        sipClass = sipClass_KArchiveFile;
        if (dynamic_cast<KZipFileEntry*>(sipCpp))
            sipClass = sipClass_KZipFileEntry;
    }
    else if (dynamic_cast<KArchiveDirectory*>(sipCpp))
        sipClass = sipClass_KArchiveDirectory;
    else
        sipClass = NULL;
%End


};  // class KArchiveEntry


class KArchiveFile : KArchiveEntry
{
%TypeHeaderCode
#include <karchive.h>
%End


public:
                         KArchiveFile (KArchive*, const QString&, int, int, const QString&, const QString&, const QString&, int, int);
    qint64               position () const;
    qint64               size () const;
    void                 setSize (int);
    virtual QByteArray   data () const;
    virtual QIODevice*   createDevice () const;
    virtual bool         isFile () const;
    void                 copyTo (const QString&) const;

protected:
//igx     virtual void         virtual_hook (int, void*);

};  // class KArchiveFile


class KArchiveDirectory : KArchiveEntry
{
%TypeHeaderCode
#include <karchive.h>
%End


public:
                         KArchiveDirectory (KArchive*, const QString&, int, int, const QString&, const QString&, const QString&);
    QStringList          entries () const;
    const KArchiveEntry* entry (const QString&) const;
    void                 addEntry (KArchiveEntry*);
    virtual bool         isDirectory () const;
    void                 copyTo (const QString&, bool = 1) const;

protected:
//igx     virtual void         virtual_hook (int, void*);

};  // class KArchiveDirectory

