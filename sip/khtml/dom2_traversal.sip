//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module khtml  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace DOM
{

class NodeIterator
{
%TypeHeaderCode
#include <dom2_traversal.h>
%End


public:
                         NodeIterator ();
                         NodeIterator (const DOM::NodeIterator&);
    DOM::Node            root ();
    ulong                whatToShow ();
    DOM::NodeFilter      filter ();
    bool                 expandEntityReferences ();
    DOM::Node            nextNode ();
    DOM::Node            previousNode ();
    void                 detach ();
//ig     NodeIteratorImpl*    handle () const;
    bool                 isNull () const;

protected:
//ig                          NodeIterator (NodeIteratorImpl*);

};  // class NodeIterator


class NodeFilter
{
%TypeHeaderCode
#include <dom2_traversal.h>
%End


public:
                         NodeFilter ();
                         NodeFilter (const DOM::NodeFilter&);
//ig                          NodeFilter (NodeFilterImpl*);

    enum AcceptCode
    {
        FILTER_ACCEPT, 
        FILTER_REJECT, 
        FILTER_SKIP
    };


    enum ShowCode
    {
        SHOW_ALL, 
        SHOW_ELEMENT, 
        SHOW_ATTRIBUTE, 
        SHOW_TEXT, 
        SHOW_CDATA_SECTION, 
        SHOW_ENTITY_REFERENCE, 
        SHOW_ENTITY, 
        SHOW_PROCESSING_INSTRUCTION, 
        SHOW_COMMENT, 
        SHOW_DOCUMENT, 
        SHOW_DOCUMENT_TYPE, 
        SHOW_DOCUMENT_FRAGMENT, 
        SHOW_NOTATION
    };

    virtual short        acceptNode (const DOM::Node&);
//ig     virtual NodeFilterImpl* handle () const;
    virtual bool         isNull () const;
    void                 setCustomNodeFilter (DOM::CustomNodeFilter*);
    DOM::CustomNodeFilter* customNodeFilter ();
    static DOM::NodeFilter createCustom (DOM::CustomNodeFilter*);

protected:

};  // class NodeFilter


class CustomNodeFilter : DOM::DomShared
{
%TypeHeaderCode
#include <dom2_traversal.h>
%End


public:
                         CustomNodeFilter ();
    virtual short        acceptNode (const DOM::Node&);
    virtual bool         isNull ();
    virtual DOM::DOMString customNodeFilterType ();

protected:

};  // class CustomNodeFilter


class TreeWalker
{
%TypeHeaderCode
#include <dom2_traversal.h>
%End


public:
                         TreeWalker ();
                         TreeWalker (const DOM::TreeWalker&);
    DOM::Node            root ();
    ulong                whatToShow ();
    DOM::NodeFilter      filter ();
    bool                 expandEntityReferences ();
    DOM::Node            currentNode ();
    void                 setCurrentNode (const DOM::Node&);
    DOM::Node            parentNode ();
    DOM::Node            firstChild ();
    DOM::Node            lastChild ();
    DOM::Node            previousSibling ();
    DOM::Node            nextSibling ();
    DOM::Node            previousNode ();
    DOM::Node            nextNode ();
//ig     TreeWalkerImpl*      handle () const;
    bool                 isNull () const;

protected:
//ig                          TreeWalker (TreeWalkerImpl*);

};  // class TreeWalker

};  // namespace DOM

