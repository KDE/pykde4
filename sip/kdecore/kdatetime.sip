//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KDateTime
{
%TypeHeaderCode
#include <kdatetime.h>
%End


public:

    enum SpecType
    {
        Invalid, 
        UTC, 
        OffsetFromUTC, 
        TimeZone, 
        LocalZone, 
        ClockTime
    };


    class Spec
    {

    public:
                             Spec ();
                             Spec (const KTimeZone&);
                             Spec (KDateTime::SpecType, int = 0);
                             Spec (const KDateTime::Spec&);
        bool                 isValid () const;
        KTimeZone            timeZone () const;
        KDateTime::SpecType  type () const;
        bool                 isLocalZone () const;
        bool                 isClockTime () const;
        bool                 isUtc () const;
        bool                 isOffsetFromUtc () const;
        int                  utcOffset () const;
        void                 setType (KDateTime::SpecType, int = 0);
        void                 setType (const KTimeZone&);
        bool                 operator == (const KDateTime::Spec&) const;
        bool                 operator != (const KDateTime::Spec&) const;
        bool                 equivalentTo (const KDateTime::Spec&) const;
        static KDateTime::Spec UTC ();
        static KDateTime::Spec ClockTime ();
        static KDateTime::Spec OffsetFromUTC (int);
        static KDateTime::Spec LocalZone ();

    };  // class Spec


public:

    enum TimeFormat
    {
        ISODate, 
        RFCDate, 
        RFCDateDay, 
        QtTextDate, 
        LocalDate
    };


    enum Comparison
    {
        Before, 
        AtStart, 
        Inside, 
        AtEnd, 
        After, 
        Equal, 
        Outside, 
        StartsAt, 
        EndsAt
    };

                         KDateTime ();
                         KDateTime (const QDate&, const KDateTime::Spec& = KDateTime::Spec (KDateTime::LocalZone ));
                         KDateTime (const QDate&, const QTime&, const KDateTime::Spec& = KDateTime::Spec (KDateTime::LocalZone ));
                         KDateTime (const QDateTime&, const KDateTime::Spec&);
                         KDateTime (const QDateTime&);
                         KDateTime (const KDateTime&);
    bool                 isNull () const;
    bool                 isValid () const;
    bool                 isDateOnly () const;
    QDate                date () const;
    QTime                time () const;
    QDateTime            dateTime () const;
    KTimeZone            timeZone () const;
    KDateTime::Spec      timeSpec () const;
    KDateTime::SpecType  timeType () const;
    bool                 isLocalZone () const;
    bool                 isClockTime () const;
    bool                 isUtc () const;
    bool                 isOffsetFromUtc () const;
    int                  utcOffset () const;
    bool                 isSecondOccurrence () const;
    KDateTime            toUtc () const;
    KDateTime            toOffsetFromUtc () const;
    KDateTime            toOffsetFromUtc (int) const;
    KDateTime            toLocalZone () const;
    KDateTime            toClockTime () const;
    KDateTime            toZone (const KTimeZone&) const;
    KDateTime            toTimeSpec (const KDateTime::Spec&) const;
    KDateTime            toTimeSpec (const KDateTime&) const;
    uint                 toTime_t () const;
    void                 setTime_t (uint);
    void                 setDateOnly (bool);
    void                 setDate (const QDate&);
    void                 setTime (const QTime&);
    void                 setDateTime (const QDateTime&);
    void                 setTimeSpec (const KDateTime::Spec&);
    void                 setSecondOccurrence (bool);
    KDateTime            addMSecs (qint64) const;
    KDateTime            addSecs (qint64) const;
    KDateTime            addDays (int) const;
    KDateTime            addMonths (int) const;
    KDateTime            addYears (int) const;
    int                  secsTo (const KDateTime&) const;
    qint64               secsTo_long (const KDateTime&) const;
    int                  daysTo (const KDateTime&) const;
    static KDateTime     currentLocalDateTime ();
    static KDateTime     currentUtcDateTime ();
    static KDateTime     currentDateTime (const KDateTime::Spec&);
    QString              toString (const QString&) const;
    QString              toString (KDateTime::TimeFormat = KDateTime::ISODate ) const;
    static KDateTime     fromString (const QString&, KDateTime::TimeFormat = KDateTime::ISODate , bool* /Out/ = 0);
    static KDateTime     fromString (const QString&, const QString&, const KTimeZones* = 0, bool = 1);
    static void          setFromStringDefault (const KDateTime::Spec&);
    bool                 outOfRange () const;
    KDateTime::Comparison compare (const KDateTime&) const;
    bool                 operator == (const KDateTime&) const;
    bool                 operator != (const KDateTime&) const;
    bool                 operator < (const KDateTime&) const;
    bool                 operator <= (const KDateTime&) const;
    bool                 operator > (const KDateTime&) const;
    bool                 operator >= (const KDateTime&) const;
    void                 detach ();

};  // class KDateTime

//igx QDataStream&         operator << (QDataStream&, const KDateTime::Spec&);
//igx QDataStream&         operator >> (QDataStream&, KDateTime::Spec&);
//igx QDataStream&         operator << (QDataStream&, const KDateTime&);
//igx QDataStream&         operator >> (QDataStream&, KDateTime&);
