//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KWindowSystem : QObject, NET
{
%TypeHeaderCode
#include <kwindowsystem.h>
%End


public:
    static KWindowSystem* self ();
    static const QList<WId>& windows ();
    static bool          hasWId (WId);
    static KWindowInfo   windowInfo (WId, ulong, ulong = 0);
    static QList<WId>    stackingOrder ();
    static WId           activeWindow ();
    static void          activateWindow (WId, long = 0);
    static void          forceActiveWindow (WId, long = 0);
    static void          demandAttention (WId, bool = 1);
    static bool          compositingActive ();
    static int           currentDesktop ();
    static int           numberOfDesktops ();
    static void          setCurrentDesktop (int);
    static void          setOnAllDesktops (WId, bool);
    static void          setOnDesktop (WId, int);
    static void          setMainWindow (QWidget*, WId);
    static WId           transientFor (WId);
    static WId           groupLeader (WId);
    static QPixmap       icon (WId, int = -1, int = -1, bool = 0);

    enum IconSource
    {
        NETWM, 
        WMHints, 
        ClassHint, 
        XApp
    };

    static QPixmap       icon (WId, int, int, bool, int);
    static void          setIcons (WId, const QPixmap&, const QPixmap&);
    static void          setType (WId, NET::WindowType);
    static void          setState (WId, ulong);
    static void          clearState (WId, ulong);
    static void          minimizeWindow (WId, bool = 1);
    static void          unminimizeWindow (WId, bool = 1);
    static void          raiseWindow (WId);
    static void          lowerWindow (WId);
    static bool          icccmCompliantMappingState ();
    static QRect         workArea (int = -1);
    static QRect         workArea (const QList<WId>&, int = -1);
    static QString       desktopName (int);
    static void          setDesktopName (int, const QString&);
    static bool          showingDesktop ();
    static void          setUserTime (WId, long);
    static void          setExtendedStrut (WId, int, int, int, int, int, int, int, int, int, int, int, int);
    static void          setStrut (WId, int, int, int, int);
    static bool          allowedActionsSupported ();
    static QString       readNameProperty (WId, ulong);
    static void          doNotManage (const QString&);
    static bool          mapViewport ();
    static int           viewportToDesktop (const QPoint&);
    static int           viewportWindowToDesktop (const QRect&);
    static QPoint        desktopToViewport (int, bool);

signals:
    void                 currentDesktopChanged (int);
    void                 windowAdded (WId);
    void                 windowRemoved (WId);
    void                 activeWindowChanged (WId);
    void                 desktopNamesChanged ();
    void                 numberOfDesktopsChanged (int);
    void                 workAreaChanged ();
    void                 strutChanged ();
    void                 stackingOrderChanged ();
//ig     void                 windowChanged (WId, const ulong*);
    void                 windowChanged (WId, uint);
    void                 windowChanged (WId);
    void                 showingDesktopChanged (bool);

protected:
    virtual void         connectNotify (const char*);

private:
                         KWindowSystem ();

};  // class KWindowSystem



%MappedType QList<WId>
{
%TypeHeaderCode
#include <qlist.h>
%End

%ConvertFromTypeCode
    // Create the list.
    PyObject *l;

    if ((l = PyList_New(sipCpp->size())) == NULL)
        return NULL;

    // Set the list elements.
    for (int i = 0; i < sipCpp->size(); ++i)
    {
        PyObject *pobj;

        if ((pobj = PyInt_FromLong ((long)sipCpp->value(i))) == NULL)
        {
            Py_DECREF(l);

            return NULL;
        }

        PyList_SET_ITEM(l, i, pobj);
    }

    return l;
%End

%ConvertToTypeCode
    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
        return PyList_Check(sipPy);

    QList<WId> *ql = new QList<WId>;
 
    for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
        ql->append((WId)PyInt_AS_LONG (PyList_GET_ITEM(sipPy, i)));
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
%End
};


