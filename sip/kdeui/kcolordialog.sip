//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KColorTable : QWidget
{
%TypeHeaderCode
#include <kcolordialog.h>
%End


public:
                         KColorTable (QWidget* /TransferThis/, int = 210, int = 16);
    void                 addToCustomColors (const QColor&);
    void                 addToRecentColors (const QColor&);
    QString              name () const;

public slots:
    void                 setColors (const QString&);

signals:
    void                 colorSelected (const QColor&, const QString&);
    void                 colorDoubleClicked (const QColor&, const QString&);

private:
                         KColorTable (const KColorTable&) [()];

};  // class KColorTable


class KColorCells : QTableWidget
{
%TypeHeaderCode
#include <kcolordialog.h>
%End


public:
                         KColorCells (QWidget* /TransferThis/, int, int);
    void                 setColor (int, const QColor&);
    QColor               color (int) const;
    int                  count () const;
    void                 setShading (bool);
    void                 setAcceptDrags (bool);
    void                 setSelected (int);
    int                  selectedIndex () const;

signals:
    void                 colorSelected (int, const QColor&);
    void                 colorDoubleClicked (int, const QColor&);

protected:
    virtual int          sizeHintForColumn (int) const;
    virtual int          sizeHintForRow (int) const;
    virtual void         resizeEvent (QResizeEvent*);
    virtual void         mouseReleaseEvent (QMouseEvent*);
    virtual void         mousePressEvent (QMouseEvent*);
    virtual void         mouseMoveEvent (QMouseEvent*);
    virtual void         dragEnterEvent (QDragEnterEvent*);
    virtual void         dragMoveEvent (QDragMoveEvent*);
    virtual void         dropEvent (QDropEvent*);
    virtual void         mouseDoubleClickEvent (QMouseEvent*);
    int                  positionToCell (const QPoint&, bool = 0) const;

private:
                         KColorCells (const KColorCells&) [()];

};  // class KColorCells


class KColorPatch : QFrame
{
%TypeHeaderCode
#include <kcolordialog.h>
%End


public:
                         KColorPatch (QWidget* /TransferThis/);
    void                 setColor (const QColor&);

signals:
    void                 colorChanged (const QColor&);

protected:
    virtual void         paintEvent (QPaintEvent*);
    virtual void         mouseMoveEvent (QMouseEvent*);
    virtual void         dragEnterEvent (QDragEnterEvent*);
    virtual void         dropEvent (QDropEvent*);

private:
                         KColorPatch (const KColorPatch&) [()];

};  // class KColorPatch


class KColorDialog : KDialog
{
%TypeHeaderCode
#include <kcolordialog.h>
%End


public:
                         KColorDialog (QWidget* /TransferThis/ = 0, bool = 0);
    QColor               color () const;
    static int           getColor (QColor&, QWidget* /Transfer/ = 0);
    static int           getColor (QColor&, const QColor&, QWidget* /Transfer/ = 0);
    static QColor        grabColor (const QPoint&);
    void                 setDefaultColor (const QColor&);
    QColor               defaultColor () const;

public slots:
    void                 setColor (const QColor&);

signals:
    void                 colorSelected (const QColor&);

protected:
    virtual void         mouseMoveEvent (QMouseEvent*);
    virtual void         mouseReleaseEvent (QMouseEvent*);
    virtual void         keyPressEvent (QKeyEvent*);
    virtual bool         eventFilter (QObject*, QEvent*);

private:
                         KColorDialog (const KColorDialog&) [()];

};  // class KColorDialog

