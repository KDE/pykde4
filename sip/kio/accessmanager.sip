//
//     Copyright 2009 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace KIO
{

class AccessManager : QNetworkAccessManager
{
%TypeHeaderCode
#include <kio/accessmanager.h>
%End

public:
                            AccessManager (QObject* parent /TransferThis/);
    void                    setExternalContentAllowed (bool allowed);
    bool                    isExternalContentAllowed () const;

    enum Attribute
    {
        MetaData,
        KioError
    };
    ~AccessManager ();
protected:
    virtual QNetworkReply*  createRequest (Operation op, const QNetworkRequest& req, QIODevice* outgoingData = 0);
%ConvertToSubClassCode
    // CTSCC for subclasses of 'AccessManager'
    sipType = NULL;

    if (dynamic_cast<KIO::AccessManager*>(sipCpp))
        sipType = sipType_KIO_AccessManager;
%End
public:
    void                    setCookieJarWindowId (WId id);
    WId                     cookieJarWindowid () const;
    KIO::MetaData&          requestMetaData ();
    KIO::MetaData&          sessionMetaData ();
    void                    setWindow (QWidget* widget);
    QWidget*                window () const;
    static void             putReplyOnHold (QNetworkReply* reply);
    void                    setEmitReadyReadOnMetaDataChange (bool);
};
// AccessManager

namespace Integration
{
typedef KIO::AccessManager AccessManager;
class CookieJar : QNetworkCookieJar
{
%TypeHeaderCode
#include <accessmanager.h>
%End

public:
    explicit                CookieJar (QObject* parent /TransferThis/ = 0);
    ~CookieJar ();
    WId                     windowId () const;
    void                    setWindowId (WId id);
    void                    reparseConfiguration ();
    QList<QNetworkCookie>   cookiesForUrl (const QUrl& url) const;
    bool                    setCookiesFromUrl (const QList<QNetworkCookie>& cookieList, const QUrl& url);
%ConvertToSubClassCode
    // CTSCC for subclasses of 'CookieJar'
    sipType = NULL;

    if (dynamic_cast<KIO::Integration::CookieJar*>(sipCpp))
        sipType = sipType_KIO_Integration_CookieJar;
%End
    bool                    isCookieStorageDisabled () const;
    void                    setDisableCookieStorage (bool disable);
};
bool                    sslConfigFromMetaData (const KIO::MetaData& metadata, QSslConfiguration& sslconfig);
};
};
// KIO


%ModuleHeaderCode
//ctscc
#include <kio/accessmanager.h>
%End
