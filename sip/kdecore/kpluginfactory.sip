//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
#include <kpluginfactory.h>
%End


class KPluginFactory : QObject
{
%TypeHeaderCode
#include <kpluginfactory.h>
%End


public:
                         KPluginFactory (const char* = 0, const char* = 0, QObject* /TransferThis/ = 0);

                         KPluginFactory (const KAboutData&, QObject* /TransferThis/ = 0);

                         KPluginFactory (const KAboutData*, QObject* /TransferThis/ = 0);
                         KPluginFactory (QObject* /TransferThis/);
    KComponentData       componentData () const;
    QObject*             create (QObject* /Transfer/ = 0, const char* = "QObject", const QStringList& = QStringList ());

signals:
    void                 objectCreated (QObject*);

protected:
//igx                          KPluginFactory (KPluginFactoryPrivate&, QObject* /TransferThis/ = 0);
    QVariantList         stringListToVariantList (const QStringList&);
    QStringList          variantListToStringList (const QVariantList&);
    virtual void         setupTranslations ();
    virtual QObject*     createObject (QObject* /Transfer/, const char*, const QStringList&);


//mt  undefined symbol: KParts::Part* -- need mapped type?
//mt     virtual KParts::Part* createPartObject (QWidget*, QObject* /Transfer/, const char*, const QStringList&);

    void                 setComponentData (const KComponentData&);
    virtual QObject*     create (const char*, QWidget*, QObject* /Transfer/, const QVariantList&, const QString&);

};  // class KPluginFactory

typedef KPluginFactory KLibFactory;
