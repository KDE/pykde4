//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
//ctscc
#include <kconfigskeleton.h>
%End


class KConfigSkeletonItem
{
%TypeHeaderCode
#include <kconfigskeleton.h>
%End


public:
    typedef QList<KConfigSkeletonItem*> List;
    typedef QHash<QString, KConfigSkeletonItem*> Dict;
//ig     typedef QHash<QString, KConfigSkeletonItem*>::Iterator DictIterator;
                         KConfigSkeletonItem (const QString&, const QString&);
    void                 setGroup (const QString&);
    QString              group () const;
    void                 setKey (const QString&);
    QString              key () const;
    void                 setName (const QString&);
    QString              name () const;
    void                 setLabel (const QString&);
    QString              label () const;
    void                 setWhatsThis (const QString&);
    QString              whatsThis () const;
    virtual void         readConfig (KConfig*)  = 0;
    virtual void         writeConfig (KConfig*)  = 0;
    virtual void         readDefault (KConfig*)  = 0;
    virtual void         setProperty (const QVariant&)  = 0;
    virtual bool         isEqual (const QVariant&) const = 0;
    virtual QVariant     property () const = 0;
    virtual QVariant     minValue () const;
    virtual QVariant     maxValue () const;
    virtual void         setDefault ()  = 0;
    virtual void         swapDefault ()  = 0;
    bool                 isImmutable () const;

protected:
    void                 readImmutability (const KConfigGroup&);

// Subclasses for KConfigSkeletonItem

public:
%ConvertToSubClassCode

    if (dynamic_cast<KConfigSkeleton::ItemInt*>(sipCpp))
    {
        sipClass = sipClass_KConfigSkeleton_ItemInt;
        if (dynamic_cast<KConfigSkeleton::ItemEnum*>(sipCpp))
            sipClass = sipClass_KConfigSkeleton_ItemEnum;
    }
    else if (dynamic_cast<KConfigSkeleton::ItemString*>(sipCpp))
    {
        sipClass = sipClass_KConfigSkeleton_ItemString;
        if (dynamic_cast<KConfigSkeleton::ItemPassword*>(sipCpp))
            sipClass = sipClass_KConfigSkeleton_ItemPassword;
        else if (dynamic_cast<KConfigSkeleton::ItemPath*>(sipCpp))
            sipClass = sipClass_KConfigSkeleton_ItemPath;
    }
    else if (dynamic_cast<KConfigSkeleton::ItemStringList*>(sipCpp))
    {
        sipClass = sipClass_KConfigSkeleton_ItemStringList;
        if (dynamic_cast<KConfigSkeleton::ItemPathList*>(sipCpp))
            sipClass = sipClass_KConfigSkeleton_ItemPathList;
    }
    else if (dynamic_cast<KConfigSkeleton::ItemBool*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemBool;
    else if (dynamic_cast<KConfigSkeleton::ItemColor*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemColor;
    else if (dynamic_cast<KConfigSkeleton::ItemDateTime*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemDateTime;
    else if (dynamic_cast<KConfigSkeleton::ItemDouble*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemDouble;
    else if (dynamic_cast<KConfigSkeleton::ItemFont*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemFont;
    else if (dynamic_cast<KConfigSkeleton::ItemIntList*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemIntList;
    else if (dynamic_cast<KConfigSkeleton::ItemLongLong*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemLongLong;
    else if (dynamic_cast<KConfigSkeleton::ItemPoint*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemPoint;
    else if (dynamic_cast<KConfigSkeleton::ItemProperty*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemProperty;
    else if (dynamic_cast<KConfigSkeleton::ItemRect*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemRect;
    else if (dynamic_cast<KConfigSkeleton::ItemSize*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemSize;
    else if (dynamic_cast<KConfigSkeleton::ItemUInt*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemUInt;
    else if (dynamic_cast<KConfigSkeleton::ItemULongLong*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemULongLong;
    else if (dynamic_cast<KConfigSkeleton::ItemUrl*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemUrl;
    else if (dynamic_cast<KConfigSkeleton::ItemUrlList*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemUrlList;
    else
        sipClass = NULL;
%End


};  // class KConfigSkeletonItem


template<TYPE>
class KConfigSkeletonGenericItem : KConfigSkeletonItem
{
%TypeHeaderCode
#include <kconfigskeleton.h>
%End


public:
                         KConfigSkeletonGenericItem (const QString&, const QString&, TYPE&, TYPE);
    void                 setValue (const TYPE&);
    TYPE&                value ();
//ig     virtual void         setDefaultValue (const TYPE&);
    virtual void         setDefault ();
    virtual void         writeConfig (KConfig*);
    void                 readDefault (KConfig*);
    void                 swapDefault ();

protected:

};  // class KConfigSkeletonGenericItem


class KConfigSkeleton : QObject
{
%TypeHeaderCode
#include <kconfigskeleton.h>
%End


public:

    class ItemString : KConfigSkeletonItem
    {

    public:

        enum Type
        {
            Normal, 
            Password, 
            Path
        };

                             ItemString (const QString&, const QString&, QString&, const QString& = QLatin1String ("" ), KConfigSkeleton::ItemString::Type = KConfigSkeleton::ItemString::Normal );
        void                 writeConfig (KConfig*);
        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    public:
//force
        void                 setValue (const QString&);
        QString&             value ();
        virtual void         setDefaultValue (const QString&);
        virtual void         setDefault ();
        void                 swapDefault ();
//end


    };  // class ItemString


public:

    class ItemPassword : KConfigSkeleton::ItemString
    {

    public:
                             ItemPassword (const QString&, const QString&, QString&, const QString& = QLatin1String ("" ));

    };  // class ItemPassword


public:

    class ItemPath : KConfigSkeleton::ItemString
    {

    public:
                             ItemPath (const QString&, const QString&, QString&, const QString& = QString ());

    };  // class ItemPath


public:

    class ItemUrl : KConfigSkeletonItem
    {

    public:
                             ItemUrl (const QString&, const QString&, KUrl&, const KUrl& = KUrl ());
        void                 writeConfig (KConfig*);
        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    };  // class ItemUrl


public:

    class ItemProperty : KConfigSkeletonItem
    {

    public:
                             ItemProperty (const QString&, const QString&, QVariant&, const QVariant& = 0);
        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    public:
//force
        void                 setValue (const QVariant&);
        QVariant&            value ();
        virtual void         setDefaultValue (const QVariant&);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemProperty


public:

    class ItemBool : KConfigSkeletonItem
    {

    public:
                             ItemBool (const QString&, const QString&, bool, bool = 1) [(const QString&, const QString&, bool&, bool = 1)];
%MethodCode
//takes group | (QString) | key | (QString) | value | (bool) | defaultValue | (bool)

    Py_BEGIN_ALLOW_THREADS
    sipCpp = new sipKConfigSkeleton_ItemBool (*a0, *a1, a2, a3);
    Py_END_ALLOW_THREADS
%End

        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    public:
//force
        void                 setValue (const bool& /In/);
        bool                 value ();
        virtual void         setDefaultValue (const bool& /In/);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemBool


public:

    class ItemInt : KConfigSkeletonItem
    {

    public:
                             ItemInt (const QString&, const QString&, qint32, qint32 = 0) [(const QString&, const QString&, qint32&, qint32 = 0)];
%MethodCode
//takes group | (QString) |  key | (QString) | value | (int) | defaultValue | (int)

    Py_BEGIN_ALLOW_THREADS
    sipCpp = new sipKConfigSkeleton_ItemInt (*a0, *a1, a2, a3);
    Py_END_ALLOW_THREADS
%End

        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;
        QVariant             minValue () const;
        QVariant             maxValue () const;
        void                 setMinValue (qint32);
        void                 setMaxValue (qint32);

    public:
//force
        void                 setValue (const int& /In/);
        int                  value ();
        virtual void         setDefaultValue (const int& /In/);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemInt


public:

    class ItemLongLong : KConfigSkeletonItem
    {

    public:
                             ItemLongLong (const QString&, const QString&, qint64, qint64 = 0) [(const QString&, const QString&, qint64&, qint64 = 0)];
%MethodCode
//takes group | (QString) | key | (QString) | reference | (qlonglong) | defaultValue | (qlonglong = 0)
    Py_BEGIN_ALLOW_THREADS
    sipCpp = new sipKConfigSkeleton_ItemLongLong (*a0, *a1, a2, a3);
    Py_END_ALLOW_THREADS
%End

        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;
        QVariant             minValue () const;
        QVariant             maxValue () const;
        void                 setMinValue (qint64);
        void                 setMaxValue (qint64);

    public:
//force
        qint64               value ();
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemLongLong


public:
    typedef KConfigSkeleton::ItemLongLong ItemInt64;

    class ItemEnum : KConfigSkeleton::ItemInt
    {

    public:

        class Choice
        {

        public:
            QString              name;
            QString              label;
            QString              whatsThis;

        };  // class Choice


    public:
                             ItemEnum (const QString&, const QString&, qint32, const QList<KConfigSkeleton::ItemEnum::Choice>&, qint32 = 0) [(const QString&, const QString&, qint32&, const QList<KConfigSkeleton::ItemEnum::Choice>&, qint32 = 0)];
        QList<KConfigSkeleton::ItemEnum::Choice> choices () const;
        void                 readConfig (KConfig*);
        void                 writeConfig (KConfig*);

    public:
//force
        void                 setValue (const int& /In/);
        int                  value ();
        virtual void         setDefaultValue (const int& /In/);
        virtual void         setDefault ();
        void                 swapDefault ();
//end


    };  // class ItemEnum


public:

    class ItemUInt : KConfigSkeletonItem
    {

    public:
                             ItemUInt (const QString&, const QString&, quint32, quint32 = 0) [(const QString&, const QString&, quint32&, quint32 = 0)];
%MethodCode
//takes name | (QString) | key | (QString) | value | (uint) | defaultValue | (uint)

    Py_BEGIN_ALLOW_THREADS
    sipCpp = new sipKConfigSkeleton_ItemUInt(*a0, *a1, a2, a3);
    Py_END_ALLOW_THREADS
%End

        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;
        QVariant             minValue () const;
        QVariant             maxValue () const;
        void                 setMinValue (quint32);
        void                 setMaxValue (quint32);

    public:
//force
        void                 setValue (const uint& /In/);
        quint32              value ();
        virtual void         setDefaultValue (const uint& /In/);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemUInt


public:

    class ItemULongLong : KConfigSkeletonItem
    {

    public:
                             ItemULongLong (const QString&, const QString&, quint64, quint64 = 0) [(const QString&, const QString&, quint64&, quint64 = 0)];
%MethodCode
//takes group | (QString) | key | (QString) | reference | (qulonglong) | defaultValue | (qulonglong = 0)

    Py_BEGIN_ALLOW_THREADS
    sipCpp = new sipKConfigSkeleton_ItemULongLong (*a0, *a1, a2, a3);
    Py_END_ALLOW_THREADS
%End

        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;
        QVariant             minValue () const;
        QVariant             maxValue () const;
        void                 setMinValue (quint64);
        void                 setMaxValue (quint64);

    public:
//force
        void                 setValue (const qulonglong& /In/);
        quint64              value ();
        virtual void         setDefaultValue (const qulonglong& /In/);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemULongLong


public:
    typedef KConfigSkeleton::ItemULongLong ItemUInt64;

    class ItemDouble : KConfigSkeletonItem
    {

    public:
                             ItemDouble (const QString&, const QString&, double, double = 0) [(const QString&, const QString&, double&, double = 0)];
%MethodCode
//takes name | (QString) | key | (QString) | value | (double) | defaultValue | (double)

    Py_BEGIN_ALLOW_THREADS
    sipCpp = new sipKConfigSkeleton_ItemDouble(*a0, *a1, a2, a3);
    Py_END_ALLOW_THREADS
%End

        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;
        QVariant             minValue () const;
        QVariant             maxValue () const;
        void                 setMinValue (double);
        void                 setMaxValue (double);

    public:
//force
        void                 setValue (const double& /In/);
        double               value ();
        virtual void         setDefaultValue (const double& /In/);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemDouble


public:

    class ItemColor : KConfigSkeletonItem
    {

    public:
                             ItemColor (const QString&, const QString&, QColor&, const QColor& = QColor (128 ,128 ,128 ));
        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    public:
//force
        void                 setValue (const QColor&);
        QColor&              value ();
        virtual void         setDefaultValue (const QColor&);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemColor


public:

    class ItemFont : KConfigSkeletonItem
    {

    public:
                             ItemFont (const QString&, const QString&, QFont&, const QFont& = KGlobalSettings::generalFont ());
        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    public:
//force
        void                 setValue (const QFont&);
        QFont&               value ();
        virtual void         setDefaultValue (const QFont&);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemFont


public:

    class ItemRect : KConfigSkeletonItem
    {

    public:
                             ItemRect (const QString&, const QString&, QRect&, const QRect& = QRect ());
        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    public:
//force
        void                 setValue (const QRect&);
        QRect&               value ();
        virtual void         setDefaultValue (const QRect&);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemRect


public:

    class ItemPoint : KConfigSkeletonItem
    {

    public:
                             ItemPoint (const QString&, const QString&, QPoint&, const QPoint& = QPoint ());
        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    public:
//force
        void                 setValue (const QPoint&);
        QPoint&              value ();
        virtual void         setDefaultValue (const QPoint&);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemPoint


public:

    class ItemSize : KConfigSkeletonItem
    {

    public:
                             ItemSize (const QString&, const QString&, QSize&, const QSize& = QSize ());
        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    public:
//force
        void                 setValue (const QSize&);
        QSize&               value ();
        virtual void         setDefaultValue (const QSize&);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemSize


public:

    class ItemDateTime : KConfigSkeletonItem
    {

    public:
                             ItemDateTime (const QString&, const QString&, QDateTime&, const QDateTime& = QDateTime ());
        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    public:
//force
        void                 setValue (const QDateTime&);
        QDateTime&           value ();
        virtual void         setDefaultValue (const QDateTime&);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemDateTime


public:

    class ItemStringList : KConfigSkeletonItem
    {

    public:
                             ItemStringList (const QString&, const QString&, QStringList&, const QStringList& = QStringList ());
        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    public:
//force
        void                 setValue (const QStringList&);
        QStringList&         value ();
        virtual void         setDefaultValue (const QStringList&);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemStringList


public:

    class ItemPathList : KConfigSkeleton::ItemStringList
    {

    public:
                             ItemPathList (const QString&, const QString&, QStringList&, const QStringList& = QStringList ());
        void                 readConfig (KConfig*);
        void                 writeConfig (KConfig*);

    };  // class ItemPathList


public:

    class ItemUrlList : KConfigSkeletonItem
    {

    public:
                             ItemUrlList (const QString&, const QString&, KUrl::List&, const KUrl::List& = KUrl::List ());
        void                 readConfig (KConfig*);
        void                 writeConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    };  // class ItemUrlList


public:

    class ItemIntList : KConfigSkeletonItem
    {

    public:
                             ItemIntList (const QString&, const QString&, QList<int>&, const QList<int>&);
%MethodCode
//takes group | (QString) | key | (QString) | reference | (a Python list of int) | defaultValue | (a Python list of int = 0)
    if (a3 == NULL) *(QList<int> *)a3 = QList<int>();
    Py_BEGIN_ALLOW_THREADS
    sipCpp = new sipKConfigSkeleton_ItemIntList (*a0, *a1, *a2, *a3);
    Py_END_ALLOW_THREADS
%End

        void                 readConfig (KConfig*);
        void                 setProperty (const QVariant&);
        bool                 isEqual (const QVariant&) const;
        QVariant             property () const;

    public:
//force
        void                 setValue (const QList<int>&);
        QList<int>&          value ();
        virtual void         setDefaultValue (const QList<int>&);
        virtual void         setDefault ();
        void                 swapDefault ();
        void                 writeConfig (KConfig*);
//end


    };  // class ItemIntList


public:

public:
                         KConfigSkeleton (const QString& = QString (), QObject* /TransferThis/ = 0);
                         KConfigSkeleton (KSharedConfig::Ptr, QObject* /TransferThis/ = 0);
    virtual void         setDefaults ();
    virtual void         readConfig ();
    virtual void         writeConfig ();
    void                 setCurrentGroup (const QString&);
    QString              currentGroup () const;
    void                 addItem (KConfigSkeletonItem*, const QString& = QString ());
    KConfigSkeleton::ItemString* addItemString (const QString&, QString&, const QString& = QLatin1String ("" ), const QString& = QString ());
    KConfigSkeleton::ItemPassword* addItemPassword (const QString&, QString&, const QString& = QLatin1String ("" ), const QString& = QString ());
    KConfigSkeleton::ItemPath* addItemPath (const QString&, QString&, const QString& = QLatin1String ("" ), const QString& = QString ());
    KConfigSkeleton::ItemProperty* addItemProperty (const QString&, QVariant&, const QVariant& = QVariant (), const QString& = QString ());
    KConfigSkeleton::ItemBool* addItemBool (const QString&, bool& /In/, bool = 0, const QString& = QString ());
    KConfigSkeleton::ItemInt* addItemInt (const QString&, qint32& /In/, qint32 = 0, const QString& = QString ());
    KConfigSkeleton::ItemUInt* addItemUInt (const QString&, quint32& /In/, quint32 = 0, const QString& = QString ());
    KConfigSkeleton::ItemLongLong* addItemLongLong (const QString&, qint64& /In/, qint64 = 0, const QString& = QString ());
    KConfigSkeleton::ItemLongLong* addItemInt64 (const QString&, qint64& /In/, qint64 = 0, const QString& = QString ());
    KConfigSkeleton::ItemULongLong* addItemULongLong (const QString&, quint64& /In/, quint64 = 0, const QString& = QString ());
    KConfigSkeleton::ItemULongLong* addItemUInt64 (const QString&, quint64& /In/, quint64 = 0, const QString& = QString ());
    KConfigSkeleton::ItemDouble* addItemDouble (const QString&, double& /In/, double = 0.0, const QString& = QString ());
    KConfigSkeleton::ItemColor* addItemColor (const QString&, QColor&, const QColor& = QColor (128 ,128 ,128 ), const QString& = QString ());
    KConfigSkeleton::ItemFont* addItemFont (const QString&, QFont&, const QFont& = KGlobalSettings::generalFont (), const QString& = QString ());
    KConfigSkeleton::ItemRect* addItemRect (const QString&, QRect&, const QRect& = QRect (), const QString& = QString ());
    KConfigSkeleton::ItemPoint* addItemPoint (const QString&, QPoint&, const QPoint& = QPoint (), const QString& = QString ());
    KConfigSkeleton::ItemSize* addItemSize (const QString&, QSize&, const QSize& = QSize (), const QString& = QString ());
    KConfigSkeleton::ItemDateTime* addItemDateTime (const QString&, QDateTime&, const QDateTime& = QDateTime (), const QString& = QString ());
    KConfigSkeleton::ItemStringList* addItemStringList (const QString&, QStringList&, const QStringList& = QStringList (), const QString& = QString ());
    KConfigSkeleton::ItemIntList* addItemIntList (const QString&, QList<int>&, const QList<int>&, const QString& = QString ());
    KConfig*             config ();
    void                 setSharedConfig (KSharedConfig::Ptr);
    KConfigSkeletonItem::List items () const;
    bool                 isImmutable (const QString&);
    KConfigSkeletonItem* findItem (const QString&);
    bool                 useDefaults (bool);

signals:
    void                 configChanged ();

protected:
    virtual bool         usrUseDefaults (bool);
    virtual void         usrSetDefaults ();
    virtual void         usrReadConfig ();
    virtual void         usrWriteConfig ();

};  // class KConfigSkeleton

