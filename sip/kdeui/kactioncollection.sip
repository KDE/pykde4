//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KActionCollection : QObject
{
%TypeHeaderCode
#include <kactioncollection.h>
%End


public:
    explicit                KActionCollection (QObject* parent /TransferThis/, const KComponentData& cData = KComponentData());
    static const QList<KActionCollection*>&  allCollections ();
    void                    clear ();
    void                    associateWidget (QWidget* widget) const;
    void                    addAssociatedWidget (QWidget* widget);
    void                    removeAssociatedWidget (QWidget* widget);
    QList<QWidget*>         associatedWidgets () const;
    void                    clearAssociatedWidgets ();
    QString                 configGroup () const;
    bool                    configIsGlobal () const;
    void                    setConfigGroup (const QString& group);
    void                    setConfigGlobal (bool global);
    void                    readSettings (KConfigGroup* config = 0);

    void                    importGlobalShortcuts (KConfigGroup* config);
    void                    exportGlobalShortcuts (KConfigGroup* config, bool writeDefaults = 0) const;

    void                    writeSettings (KConfigGroup* config = 0, bool writeDefaults = 0, QAction* oneAction = 0) const;
    int                     count () const;
    bool                    isEmpty () const;
    QAction*                action (int index) const;
    QAction*                action (const QString& name) const;
    QList<QAction*>         actions () const;
    const QList<QAction*>   actionsWithoutGroup () const;
    const QList<QActionGroup*>  actionGroups () const;
    void                    setComponentData (const KComponentData& componentData);
    KComponentData          componentData () const;
    const KXMLGUIClient*    parentGUIClient () const;

signals:
    void                    inserted (QAction* action);
    void                    removed (QAction* action);
    void                    actionHighlighted (QAction* action);

    void                    actionHovered (QAction* action);

    void                    actionTriggered (QAction* action);

protected:
//ig     virtual void       connectNotify (const char* signal);
    virtual void            slotActionTriggered ();
    virtual void            slotActionHighlighted ();

public:
    QAction*                addAction (const QString& name, QAction* action);
    KAction*                addAction (const QString& name, KAction* action);
    void                    removeAction (QAction* action);
    QAction*                takeAction (QAction* action);
    KAction*                addAction (KStandardAction::StandardAction actionType, const QObject* receiver = 0, const char* member = 0);
    KAction*                addAction (KStandardAction::StandardAction actionType, const QString& name, const QObject* receiver = 0, const char* member = 0);
    KAction*                addAction (const QString& name, const QObject* receiver = 0, const char* member = 0);

private:
                            KActionCollection (const KXMLGUIClient* parent /TransferThis/);
};   // KActionCollection


