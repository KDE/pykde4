//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KXMLGUIBuilder
{
%TypeHeaderCode
#include <kxmlguibuilder.h>
%End
//force
                            KXMLGUIBuilder (const KXMLGUIBuilder& other);

//end
public:
    explicit                KXMLGUIBuilder (QWidget* widget);
    KXMLGUIClient*          builderClient () const;
    void                    setBuilderClient (KXMLGUIClient* client);
    KComponentData          builderComponentData () const;
    void                    setBuilderComponentData (const KComponentData& componentData);
    QWidget*                widget ();
    virtual QStringList     containerTags () const;
//force
    virtual SIP_PYTUPLE     createContainer (QWidget* parent /Transfer/, int index, const QDomElement& element) [QWidget* (QWidget* parent /Transfer/, int index, const QDomElement& element, QAction*& containerAction)];
%MethodCode
QAction *containerAction;
    QWidget* res;
    Py_BEGIN_ALLOW_THREADS
    res = sipSelfWasArg ? sipCpp->KXMLGUIBuilder::createContainer (a0, a1, *a2, containerAction) : sipCpp->createContainer (a0, a1, *a2, containerAction);
    Py_END_ALLOW_THREADS

    PyObject *pyWidget;
    PyObject *pyContainerAction;

    if ((pyWidget = sipConvertFromNewType(res, sipType_QWidget, NULL)) == NULL)
        return NULL;

    if ((pyContainerAction = sipConvertFromNewType(containerAction, sipType_QAction, NULL)) == NULL)
        return NULL;

    sipRes = Py_BuildValue ("NN", pyWidget, pyContainerAction);
%End
//end
    virtual void            removeContainer (QWidget* container, QWidget* parent /Transfer/, QDomElement& element, QAction* containerAction);
    virtual QStringList     customTags () const;
    virtual QAction*        createCustomElement (QWidget* parent /Transfer/, int index, const QDomElement& element);
    virtual void            removeCustomElement (QWidget* parent /Transfer/, QAction* action);
    virtual void            finalizeGUI (KXMLGUIClient* client);

protected:
//ig    virtual void            virtual_hook (int id, void* data);
public:
    ~KXMLGUIBuilder ();
//ig    virtual QWidget*        createContainer (QWidget* parent /Transfer/, int index, const QDomElement& element, QAction*& containerAction);
};
// KXMLGUIBuilder


