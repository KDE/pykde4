//
//     Copyright 2008 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace Soprano
{
namespace Error
{

enum ErrorCode
{
    ErrorNone,
    ErrorInvalidArgument,
    ErrorInvalidStatement,
    ErrorNotSupported,
    ErrorParsingFailed,
    ErrorPermissionDenied,
    ErrorUnknown
};

QString                 errorMessage (Soprano::Error::ErrorCode);
Soprano::Error::ErrorCode  convertErrorCode (int code);

class Error
{
%TypeHeaderCode
#include <soprano/error.h>
%End

public:
                            Error ();
                            Error (const QString& message, int code = Soprano::Error::ErrorUnknown);
                            Error (const Soprano::Error::Error&);
//ig    bool                    operator bool () const;
    QString                 message () const;
    int                     code () const;
    bool                    isParserError () const;
    Soprano::Error::ParserError  toParserError () const;

protected:
//ig                            Error (ErrorData*);

public:
    virtual ~Error ();
//ig    bool                    operator bool () const;
%ConvertToSubClassCode
    // CTSCC for subclasses of 'Error'
    sipType = NULL;

    if (dynamic_cast<Soprano::Error::ParserError*>(sipCpp))
        sipType = sipType_Soprano_Error_ParserError;
%End
};
// Error


class ParserError : Soprano::Error::Error
{
%TypeHeaderCode
#include <soprano/error.h>
%End

public:
                            ParserError ();
                            ParserError (const Soprano::Error::Locator&, const QString& message = QString(), int code = Soprano::Error::ErrorParsingFailed);
                            ParserError (const Soprano::Error::Error&);
    Soprano::Error::Locator  locator () const;
    ~ParserError ();
};
// ParserError


class ErrorCache /NoDefaultCtors/
{
%TypeHeaderCode
#include <soprano/error.h>
%End

public:
    virtual Soprano::Error::Error  lastError () const;

protected:
                            ErrorCache ();
    void                    clearError () const;
    void                    setError (const Soprano::Error::Error&) const;
    void                    setError (const QString& errorMessage, int code = Soprano::Error::ErrorUnknown) const;
public:
    virtual ~ErrorCache ();
};
// ErrorCache

};
// Error

};
// Soprano


//ig QDebug                  operator << (QDebug s, const Soprano::Error::Error&);
QTextStream&            operator << (QTextStream& s, const Soprano::Error::Error&);
%ModuleHeaderCode
//ctscc
#include <soprano/error.h>
%End
