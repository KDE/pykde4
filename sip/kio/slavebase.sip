//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
//ctscc
#include <forwardingslavebase.h>
#include <tcpslavebase.h>
%End

namespace KIO
{

class SlaveBase
{
%TypeHeaderCode
#include <slavebase.h>
%End


public:
                         SlaveBase (const QByteArray&, const QByteArray&, const QByteArray&);
    void                 exit ();
    void                 dispatchLoop ();
    void                 setConnection (KIO::Connection*);
    KIO::Connection*     connection () const;
    void                 data (const QByteArray&);
    void                 dataReq ();
    void                 opened ();
    void                 error (int, const QString&);
    void                 connected ();
    void                 finished ();
    void                 needSubUrlData ();
    void                 slaveStatus (const QString&, bool);
    void                 statEntry (const KIO::UDSEntry&);
    void                 listEntries (const KIO::UDSEntryList&);
    bool                 canResume (KIO::filesize_t);
    void                 canResume ();
    void                 totalSize (KIO::filesize_t);
    void                 processedSize (KIO::filesize_t);
    void                 position (KIO::filesize_t);
    void                 written (KIO::filesize_t);
    void                 processedPercent (float);
    void                 speed (ulong);
    void                 redirection (const KUrl&);
    void                 errorPage ();
    void                 mimeType (const QString&);
    void                 warning (const QString&);
    void                 infoMessage (const QString&);

    enum MessageBoxType
    {
        QuestionYesNo, 
        WarningYesNo, 
        WarningContinueCancel, 
        WarningYesNoCancel, 
        Information, 
        SSLMessageBox
    };

    int                  messageBox (KIO::SlaveBase::MessageBoxType, const QString&, const QString& = QString::null , const QString& = QString::null , const QString& = QString::null );
    int                  messageBox (const QString&, KIO::SlaveBase::MessageBoxType, const QString& = QString::null , const QString& = QString::null , const QString& = QString::null , const QString& = QString::null );
    void                 setMetaData (const QString&, const QString&);
    bool                 hasMetaData (const QString&);
    QString              metaData (const QString&);
    KIO::MetaData        allMetaData () const;
    KConfigGroup*        config ();
    KRemoteEncoding*     remoteEncoding ();
    virtual void         setHost (const QString&, int, const QString&, const QString&);
    virtual void         setSubUrl (const KUrl&);
    virtual void         openConnection ();
    virtual void         closeConnection ();
    virtual void         get (const KUrl&);
    virtual void         open (const KUrl&, QIODevice::OpenMode);
    virtual void         read (KIO::filesize_t);
    virtual void         write (const QByteArray&);
    virtual void         seek (KIO::filesize_t);
    virtual void         close ();
    virtual void         put (const KUrl&, int, bool, bool);
    virtual void         stat (const KUrl&);
    virtual void         mimetype (const KUrl&);
    virtual void         listDir (const KUrl&);
    virtual void         mkdir (const KUrl&, int);
    virtual void         rename (const KUrl&, const KUrl&, bool);
    virtual void         symlink (const QString&, const KUrl&, bool);
    virtual void         chmod (const KUrl&, int);
    virtual void         chown (const KUrl&, const QString&, const QString&);
    virtual void         setModificationTime (const KUrl&, const QDateTime&);
    virtual void         copy (const KUrl&, const KUrl&, int, bool);
    virtual void         del (const KUrl&, bool) /PyName=del_/;
    virtual void         setLinkDest (const KUrl&, const QString&);
    virtual void         special (const QByteArray&);
    virtual void         multiGet (const QByteArray&);
    virtual void         slave_status ();
    virtual void         reparseConfiguration ();
    int                  connectTimeout ();
    int                  proxyConnectTimeout ();
    int                  responseTimeout ();
    int                  readTimeout ();
    void                 setTimeoutSpecialCommand (int, const QByteArray& = QByteArray ());
    virtual void         dispatch (int, const QByteArray&);
    virtual void         dispatchOpenCommand (int, const QByteArray&);
    int                  readData (QByteArray&);
    void                 listEntry (const KIO::UDSEntry&, bool);
    void                 connectSlave (const QString&);
    void                 disconnectSlave ();
    bool                 openPasswordDialog (KIO::AuthInfo&, const QString& = QString ());
    bool                 checkCachedAuthentication (KIO::AuthInfo&);
    bool                 cacheAuthentication (const KIO::AuthInfo&);
    bool                 requestNetwork (const QString& = QString::null );
    void                 dropNetwork (const QString& = QString::null );
    int                  waitForAnswer (int, int, QByteArray&, int* /Out/);
    void                 sendMetaData ();
//ig     QCString             mProtocol;
    KIO::Connection*     m_pConnection;
    KIO::MetaData        mOutgoingMetaData;
    KIO::MetaData        mIncomingMetaData;
    bool                 wasKilled () const;
    void                 setKillFlag ();

protected:
//igx     virtual void         virtual_hook (int, void*);

// Subclasses for KIO::SlaveBase

public:
%ConvertToSubClassCode

    if (dynamic_cast<KIO::ForwardingSlaveBase*>(sipCpp))
        sipClass = sipClass_KIO_ForwardingSlaveBase;
    else if (dynamic_cast<KIO::TCPSlaveBase*>(sipCpp))
        sipClass = sipClass_KIO_TCPSlaveBase;
    else
        sipClass = NULL;
%End


};  // class SlaveBase

};  // namespace KIO

