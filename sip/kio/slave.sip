//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace KIO
{

class Slave : KIO::SlaveInterface
{
%TypeHeaderCode
#include <slave.h>
%End


public:
    explicit                Slave (const QString& protocol, QObject* parent /TransferThis/ = 0);
    void                    setPID (pid_t);
    int                     slave_pid ();
    void                    kill ();
    bool                    isAlive ();
    virtual void            setHost (const QString& host, quint16 port, const QString& user, const QString& passwd);
    void                    resetHost ();
    virtual void            setConfig (const KIO::MetaData& config);
    QString                 protocol ();
    void                    setProtocol (const QString& protocol);
    QString                 slaveProtocol ();
    QString                 host ();
    quint16                 port ();
    QString                 user ();
    QString                 passwd ();
    static KIO::Slave*      createSlave (const QString& protocol, const KUrl& url, int& error /Out/, QString& error_text);
    static KIO::Slave*      holdSlave (const QString& protocol, const KUrl& url);
    virtual void            suspend ();
    virtual void            resume ();
    virtual bool            suspended ();
    virtual void            send (int cmd, const QByteArray& arr = QByteArray());
    virtual void            hold (const KUrl& url);
    time_t                  idleTime ();
    void                    setIdle ();
    bool                    isConnected ();
    void                    setConnected (bool c);
    void                    ref ();
    void                    deref ();
    void                    accept ();
    void                    gotInput ();
    void                    timeout ();

signals:
    void                    slaveDied (KIO::Slave* slave);
public:
    ~Slave ();
    void                    setJob (KIO::SimpleJob* job);
    KIO::SimpleJob*         job () const;
    static bool             checkForHeldSlave (const KUrl& url);
};
// Slave

};
// KIO


