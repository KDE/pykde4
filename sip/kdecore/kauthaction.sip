// Copyright 2009 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

namespace KAuth
{
class Action
{
%TypeHeaderCode
#include <kauthaction.h>
%End

public:
    enum AuthStatus
    {
        Denied,
        Error,
        Invalid,
        Authorized,
        AuthRequired,
        UserCancelled
    };
                            Action ();
                            Action (const KAuth::Action& action);
                            Action (const QString& name);
                            Action (const QString& name, const QString& details);
    ~Action ();
    QString                 name () const;
    void                    setName (const QString& name);
    void                    setDetails (const QString& details);
    QString                 details () const;
    bool                    isValid () const;
    QString                 helperID () const;
    void                    setHelperID (const QString& id);
    KAuth::ActionWatcher*   watcher ();
    void                    setArguments (const QVariantMap& arguments);
    QVariantMap             arguments () const;
    void                    addArgument (const QString& key, const QVariant& value);
    KAuth::Action::AuthStatus  authorize () const;
    KAuth::Action::AuthStatus  status () const;
    KAuth::ActionReply      execute () const;
    KAuth::ActionReply      execute (const QString& helperID) const;
    void                    setExecutesAsync (bool async);
    bool                    executesAsync () const;
    static bool             executeActions (const QList<KAuth::Action>& actions, QList<KAuth::Action>* deniedActions, const QString& helperId);
    void                    stop ();
    void                    stop (const QString& helperID);
    bool                    operator == (const KAuth::Action& action) const;
    bool                    operator != (const KAuth::Action& action) const;
};
};
