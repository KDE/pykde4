//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine
//            PyKDE4 module kdecore  version KDE 4.1.0

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KSycocaEntry
{
%TypeHeaderCode
#include <ksycocaentry.h>
%End


public:
                            KSycocaEntry ();
    bool                    isType (KSycocaType t) const;
    KSycocaType             sycocaType () const;
    typedef KSharedPtr<KSycocaEntry> Ptr;

    typedef QList<KSycocaEntry::Ptr> List;

    static void             read (QDataStream& s, QString& str);
    static void             read (QDataStream& s, QStringList& list);
    QString                 name () const;
    QString                 entryPath () const;
    bool                    isValid () const;
    bool                    isDeleted () const;
    QVariant                property (const QString& name) const;
    QStringList             propertyNames () const;
    void                    setDeleted (bool deleted);
    bool                    isSeparator () const;
    int                     offset () const;
    void                    save (QDataStream& s);

protected:
//ig                        KSycocaEntry (KSycocaEntryPrivate& d);

private:
                            KSycocaEntry (const KSycocaEntry&);
};   // KSycocaEntry



%MappedType QList<KSycocaEntry::Ptr>
{
%TypeHeaderCode
#include <qlist.h>
%End

%ConvertFromTypeCode
    // Create the list.
    PyObject *l;

    if ((l = PyList_New(sipCpp->size())) == NULL)
        return NULL;

    // Set the list elements.
    for (int i = 0; i < sipCpp->size(); ++i)
    {
        KSycocaEntry::Ptr *t = new KSycocaEntry::Ptr (sipCpp->at(i));
        PyObject *tobj;

        if ((tobj = sipConvertFromNewInstance(t->data(), sipClass_KSycocaEntry, sipTransferObj)) == NULL)
        {
            Py_DECREF(l);
            delete t;

            return NULL;
        }

        PyList_SET_ITEM(l, i, tobj);
    }

    return l;
%End

%ConvertToTypeCode
    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (!PyList_Check(sipPy))
            return 0;

        for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
            if (!sipCanConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_KSycocaEntry, SIP_NOT_NONE))
                return 0;

        return 1;
    }

    QList<KSycocaEntry::Ptr> *ql = new QList<KSycocaEntry::Ptr>;
 
    for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
    {
        int state;
        KSycocaEntry *t = reinterpret_cast<KSycocaEntry *>(sipConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_KSycocaEntry, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr));
 
        if (*sipIsErr)
        {
            sipReleaseInstance(t, sipClass_KSycocaEntry, state);

            delete ql;
            return 0;
        }

        KSharedPtr<KSycocaEntry> *tptr = new KSharedPtr<KSycocaEntry> (t);

        ql->append(*tptr);

        sipReleaseInstance(t, sipClass_KSycocaEntry, state);
    }
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
%End
};

