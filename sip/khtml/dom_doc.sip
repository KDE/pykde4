//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module khtml  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace DOM
{

class DOMImplementation
{
%TypeHeaderCode
#include <dom_doc.h>
%End


public:
                         DOMImplementation ();
                         DOMImplementation (const DOM::DOMImplementation&);
    bool                 hasFeature (const DOM::DOMString&, const DOM::DOMString&);
    DOM::DocumentType    createDocumentType (const DOM::DOMString&, const DOM::DOMString&, const DOM::DOMString&);
    DOM::Document        createDocument (const DOM::DOMString&, const DOM::DOMString&, const DOM::DocumentType&);
    DOM::DOMImplementation getInterface (const DOM::DOMString&) const;
    DOM::CSSStyleSheet   createCSSStyleSheet (const DOM::DOMString&, const DOM::DOMString&);
    DOM::HTMLDocument    createHTMLDocument (const DOM::DOMString&);
//ig     DOMImplementationImpl* handle () const;
    bool                 isNull () const;

protected:
//ig                          DOMImplementation (DOMImplementationImpl*);

};  // class DOMImplementation


class Document : DOM::Node
{
%TypeHeaderCode
#include <dom_doc.h>
%End


public:
                         Document ();
                         Document (bool);
                         Document (const DOM::Document&);
                         Document (const DOM::Node&);
    DOM::DocumentType    doctype () const;
    DOM::DOMImplementation implementation () const;
    DOM::Element         documentElement () const;
    DOM::Element         createElement (const DOM::DOMString&);
    DOM::Element         createElementNS (const DOM::DOMString&, const DOM::DOMString&);
    DOM::DocumentFragment createDocumentFragment ();
    DOM::Text            createTextNode (const DOM::DOMString&);
    DOM::Comment         createComment (const DOM::DOMString&);
    DOM::CDATASection    createCDATASection (const DOM::DOMString&);
    DOM::ProcessingInstruction createProcessingInstruction (const DOM::DOMString&, const DOM::DOMString&);
    DOM::Attr            createAttribute (const DOM::DOMString&);
    DOM::Attr            createAttributeNS (const DOM::DOMString&, const DOM::DOMString&);
    DOM::EntityReference createEntityReference (const DOM::DOMString&);
    DOM::Element         getElementById (const DOM::DOMString&) const;
    DOM::NodeList        getElementsByTagName (const DOM::DOMString&);
    DOM::NodeList        getElementsByTagNameNS (const DOM::DOMString&, const DOM::DOMString&);
    DOM::Node            importNode (const DOM::Node&, bool);
    bool                 isHTMLDocument () const;
    DOM::Range           createRange ();
    DOM::NodeIterator    createNodeIterator (DOM::Node, ulong, DOM::NodeFilter, bool);
    DOM::TreeWalker      createTreeWalker (DOM::Node, ulong, DOM::NodeFilter, bool);
    DOM::Event           createEvent (const DOM::DOMString&);
    DOM::AbstractView    defaultView () const;
    DOM::StyleSheetList  styleSheets () const;
    DOM::DOMString       preferredStylesheetSet ();
    DOM::DOMString       selectedStylesheetSet ();
    void                 setSelectedStylesheetSet (const DOM::DOMString&);
    void                 addStyleSheet (const DOM::StyleSheet&);
    void                 removeStyleSheet (const DOM::StyleSheet&);
    KHTMLView*           view () const;
    DOM::CSSStyleDeclaration getOverrideStyle (const DOM::Element&, const DOM::DOMString&);
    bool                 async () const;
    void                 setAsync (bool);
    void                 abort ();
    void                 load (const DOM::DOMString&);
    void                 loadXML (const DOM::DOMString&);
    bool                 designMode () const;
    void                 setDesignMode (bool);
    DOM::DOMString       completeURL (const DOM::DOMString&);
    DOM::DOMString       toString () const;
    void                 updateRendering ();
//ig                          Document (DocumentImpl*);

};  // class Document


class DocumentFragment : DOM::Node
{
%TypeHeaderCode
#include <dom_doc.h>
%End


public:
                         DocumentFragment ();
                         DocumentFragment (const DOM::DocumentFragment&);
                         DocumentFragment (const DOM::Node&);

protected:
//ig                          DocumentFragment (DocumentFragmentImpl*);

};  // class DocumentFragment


class DocumentType : DOM::Node
{
%TypeHeaderCode
#include <dom_doc.h>
%End


public:
                         DocumentType ();
                         DocumentType (const DOM::DocumentType&);
                         DocumentType (const DOM::Node&);
    DOM::DOMString       name () const;
    DOM::NamedNodeMap    entities () const;
    DOM::NamedNodeMap    notations () const;
    DOM::DOMString       publicId () const;
    DOM::DOMString       systemId () const;
    DOM::DOMString       internalSubset () const;

protected:
//ig                          DocumentType (DocumentTypeImpl*);

};  // class DocumentType

};  // namespace DOM

