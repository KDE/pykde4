//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace KIO
{

class Job : KCompositeJob
{
%TypeHeaderCode
#include <jobclasses.h>
%End


protected:
                         Job ();
//ig                          Job (JobPrivate&);

public:
    void                 start ();
    KIO::JobUiDelegate*  ui () const;

protected:
    virtual bool         doKill ();
    virtual bool         doSuspend ();
    virtual bool         doResume ();

public:
    QString              errorString () const;
    QStringList          detailedErrorStrings (const KUrl* = 0, int = -1) const;
    void                 showErrorDialog (QWidget* /Transfer/ = 0);
    bool                 isInteractive () const;
    void                 setParentJob (KIO::Job*);
    KIO::Job*            parentJob () const;
    void                 setMetaData (const KIO::MetaData&);
    void                 addMetaData (const QString&, const QString&);
    void                 addMetaData (const QMap<QString, QString>&);
    void                 mergeMetaData (const QMap<QString, QString>&);
    KIO::MetaData        outgoingMetaData () const;
    KIO::MetaData        metaData () const;
    QString              queryMetaData (const QString&);

signals:
    void                 canceled (KJob*);
    void                 connected (KIO::Job*);

protected:
    virtual void         addSubjob (KIO::Job*, bool = 1);
    bool                 removeSubjob (KJob*, bool = 0);

};  // class Job


class SimpleJob : KIO::Job /Abstract/
{
%TypeHeaderCode
#include <jobclasses.h>
%End


protected:
    virtual bool         doSuspend ();
    virtual bool         doResume ();
    virtual bool         doKill ();

public:
    const KUrl&          url () const;
    virtual void         putOnHold ();
    static void          removeOnHold ();

public slots:
    void                 slotError (int, const QString&);

protected slots:
    virtual void         slotFinished ();
    virtual void         slotWarning (const QString&);
    virtual void         slotInfoMessage (const QString&);
    virtual void         slotMetaData (const KIO::MetaData&);

protected:
    void                 storeSSLSessionFromJob (const KUrl&);


//mt  undefined symbol: SimpleJobPrivate& -- need mapped type?
//mt                          SimpleJob (SimpleJobPrivate&);


protected:

};  // class SimpleJob


class StatJob : KIO::SimpleJob /Abstract/
{
%TypeHeaderCode
#include <jobclasses.h>
%End


public:

    enum StatSide
    {
        SourceSide, 
        DestinationSide
    };

    void                 setSide (KIO::StatJob::StatSide);
    void                 setSide (bool);
    void                 setDetails (short);
    const KIO::UDSEntry& statResult () const;

signals:
    void                 redirection (KIO::Job*, const KUrl&);
    void                 permanentRedirection (KIO::Job*, const KUrl&, const KUrl&);

protected slots:
    virtual void         slotFinished ();
    virtual void         slotMetaData (const KIO::MetaData&);

protected:


//mt  undefined symbol: StatJobPrivate& -- need mapped type?
//mt                          StatJob (StatJobPrivate&);


protected:

};  // class StatJob


class TransferJob : KIO::SimpleJob /Abstract/
{
%TypeHeaderCode
#include <jobclasses.h>
%End


public:
    void                 setModificationTime (const QDateTime&);
    bool                 isErrorPage () const;
    void                 setAsyncDataEnabled (bool);
    void                 sendAsyncData (const QByteArray&);
    void                 setReportDataSent (bool);
    bool                 reportDataSent ();
    QString              mimetype () const;

protected:
    virtual void         slotResult (KJob*);
    virtual bool         doResume ();

signals:
    void                 data (KIO::Job*, const QByteArray&);
    void                 dataReq (KIO::Job*, QByteArray&);
    void                 redirection (KIO::Job*, const KUrl&);
    void                 permanentRedirection (KIO::Job*, const KUrl&, const KUrl&);
    void                 mimetype (KIO::Job*, const QString&);
    void                 canResume (KIO::Job*, KIO::filesize_t);

protected slots:
    virtual void         slotRedirection (const KUrl&);
    virtual void         slotFinished ();
    virtual void         slotData (const QByteArray&);
    virtual void         slotDataReq ();
    virtual void         slotMimetype (const QString&);
    virtual void         slotMetaData (const KIO::MetaData&);

protected:


//mt  undefined symbol: TransferJobPrivate& -- need mapped type?
//mt                          TransferJob (TransferJobPrivate&);


protected:

};  // class TransferJob


class StoredTransferJob : KIO::TransferJob /Abstract/
{
%TypeHeaderCode
#include <jobclasses.h>
%End


public:
    void                 setData (const QByteArray&);
    QByteArray           data () const;

protected:


//mt  undefined symbol: StoredTransferJobPrivate& -- need mapped type?
//mt                          StoredTransferJob (StoredTransferJobPrivate&);


protected:

};  // class StoredTransferJob


class MultiGetJob : KIO::TransferJob /Abstract/
{
%TypeHeaderCode
#include <jobclasses.h>
%End


public:
    void                 get (long, const KUrl&, const KIO::MetaData&);

signals:
    void                 data (long, const QByteArray&);
    void                 mimetype (long, const QString&);
    void                 result (long);

protected slots:
    virtual void         slotRedirection (const KUrl&);
    virtual void         slotFinished ();
    virtual void         slotData (const QByteArray&);
    virtual void         slotMimetype (const QString&);

protected:


//mt  undefined symbol: MultiGetJobPrivate& -- need mapped type?
//mt                          MultiGetJob (MultiGetJobPrivate&);


protected:

};  // class MultiGetJob


class MimetypeJob : KIO::TransferJob /Abstract/
{
%TypeHeaderCode
#include <jobclasses.h>
%End


protected slots:
    virtual void         slotFinished ();

protected:


//mt  undefined symbol: MimetypeJobPrivate& -- need mapped type?
//mt                          MimetypeJob (MimetypeJobPrivate&);


protected:

};  // class MimetypeJob


class FileCopyJob : KIO::Job /Abstract/
{
%TypeHeaderCode
#include <jobclasses.h>
%End


public:
    void                 setSourceSize (KIO::filesize_t);
    void                 setModificationTime (const QDateTime&);
    KUrl                 srcUrl () const;
    KUrl                 destUrl () const;
    bool                 doSuspend ();
    bool                 doResume ();

signals:
    void                 mimetype (KIO::Job*, const QString&);

protected slots:
    virtual void         slotResult (KJob*);

protected:


//mt  undefined symbol: FileCopyJobPrivate& -- need mapped type?
//mt                          FileCopyJob (FileCopyJobPrivate&);


protected:

};  // class FileCopyJob


class ListJob : KIO::SimpleJob /Abstract/
{
%TypeHeaderCode
#include <jobclasses.h>
%End


public:
    const KUrl&          redirectionUrl () const;
    void                 setUnrestricted (bool);

signals:
    void                 entries (KIO::Job*, const KIO::UDSEntryList&);
    void                 redirection (KIO::Job*, const KUrl&);
    void                 permanentRedirection (KIO::Job*, const KUrl&, const KUrl&);

protected slots:
    virtual void         slotFinished ();
    virtual void         slotMetaData (const KIO::MetaData&);
    virtual void         slotResult (KJob*);

protected:


//mt  undefined symbol: ListJobPrivate& -- need mapped type?
//mt                          ListJob (ListJobPrivate&);


protected:

};  // class ListJob


class SpecialJob : KIO::TransferJob
{
%TypeHeaderCode
#include <jobclasses.h>
%End


public:
                         SpecialJob (const KUrl&, const QByteArray& = QByteArray ());
    void                 setArguments (const QByteArray&);
    QByteArray           arguments () const;

};  // class SpecialJob

};  // namespace KIO

