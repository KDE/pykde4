//
//     Copyright 2008 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace Phonon
{

class EffectParameter
{
%TypeHeaderCode
#include <phonon/effectparameter.h>
%End

public:
                            EffectParameter ();
    const QString&          name () const;
    const QString&          description () const;
    QVariant::Type          type () const;
    bool                    isLogarithmicControl () const;
    QVariant                minimumValue () const;
    QVariant                maximumValue () const;
    QVariant                defaultValue () const;
    QVariantList            possibleValues () const;
    bool                    operator < (const Phonon::EffectParameter& rhs) const;
    bool                    operator > (const Phonon::EffectParameter& rhs) const;
    bool                    operator == (const Phonon::EffectParameter& rhs) const;
                            EffectParameter (const Phonon::EffectParameter& rhs);

    enum Hint
    {
        ToggledHint,
        LogarithmicHint,
        IntegerHint
    };

    typedef QFlags<Phonon::EffectParameter::Hint> Hints;

                            EffectParameter (int parameterId, const QString& name, Phonon::EffectParameter::Hints hints, const QVariant& defaultValue, const QVariant& min = QVariant(), const QVariant& max = QVariant(), const QVariantList& values = QVariantList(), const QString& description = QString());
    int                     id () const;
    ~EffectParameter ();
};
// EffectParameter

uint                    qHash (const Phonon::EffectParameter& param);
};
// Phonon


