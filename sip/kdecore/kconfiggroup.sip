//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KConfigGroup : KConfigBase
{
%TypeHeaderCode
#include <kconfiggroup.h>
%End


public:
                         KConfigGroup ();
                         KConfigGroup (KConfigBase*, const QByteArray&);
                         KConfigGroup (KConfigBase*, const QString&);
                         KConfigGroup (KConfigBase*, const char*);
                         KConfigGroup (const KSharedConfigPtr&, const QString&);
                         KConfigGroup (const KSharedConfigPtr&, const QByteArray&);
                         KConfigGroup (const KSharedConfigPtr&, const char*);
                         KConfigGroup (const KConfigGroup&);
    bool                 isValid () const;
    QString              name () const;
    bool                 exists () const;
    void                 sync ();
    void                 markAsClean ();
    KConfigBase::AccessMode accessMode () const;
    KConfig*             config ();
    void                 changeGroup (const QString&);
    void                 changeGroup (const QByteArray&);
    void                 changeGroup (const char*);
    QStringList          groupList () const;
    QStringList          keyList () const;
    void                 deleteGroup (KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    QString              readEntry (const QByteArray&, const char* = 0) const;
    QString              readEntry (const QString&, const char* = 0) const;
    QString              readEntry (const char*, const char* = 0) const;
    QStringList          readXdgListEntry (const QByteArray&, const QStringList& = QStringList ()) const;
    QStringList          readXdgListEntry (const QString&, const QStringList& = QStringList ()) const;
    QStringList          readXdgListEntry (const char*, const QStringList& = QStringList ()) const;
    QString              readPathEntry (const QByteArray&, const QString& = QString ()) const;
    QString              readPathEntry (const QString&, const QString& = QString ()) const;
    QString              readPathEntry (const char*, const QString& = QString ()) const;
    QStringList          readPathEntry (const QByteArray&, const QStringList&) const;
    QStringList          readPathEntry (const QString&, const QStringList&) const;
    QStringList          readPathEntry (const char*, const QStringList&) const;
    QString              readEntryUntranslated (const QByteArray&, const QString& = QString ()) const;
    QString              readEntryUntranslated (const QString&, const QString& = QString ()) const;
    QString              readEntryUntranslated (const char*, const QString& = QString ()) const;
    void                 writeEntry (const QByteArray&, const char*, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 writeEntry (const QString&, const char*, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 writeEntry (const char*, const char*, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 writeXdgListEntry (const QByteArray&, const QStringList&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 writeXdgListEntry (const QString&, const QStringList&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 writeXdgListEntry (const char*, const QStringList&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 writePathEntry (const QByteArray&, const QString&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 writePathEntry (const QString&, const QString&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 writePathEntry (const char*, const QString&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 writePathEntry (const QByteArray&, const QStringList&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 writePathEntry (const QString&, const QStringList&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 writePathEntry (const char*, const QStringList&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 deleteEntry (const QByteArray&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 deleteEntry (const QString&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    void                 deleteEntry (const char*, KConfigBase::WriteConfigFlags = KConfigBase::Normal );
    bool                 hasKey (const QByteArray&) const;
    bool                 hasKey (const QString&) const;
    bool                 hasKey (const char*) const;
    bool                 isImmutable () const;
    bool                 isEntryImmutable (const QByteArray&) const;
    bool                 isEntryImmutable (const QString&) const;
    bool                 isEntryImmutable (const char*) const;
    void                 revertToDefault (const QByteArray&);
    void                 revertToDefault (const QString&);
    void                 revertToDefault (const char*);
    bool                 hasDefault (const QByteArray&) const;
    bool                 hasDefault (const QString&) const;
    bool                 hasDefault (const char*) const;
    QMap<QString, QString> entryMap () const;

protected:
    bool                 hasGroupImpl (const QByteArray&) const;
    KConfigGroup         groupImpl (const QByteArray&);
    void                 deleteGroupImpl (const QByteArray&, KConfigBase::WriteConfigFlags);
    bool                 isGroupImmutableImpl (const QByteArray&) const;

};  // class KConfigGroup

typedef KSharedPtr<KSharedConfig> KSharedConfigPtr;
