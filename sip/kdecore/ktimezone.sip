//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KTimeZones
{
%TypeHeaderCode
#include <ktimezone.h>
%End


public:
                         KTimeZones ();
    KTimeZone            zone (const QString&) const;
    typedef QMap<QString, KTimeZone> ZoneMap;
    const KTimeZones::ZoneMap zones () const;
    bool                 add (const KTimeZone&);
    KTimeZone            remove (const KTimeZone&);
    KTimeZone            remove (const QString&);
    void                 clear ();

private:
                         KTimeZones (const KTimeZones&);

};  // class KTimeZones


class KTimeZone
{
%TypeHeaderCode
#include <ktimezone.h>
%End


public:

    class Phase
    {

    public:
                             Phase ();
                             Phase (int, const QByteArray&, bool, const QString& = QString ());
                             Phase (int, const QList<QByteArray>&, bool, const QString& = QString ());
                             Phase (const KTimeZone::Phase&);
        bool                 operator == (const KTimeZone::Phase&) const;
        bool                 operator != (const KTimeZone::Phase&) const;
        int                  utcOffset () const;
        QList<QByteArray>    abbreviations () const;
        bool                 isDst () const;
        QString              comment () const;

    };  // class Phase


public:

    class Transition
    {

    public:
                             Transition ();
                             Transition (const QDateTime&, const KTimeZone::Phase&);
                             Transition (const KTimeZone::Transition&);
        QDateTime            time () const;
        KTimeZone::Phase     phase () const;
        bool                 operator < (const KTimeZone::Transition&) const;

    };  // class Transition


public:

    class LeapSeconds
    {

    public:
                             LeapSeconds ();
                             LeapSeconds (const QDateTime&, int, const QString& = QString ());
                             LeapSeconds (const KTimeZone::LeapSeconds&);
        bool                 operator < (const KTimeZone::LeapSeconds&) const;
        bool                 isValid () const;
        QDateTime            dateTime () const;
        int                  leapSeconds () const;
        QString              comment () const;

    };  // class LeapSeconds


public:
//ig                          KTimeZone ();
                         KTimeZone (const QString& = QLatin1String ("UTC" ));
                         KTimeZone (const KTimeZone&);
    bool                 operator == (const KTimeZone&) const;
    bool                 operator != (const KTimeZone&) const;
    bool                 isValid () const;
    QString              name () const;
    QString              countryCode () const;
    float                latitude () const;
    float                longitude () const;
    QString              comment () const;
    QList<QByteArray>    abbreviations () const;
    QByteArray           abbreviation (const QDateTime&) const;
    QList<int>           utcOffsets () const;
    QDateTime            convert (const KTimeZone&, const QDateTime&) const;
    QDateTime            toUtc (const QDateTime&) const;
    QDateTime            toZoneTime (const QDateTime&, bool* /Out/ = 0) const;
    int                  currentOffset (Qt::TimeSpec = Qt::UTC ) const;
    virtual int          offsetAtZoneTime (const QDateTime&, int* /Out/ = 0) const;
    virtual int          offsetAtUtc (const QDateTime&) const;
    virtual int          offset (time_t) const;
    virtual bool         isDstAtUtc (const QDateTime&) const;
    virtual bool         isDst (time_t) const;
    QList<KTimeZone::Phase> phases () const;
    virtual bool         hasTransitions () const;
    QList<KTimeZone::Transition> transitions (const QDateTime& = QDateTime (), const QDateTime& = QDateTime ()) const;
//ig     const KTimeZone::Transition* transition (const QDateTime&, const KTimeZone::Transition** = 0, bool* = 0) const;
    int                  transitionIndex (const QDateTime&, int* /Out/ = 0, bool* /Out/ = 0) const;
    QList<QDateTime>     transitionTimes (const KTimeZone::Phase&, const QDateTime& = QDateTime (), const QDateTime& = QDateTime ()) const;
    QList<KTimeZone::LeapSeconds> leapSecondChanges () const;
    KTimeZoneSource*     source () const;
    bool                 parse () const;
    const KTimeZoneData* data (bool = 0) const;
    static QDateTime     fromTime_t (time_t);
    static time_t        toTime_t (const QDateTime&);
    static KTimeZone     utc ();
    static const int     InvalidOffset;
    static const time_t  InvalidTime_t;
    static const float   UNKNOWN;

protected:
                         KTimeZone (KTimeZoneBackend*);
    void                 setData (KTimeZoneData*, KTimeZoneSource* = 0);
    bool                 updateBase (const KTimeZone&);

};  // class KTimeZone


class KTimeZoneBackend
{
%TypeHeaderCode
#include <ktimezone.h>
%End


public:
                         KTimeZoneBackend ();
                         KTimeZoneBackend (const QString&);
                         KTimeZoneBackend (const KTimeZoneBackend&);
    virtual KTimeZoneBackend* clone () const;
    virtual int          offsetAtZoneTime (const KTimeZone*, const QDateTime&, int* /Out/) const;
    virtual int          offsetAtUtc (const KTimeZone*, const QDateTime&) const;
    virtual int          offset (const KTimeZone*, time_t) const;
    virtual bool         isDstAtUtc (const KTimeZone*, const QDateTime&) const;
    virtual bool         isDst (const KTimeZone*, time_t) const;
    virtual bool         hasTransitions (const KTimeZone*) const;

protected:
                         KTimeZoneBackend (KTimeZoneSource*, const QString&, const QString& = QString (), float = KTimeZone::UNKNOWN , float = KTimeZone::UNKNOWN , const QString& = QString ());

};  // class KTimeZoneBackend


class KTimeZoneSource
{
%TypeHeaderCode
#include <ktimezone.h>
%End


public:
                         KTimeZoneSource ();
    virtual KTimeZoneData* parse (const KTimeZone&) const;

};  // class KTimeZoneSource


class KTimeZoneData
{
%TypeHeaderCode
#include <ktimezone.h>
%End


public:
                         KTimeZoneData ();
                         KTimeZoneData (const KTimeZoneData&);
//ig     virtual KTimeZoneData* clone ();
    virtual QList<QByteArray> abbreviations () const;
    virtual QByteArray   abbreviation (const QDateTime&) const;
    virtual QList<int>   utcOffsets () const;
    int                  previousUtcOffset () const;
    QList<KTimeZone::Phase> phases () const;
    virtual bool         hasTransitions () const;
    QList<KTimeZone::Transition> transitions (const QDateTime& = QDateTime (), const QDateTime& = QDateTime ()) const;
//ig     const KTimeZone::Transition* transition (const QDateTime&, const KTimeZone::Transition** = 0, bool* = 0) const;
    int                  transitionIndex (const QDateTime&, int* /Out/ = 0, bool* /Out/ = 0) const;
    QList<QDateTime>     transitionTimes (const KTimeZone::Phase&, const QDateTime& = QDateTime (), const QDateTime& = QDateTime ()) const;
    QList<KTimeZone::LeapSeconds> leapSecondChanges () const;
    KTimeZone::LeapSeconds leapSecondChange (const QDateTime&) const;

protected:
    void                 setPhases (const QList<KTimeZone::Phase>&, int);
    void                 setTransitions (const QList<KTimeZone::Transition>&);
    void                 setLeapSecondChanges (const QList<KTimeZone::LeapSeconds>&);

};  // class KTimeZoneData

