// Copyright 2008 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

namespace Soprano
{
namespace Client
{

class SparqlModel : Soprano::Model
{
%TypeHeaderCode
#include <soprano/sparqlmodel.h>
%End

public:
                            SparqlModel (const QString& host = QString(), quint16 port = 80, const QString& user = QString(), const QString& password = QString());
    void                    setHost (const QString& host, quint16 port = 80);
    void                    setUser (const QString& user, const QString& password = QString());
    Soprano::Error::ErrorCode  addStatement (const Soprano::Statement& statement);
    Soprano::Error::ErrorCode  removeStatement (const Soprano::Statement& statement);
    Soprano::Error::ErrorCode  removeAllStatements (const Soprano::Statement& statement);
    Soprano::NodeIterator   listContexts () const;
    bool                    containsStatement (const Soprano::Statement& statement) const;
    bool                    containsAnyStatement (const Soprano::Statement& statement) const;


//mt undefined symbol: QueryLanguage language -- need mapped type?
//mt     Soprano::QueryResultIterator  executeQuery (const QString& query, Soprano::Query::QueryLanguage language = Query::QueryLanguageSparql, const QString& userQueryLanguage = QString()) const;


    Soprano::StatementIterator  listStatements (const Soprano::Statement& partial) const;
    int                     statementCount () const;
    bool                    isEmpty () const;
    Soprano::Node           createBlankNode ();
};   // SparqlModel

};   // Client

};   // Soprano


