//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KSelectAction : KAction
{
%TypeHeaderCode
#include <kselectaction.h>
%End


public:
                         KSelectAction (QObject* /TransferThis/);
                         KSelectAction (const QString&, QObject* /TransferThis/);
                         KSelectAction (const KIcon&, const QString&, QObject* /TransferThis/);

    enum ToolBarMode
    {
        MenuMode, 
        ComboBoxMode
    };

    KSelectAction::ToolBarMode toolBarMode () const;
    void                 setToolBarMode (KSelectAction::ToolBarMode);
    QToolButton::ToolButtonPopupMode toolButtonPopupMode () const;
    void                 setToolButtonPopupMode (QToolButton::ToolButtonPopupMode);
    QActionGroup*        selectableActionGroup () const;
    QAction*             currentAction () const;
    int                  currentItem () const;
    QString              currentText () const;
    QList<QAction*>      actions () const;
    QAction*             action (int) const;
    QAction*             action (const QString&, Qt::CaseSensitivity = Qt::CaseSensitive ) const;
    bool                 setCurrentAction (QAction*);
    bool                 setCurrentItem (int);
    bool                 setCurrentAction (const QString&, Qt::CaseSensitivity = Qt::CaseSensitive );
    virtual void         addAction (QAction*);
    KAction*             addAction (const QString&);
    KAction*             addAction (const KIcon&, const QString&);
    virtual QAction*     removeAction (QAction*);
    void                 setItems (const QStringList&);
    QStringList          items () const;
    bool                 isEditable () const;
    void                 setEditable (bool);
    int                  comboWidth () const;
    void                 setComboWidth (int);
    void                 setMaxComboViewCount (int);
    void                 clear ();
    void                 removeAllActions ();
    void                 setMenuAccelsEnabled (bool);
    bool                 menuAccelsEnabled () const;
    void                 changeItem (int, const QString&);

signals:
    void                 triggered (QAction*);
    void                 triggered (int);
    void                 triggered (const QString&);

protected slots:
    virtual void         actionTriggered (QAction*);
    void                 slotToggled (bool);

protected:
    virtual QWidget*     createWidget (QWidget* /Transfer/);

    virtual void         deleteWidget (QWidget*);

    virtual bool         eventFilter (QObject*, QEvent*);


//mt  undefined symbol: KSelectActionPrivate& -- need mapped type?
//mt                          KSelectAction (KSelectActionPrivate&, QObject* /TransferThis/);


};  // class KSelectAction

