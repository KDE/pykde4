//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.



namespace KIO
{

class Connection : QObject
{
%TypeHeaderCode
#include <connection.h>
%End


public:
    explicit                Connection (QObject* parent /TransferThis/ = 0);
    void                    connectToRemote (const QString& address);
    void                    close ();
    QString                 errorString () const;
    bool                    isConnected () const;
    bool                    inited () const;
    bool                    send (int cmd, const QByteArray& arr = QByteArray());
    bool                    sendnow (int _cmd, const QByteArray& data);
    bool                    hasTaskAvailable () const;
    bool                    waitForIncomingTask (int ms = 30000);
//ig     int                read (int* _cmd, QByteArray& data);
    void                    suspend ();
    void                    resume ();
    bool                    suspended () const;

signals:
    void                    readyRead ();
};   // Connection


class ConnectionServer : QObject
{
%TypeHeaderCode
#include <connection.h>
%End


public:
                            ConnectionServer (QObject* parent /TransferThis/ = 0);
    void                    listenForRemote ();
    bool                    isListening () const;
    void                    close ();
    QString                 address () const;
    KIO::Connection*        nextPendingConnection ();
    void                    setNextPendingConnection (KIO::Connection* conn);

signals:
    void                    newConnection ();
};   // ConnectionServer

};   // KIO




