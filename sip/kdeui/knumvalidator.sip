//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KIntValidator : QValidator
{
%TypeHeaderCode
#include <knumvalidator.h>
%End


public:
    explicit                KIntValidator (QWidget* parent /TransferThis/, int base = 10);
                            KIntValidator (int bottom, int top, QWidget* parent /TransferThis/, int base = 10);
    virtual QValidator::State validate(QString & /In,Out/, int & /In,Out/) const = 0 /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const = 0 /API=QString: - 2/;
    virtual void fixup(QString &input /In,Out/) const /API=QString:2 - /;
    virtual void fixup(QString & /Constrained/) const /API=QString: - 2/;
    virtual void            setRange (int bottom, int top);
    virtual void            setBase (int base);
    virtual int             bottom () const;
    virtual int             top () const;
    virtual int             base () const;
    ~KIntValidator ();
};
// KIntValidator


class KFloatValidator : QValidator
{
%TypeHeaderCode
#include <knumvalidator.h>
%End


public:
    explicit                KFloatValidator (QWidget* parent /TransferThis/);
                            KFloatValidator (double bottom, double top, QWidget* parent /TransferThis/);
                            KFloatValidator (double bottom, double top, bool localeAware, QWidget* parent /TransferThis/);
    virtual QValidator::State validate(QString & /In,Out/, int & /In,Out/) const = 0 /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const = 0 /API=QString: - 2/;
    virtual void fixup(QString &input /In,Out/) const /API=QString:2 - /;
    virtual void fixup(QString & /Constrained/) const /API=QString: - 2/;
    virtual void            setRange (double bottom, double top);
    virtual double          bottom () const;
    virtual double          top () const;
    void                    setAcceptLocalizedNumbers (bool b);
    bool                    acceptLocalizedNumbers () const;
    ~KFloatValidator ();
};
// KFloatValidator


class KDoubleValidator : QDoubleValidator
{
%TypeHeaderCode
#include <knumvalidator.h>
%End


public:
    explicit                KDoubleValidator (QObject* parent /TransferThis/);
                            KDoubleValidator (double bottom, double top, int decimals, QObject* parent /TransferThis/);
    virtual QValidator::State validate(QString & /In,Out/, int & /In,Out/) const = 0 /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const = 0 /API=QString: - 2/;
    bool                    acceptLocalizedNumbers () const;
    void                    setAcceptLocalizedNumbers (bool accept);
    ~KDoubleValidator ();
};
// KDoubleValidator


