//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KConfig : KConfigBase
{
%TypeHeaderCode
#include <kconfig.h>
%End


public:

    enum OpenFlags
    {
        NoGlobals, 
        OnlyLocal, 
        IncludeGlobals
    };

                         KConfig (const QString& = QString (), KConfig::OpenFlags = KConfig::IncludeGlobals );
                         KConfig (const char*, const QString&, KConfig::OpenFlags = KConfig::IncludeGlobals );
                         KConfig (const KComponentData&, const QString& = QString (), KConfig::OpenFlags = KConfig::IncludeGlobals , const char* = "config");
                         KConfig (KConfigBackEnd*);
    QStringList          extraConfigFiles () const;
    void                 setExtraConfigFiles (const QStringList&);
    void                 removeAllExtraConfigFiles ();
    virtual void         rollback (bool = 1);
    virtual QStringList  groupList () const;
    virtual QMap<QString, QString> entryMap (const QString&) const;
    virtual void         reparseConfiguration ();
    void                 setFileWriteMode (int);
    void                 setForceGlobal (bool);
    bool                 forceGlobal () const;
    void                 checkUpdate (const QString&, const QString&);
    KConfig*             copyTo (const QString&, KConfig* = 0) const;

    bool                 setLocale (const QString&);
    QString              locale () const;

    KLockFile::Ptr       lockFile (bool = 0);
    QString              group () const;
    KConfigGroup         group (const char*);
    KConfigGroup         group (const QByteArray&);
    KConfigGroup         group (const QString&);

protected:
    virtual void         putData (const KEntryKey&, const KEntry&, bool = 1);
    virtual KEntry       lookupData (const KEntryKey&) const;

private:
                         KConfig (const QString&, bool);
                         KConfig (const KConfig&);

protected:
    virtual bool         internalHasGroup (const QByteArray&) const;
    virtual KEntryMap    internalEntryMap (const QString&) const;
    virtual KEntryMap    internalEntryMap () const;
//igx     virtual void         virtual_hook (int, void*);

};  // class KConfig

