//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KSelectionOwner : QObject
{
%TypeHeaderCode
#include <kmanagerselection.h>
%End


public:
                         KSelectionOwner (Atom, int = -1, QObject* /TransferThis/ = 0);
                         KSelectionOwner (const char*, int = -1, QObject* /TransferThis/ = 0);
    bool                 claim (bool, bool = 1);
    void                 release ();
    Window               ownerWindow () const;
//ig     bool                 filterEvent (XEvent*);

signals:
    void                 lostOwnership ();

protected:
//ig     virtual bool         handleMessage (XEvent*);
    virtual bool         genericReply (Atom, Atom, Window);
    virtual void         replyTargets (Atom, Window);
    virtual void         getAtoms ();
    void                 setData (long, long);

};  // class KSelectionOwner


class KSelectionWatcher : QObject
{
%TypeHeaderCode
#include <kmanagerselection.h>
%End


public:
                         KSelectionWatcher (Atom, int = -1, QObject* /TransferThis/ = 0);
                         KSelectionWatcher (const char*, int = -1, QObject* /TransferThis/ = 0);
    Window               owner ();
//ig     void                 filterEvent (XEvent*);

signals:
    void                 newOwner (Window);
    void                 lostOwner ();

};  // class KSelectionWatcher

