//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdefx  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
#include <kimageeffect.h>
%End

namespace KImageEffect
{

enum GradientType
{
    VerticalGradient, 
    HorizontalGradient, 
    DiagonalGradient, 
    CrossDiagonalGradient, 
    PyramidGradient, 
    RectangleGradient, 
    PipeCrossGradient, 
    EllipticGradient
};


enum RGBComponent
{
    Red, 
    Green, 
    Blue, 
    Gray, 
    All
};


enum Lighting
{
    NorthLite, 
    NWLite, 
    WestLite, 
    SWLite, 
    SouthLite, 
    SELite, 
    EastLite, 
    NELite
};


enum ModulationType
{
    Intensity, 
    Saturation, 
    HueShift, 
    Contrast
};


enum NoiseType
{
    UniformNoise, 
    GaussianNoise, 
    MultiplicativeGaussianNoise, 
    ImpulseNoise, 
    LaplacianNoise, 
    PoissonNoise
};


enum RotateDirection
{
    Rotate90, 
    Rotate180, 
    Rotate270
};


enum BumpmapType
{
    Linear, 
    Spherical, 
    Sinuosidal
};

QImage               gradient (const QSize&, const QColor&, const QColor&, KImageEffect::GradientType, int = 3);
QImage               unbalancedGradient (const QSize&, const QColor&, const QColor&, KImageEffect::GradientType, int = 100, int = 100, int = 3);
QImage&              blend (const QColor&, QImage&, float);
QImage&              blend (QImage&, QImage&, float);
QImage&              blend (QImage&, float, const QColor&, KImageEffect::GradientType, bool = 0);
QImage&              blend (QImage&, QImage&, KImageEffect::GradientType, int = 100, int = 100);
QImage&              blend (QImage&, QImage&, QImage&, KImageEffect::RGBComponent);
bool                 blend (const QImage&, const QImage&, QImage&);
bool                 blend (int& /In, Out/, int& /In, Out/, const QImage&, const QImage&, QImage&);
bool                 blendOnLower (int, int, const QImage&, const QImage&);
void                 blendOnLower (const QImage&, const QPoint&, QImage&, const QRect&);
void                 blendOnLower (const QImage&, const QPoint&, QImage&, const QRect&, float);

enum Disposition
{
    NoImage, 
    Centered, 
    Tiled, 
    CenterTiled, 
    CenteredMaxpect, 
    TiledMaxpect, 
    Scaled, 
    CenteredAutoFit
};

QRect                computeDestinationRect (const QSize&, KImageEffect::Disposition, QImage&);
void                 blendOnLower (QImage&, QImage&, KImageEffect::Disposition, float);
QImage&              channelIntensity (QImage&, float, KImageEffect::RGBComponent);
QImage&              fade (QImage&, float, const QColor&);
QImage&              flatten (QImage&, const QColor&, const QColor&, int = 0);
QImage&              hash (QImage&, KImageEffect::Lighting = KImageEffect::NorthLite , uint = 0);
QImage&              intensity (QImage&, float);
QImage&              modulate (QImage&, QImage&, bool, KImageEffect::ModulationType, int, KImageEffect::RGBComponent);
QImage&              toGray (QImage&, bool = 0);
QImage&              desaturate (QImage&, float = 0.3);
QImage&              contrast (QImage&, int);
QImage&              dither (QImage&, const QColor*, int);
QImage&              selectedImage (QImage&, const QColor&);
void                 contrastHSV (QImage&, bool = 1);
void                 normalize (QImage&);
void                 equalize (QImage&);
void                 threshold (QImage&, uint = 128);
void                 solarize (QImage&, double = 50.0);
QImage               emboss (QImage&, double, double);
QImage               emboss (QImage&);
QImage               despeckle (QImage&);
QImage               charcoal (QImage&, double, double);
QImage               charcoal (QImage&, double = 50.0);
QImage               rotate (QImage&, KImageEffect::RotateDirection);
QImage               sample (QImage&, int, int);
QImage               addNoise (QImage&, KImageEffect::NoiseType = KImageEffect::GaussianNoise );
QImage               blur (QImage&, double, double);
QImage               blur (QImage&, double = 50.0);
QImage               edge (QImage&, double);
QImage               implode (QImage&, double = 30.0, uint = 4294967295);
QImage               oilPaintConvolve (QImage&, double);
QImage               oilPaint (QImage&, int = 3);
QImage               sharpen (QImage&, double, double);
QImage               sharpen (QImage&, double = 30.0);
QImage               spread (QImage&, uint = 3);
QImage               shade (QImage&, bool = 1, double = 30.0, double = 30.0);
QImage               swirl (QImage&, double = 50.0, uint = 4294967295);
QImage               wave (QImage&, double = 25.0, double = 150.0, uint = 4294967295);
QImage               bumpmap (QImage&, QImage&, double, double, int, int, int, int, int, bool, bool, KImageEffect::BumpmapType, bool);
};  // namespace KImageEffect

