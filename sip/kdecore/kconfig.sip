//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KConfig : KConfigBase
{
%TypeHeaderCode
#include <kconfig.h>
%End


public:


    enum OpenFlag
    {
        IncludeGlobals, 
        CascadeConfig, 
        SimpleConfig, 
        NoCascade, 
        NoGlobals, 
        FullConfig
    };


    typedef QFlags<KConfig::OpenFlag> OpenFlags;
                         KConfig (const QString& = QString (), KConfig::OpenFlags = KConfig::FullConfig , const char* = "config");
                         KConfig (const KComponentData&, const QString& = QString (), KConfig::OpenFlags = KConfig::IncludeGlobals , const char* = "config");
    const KComponentData& componentData () const;
    QString              name () const;

    void                 sync ();
    void                 markAsClean ();
    KConfigBase::AccessMode accessMode () const;

    bool                 isConfigWritable (bool);
    KConfig*             copyTo (const QString&, KConfig* = 0) const;
    void                 checkUpdate (const QString&, const QString&);
    void                 reparseConfiguration ();
    void                 addConfigSources (const QStringList&);
    QString              locale () const;
    bool                 setLocale (const QString&);
    void                 setReadDefaults (bool);
    bool                 readDefaults () const;
    bool                 isImmutable () const;
//ig     void                 setForceGlobal (bool);
//ig     bool                 forceGlobal () const;

    QStringList          groupList () const;

    QMap<QString, QString> entryMap (const QString& = QString ()) const;

protected:
    virtual bool         hasGroupImpl (const QByteArray&) const;
    virtual KConfigGroup groupImpl (const QByteArray&);
    virtual void         deleteGroupImpl (const QByteArray&, KConfigBase::WriteConfigFlags = KConfigBase::Normal );

    virtual bool         isGroupImmutableImpl (const QByteArray&) const;

//igx     virtual void         virtual_hook (int, void*);


//mt  undefined symbol: KConfigPrivate& -- need mapped type?
//mt                          KConfig (KConfigPrivate&);


private:
                         KConfig (const KConfig&);

public:



protected:



};  // class KConfig

