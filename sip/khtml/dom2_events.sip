//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module khtml  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
//ctscc
#include <dom2_events.h>
%End

namespace DOM
{

class EventListener : DOM::DomShared
{
%TypeHeaderCode
#include <dom2_events.h>
%End


public:
                         EventListener ();
    virtual void         handleEvent (DOM::Event&);
    virtual DOM::DOMString eventListenerType ();

protected:

};  // class EventListener


class Event
{
%TypeHeaderCode
#include <dom2_events.h>
%End


public:
                         Event ();
                         Event (const DOM::Event&);

    enum PhaseType
    {
        CAPTURING_PHASE, 
        AT_TARGET, 
        BUBBLING_PHASE
    };

    DOM::DOMString       type () const;
    DOM::Node            target () const;
    DOM::Node            currentTarget () const;
    ushort               eventPhase () const;
    bool                 bubbles () const;
    bool                 cancelable () const;
    DOMTimeStamp         timeStamp () const;
    void                 stopPropagation ();
    void                 preventDefault ();
    void                 initEvent (const DOM::DOMString&, bool, bool);
//ig     EventImpl*           handle () const;
    bool                 isNull () const;

protected:
//ig                          Event (EventImpl*);

public:
//force
    typedef qlonglong DOMTimeStamp;

// Subclasses for DOM::Event

public:
%ConvertToSubClassCode

    if (dynamic_cast<DOM::UIEvent*>(sipCpp))
    {
        sipClass = sipClass_DOM_UIEvent;
        if (dynamic_cast<DOM::KeyboardEvent*>(sipCpp))
            sipClass = sipClass_DOM_KeyboardEvent;
        else if (dynamic_cast<DOM::MouseEvent*>(sipCpp))
            sipClass = sipClass_DOM_MouseEvent;
        else if (dynamic_cast<DOM::TextEvent*>(sipCpp))
            sipClass = sipClass_DOM_TextEvent;
    }
    else if (dynamic_cast<DOM::MutationEvent*>(sipCpp))
        sipClass = sipClass_DOM_MutationEvent;
    else
        sipClass = NULL;
%End

//end


};  // class Event


class EventException
{
%TypeHeaderCode
#include <dom2_events.h>
%End


public:
                         EventException (ushort);
                         EventException (const DOM::EventException&);

    enum EventExceptionCode
    {
        UNSPECIFIED_EVENT_TYPE_ERR, 
        _EXCEPTION_OFFSET, 
        _EXCEPTION_MAX
    };

    ushort               code;

};  // class EventException


class UIEvent : DOM::Event
{
%TypeHeaderCode
#include <dom2_events.h>
%End


public:
                         UIEvent ();
                         UIEvent (const DOM::UIEvent&);
                         UIEvent (const DOM::Event&);
    DOM::AbstractView    view () const;
    long                 detail () const;
    int                  keyCode () const;
    int                  charCode () const;
    int                  pageX () const;
    int                  pageY () const;
    int                  layerX () const;
    int                  layerY () const;
    int                  which () const;
    void                 initUIEvent (const DOM::DOMString&, bool, bool, const DOM::AbstractView&, long);

protected:
//ig                          UIEvent (UIEventImpl*);

};  // class UIEvent


class MouseEvent : DOM::UIEvent
{
%TypeHeaderCode
#include <dom2_events.h>
%End


public:
                         MouseEvent ();
                         MouseEvent (const DOM::MouseEvent&);
                         MouseEvent (const DOM::Event&);
    long                 screenX () const;
    long                 screenY () const;
    long                 clientX () const;
    long                 clientY () const;
    bool                 ctrlKey () const;
    bool                 shiftKey () const;
    bool                 altKey () const;
    bool                 metaKey () const;
    ushort               button () const;
    DOM::Node            relatedTarget () const;
    void                 initMouseEvent (const DOM::DOMString&, bool, bool, const DOM::AbstractView&, long, long, long, long, long, bool, bool, bool, bool, ushort, const DOM::Node&);

protected:
//ig                          MouseEvent (MouseEventImpl*);

};  // class MouseEvent


class TextEvent : DOM::UIEvent
{
%TypeHeaderCode
#include <dom2_events.h>
%End


public:
                         TextEvent ();
                         TextEvent (const DOM::TextEvent&);
                         TextEvent (const DOM::Event&);
    void                 initTextEvent (const DOM::DOMString&, bool, bool, const DOM::AbstractView&, const DOM::DOMString&);
//ig     DOM::DOMString       data () const;

};  // class TextEvent


class KeyboardEvent : DOM::UIEvent
{
%TypeHeaderCode
#include <dom2_events.h>
%End


public:
                         KeyboardEvent ();
                         KeyboardEvent (const DOM::KeyboardEvent&);
                         KeyboardEvent (const DOM::Event&);

    enum KeyLocation
    {
        DOM_KEY_LOCATION_STANDARD, 
        DOM_KEY_LOCATION_LEFT, 
        DOM_KEY_LOCATION_RIGHT, 
        DOM_KEY_LOCATION_NUMPAD
    };

    DOM::DOMString       keyIdentifier () const;
    ulong                keyLocation () const;
    bool                 ctrlKey () const;
    bool                 shiftKey () const;
    bool                 altKey () const;
    bool                 metaKey () const;
    bool                 getModifierState (DOM::DOMString) const;
    void                 initKeyboardEvent (DOM::DOMString, bool, bool, DOM::AbstractView, DOM::DOMString, ulong, DOM::DOMString);

};  // class KeyboardEvent


class MutationEvent : DOM::Event
{
%TypeHeaderCode
#include <dom2_events.h>
%End


public:
                         MutationEvent ();
                         MutationEvent (const DOM::MutationEvent&);
                         MutationEvent (const DOM::Event&);

    enum attrChangeType
    {
        MODIFICATION, 
        ADDITION, 
        REMOVAL
    };

    DOM::Node            relatedNode () const;
    DOM::DOMString       prevValue () const;
    DOM::DOMString       newValue () const;
    DOM::DOMString       attrName () const;
    ushort               attrChange () const;
    void                 initMutationEvent (const DOM::DOMString&, bool, bool, const DOM::Node&, const DOM::DOMString&, const DOM::DOMString&, const DOM::DOMString&, ushort);

protected:
//ig                          MutationEvent (MutationEventImpl*);

};  // class MutationEvent

};  // namespace DOM

