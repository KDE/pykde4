//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdecore  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KLocale
{
%TypeHeaderCode
#include <klocale.h>
%End


public:
                         KLocale (const QString&, KSharedConfig::Ptr = KSharedConfig::Ptr ());
                         KLocale (const QString&, const QString&, const QString& = QString (), KConfig* = 0);
//ig                          KLocale (const KLocale&);
    void                 translateRaw (const char*, QString*, QString*) const;
    void                 translateRaw (const char*, const char*, QString*, QString*) const;
    void                 translateRaw (const char*, const char*, ulong, QString*, QString*) const;
    void                 translateRaw (const char*, const char*, const char*, ulong, QString*, QString*) const;
    bool                 setEncoding (int);

    enum SignPosition
    {
        ParensAround, 
        BeforeQuantityMoney, 
        AfterQuantityMoney, 
        BeforeMoney, 
        AfterMoney
    };

    QString              decimalSymbol () const;
    QString              thousandsSeparator () const;
    QString              currencySymbol () const;
    QString              monetaryDecimalSymbol () const;
    QString              monetaryThousandsSeparator () const;
    QString              positiveSign () const;
    QString              negativeSign () const;
    int                  fracDigits () const;
    bool                 positivePrefixCurrencySymbol () const;
    bool                 negativePrefixCurrencySymbol () const;
    SignPosition         positiveMonetarySignPosition () const;
    SignPosition         negativeMonetarySignPosition () const;
    QString              formatMoney (double, const QString& = QString::null , int = -1) const;
    QString              formatNumber (double, int = -1) const;
    QString              formatNumber (const QString&, bool, int) const;
    QString              formatLong (long) const;
    QString              formatByteSize (double) const;
    QString              formatDuration (ulong) const;
    bool                 nounDeclension () const;

    enum DateFormat
    {
        ShortDate, 
        LongDate, 
        FancyShortDate, 
        FancyLongDate
    };

    QString              formatDate (const QDate&, KLocale::DateFormat = KLocale::LongDate ) const;
    QString              formatDateTime (const QDateTime&, KLocale::DateFormat = KLocale::ShortDate , bool = 0) const;

    enum DateTimeFormatOption
    {
        TimeZone, 
        Seconds
    };

    typedef QFlags<KLocale::DateTimeFormatOption> DateTimeFormatOptions;
    QString              formatDateTime (const KDateTime&, KLocale::DateFormat = KLocale::ShortDate , KLocale::DateTimeFormatOptions = 0) const;
    bool                 dateMonthNamePossessive () const;
    QString              formatTime (const QTime&, bool, bool) const;
    bool                 use12Clock () const;
    int                  weekStartDay () const;
    const KCalendarSystem* calendar () const;
    QString              calendarType () const;
    void                 setCalendar (const QString&);
    double               readMoney (const QString&, bool* /Out/) const;
    double               readNumber (const QString&, bool* /Out/) const;
    QDate                readDate (const QString&, bool* /Out/) const;
    QDate                readDate (const QString&, const QString&, bool* /Out/) const;

    enum ReadDateFlags
    {
        NormalFormat, 
        ShortFormat
    };

    QDate                readDate (const QString&, KLocale::ReadDateFlags, bool* /Out/) const;
    QTime                readTime (const QString&, bool* /Out/) const;

    enum ReadTimeFlags
    {
        WithSeconds, 
        WithoutSeconds
    };

    QTime                readTime (const QString&, KLocale::ReadTimeFlags, bool* /Out/) const;
    QString              language () const;
    QString              country () const;
    QStringList          languageList () const;
    const QByteArray     encoding () const;
    int                  encodingMib () const;
    QTextCodec*          codecForEncoding () const;
    int                  fileEncodingMib () const;
    void                 setDateFormat (const QString&);
    void                 setDateFormatShort (const QString&);
    void                 setDateMonthNamePossessive (bool);
    void                 setTimeFormat (const QString&);
    void                 setWeekStartDay (int);
    QString              dateFormat () const;
    QString              dateFormatShort () const;
    QString              timeFormat () const;
    void                 setDecimalSymbol (const QString&);
    void                 setThousandsSeparator (const QString&);
    void                 setPositiveSign (const QString&);
    void                 setNegativeSign (const QString&);
    void                 setPositiveMonetarySignPosition (KLocale::SignPosition);
    void                 setNegativeMonetarySignPosition (KLocale::SignPosition);
    void                 setPositivePrefixCurrencySymbol (bool);
    void                 setNegativePrefixCurrencySymbol (bool);
    void                 setFracDigits (int);
    void                 setMonetaryThousandsSeparator (const QString&);
    void                 setMonetaryDecimalSymbol (const QString&);
    void                 setCurrencySymbol (const QString&);
    int                  pageSize () const;
    void                 setPageSize (int);

    enum MeasureSystem
    {
        Metric, 
        Imperial
    };

    KLocale::MeasureSystem measureSystem () const;
    void                 setMeasureSystem (KLocale::MeasureSystem);
    void                 insertCatalog (const QString&);
    void                 removeCatalog (const QString&);
    void                 setActiveCatalog (const QString&);
    QString              translateQt (const char*, const char*, const char*) const;
    QStringList          allLanguagesList () const;
    QString              languageCodeToName (const QString&) const;
    QStringList          allCountriesList () const;
    QString              countryCodeToName (const QString&) const;
    static void          splitLocale (const QString&, QString&, QString&, QString&, QString&);
    static void          setMainCatalog (const char*);
    static QString       langLookup (const QString&, const char* = "html");
    static QString       defaultLanguage ();
    static QString       defaultCountry ();
    bool                 useTranscript () const;
    bool                 isApplicationTranslatedInto (const QString&);

    void                 copyCatalogsTo (KLocale*);


protected:
    bool                 setCountry (const QString&, KConfig*);
    bool                 setLanguage (const QString&, KConfig*);
    bool                 setLanguage (const QStringList&);

public:


//force

private:
                         KLocale (const KLocale&);
//end


};  // class KLocale

