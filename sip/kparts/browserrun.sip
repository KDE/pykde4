//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kparts  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace KParts
{

class BrowserRun : KRun
{
%TypeHeaderCode
#include <browserrun.h>
%End


public:

                         BrowserRun (const KUrl&, const KParts::OpenUrlArguments&, const KParts::BrowserArguments&, KParts::ReadOnlyPart*, QWidget*, bool, bool, bool = 0);
    KParts::OpenUrlArguments& arguments ();
    KParts::BrowserArguments& browserArguments ();
    KParts::ReadOnlyPart* part () const;

    KUrl                 url () const;
    bool                 hideErrorDialog () const;

    enum AskSaveResult
    {
        Save, 
        Open, 
        Cancel
    };

    static KParts::BrowserRun::AskSaveResult askSave (const KUrl&, KService::Ptr, const QString&, const QString& = QString ());
    static KParts::BrowserRun::AskSaveResult askEmbedOrSave (const KUrl&, const QString&, const QString& = QString (), int = 0);
    virtual void         save (const KUrl&, const QString&);
    static void          simpleSave (const KUrl&, const QString&, QWidget* = 0);
    static bool          allowExecution (const QString&, const KUrl&);
    static bool          isTextExecutable (const QString&);

protected:
    virtual void         scanFile ();
    virtual void         init ();
    virtual void         handleError (KJob*);

//ig     enum NonEmbeddableResult {Handled, NotHandled, Delayed};

//ig     KParts::BrowserRun::NonEmbeddableResult handleNonEmbeddable (const QString&);

protected slots:
    void                 slotBrowserScanFinished (KJob*);
    void                 slotBrowserMimetype (KIO::Job*, const QString&);
    void                 slotCopyToTempFileResult (KJob*);
    virtual void         slotStatResult (KJob*);

public:



};  // class BrowserRun

};  // namespace KParts

