//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace DOM
{

class HTMLDListElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_list.h>
%End


public:
                            HTMLDListElement ();
                            HTMLDListElement (const DOM::HTMLDListElement& other);
                            HTMLDListElement (const DOM::Node& other);

protected:
//ig                            HTMLDListElement (HTMLDListElementImpl* impl);

public:
    bool                    compact () const;
    void                    setCompact (bool);
    ~HTMLDListElement ();
};
// HTMLDListElement


class HTMLDirectoryElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_list.h>
%End


public:
                            HTMLDirectoryElement ();
                            HTMLDirectoryElement (const DOM::HTMLDirectoryElement& other);
                            HTMLDirectoryElement (const DOM::Node& other);

protected:
//ig                            HTMLDirectoryElement (HTMLDirectoryElementImpl* impl);

public:
    bool                    compact () const;
    void                    setCompact (bool);
    ~HTMLDirectoryElement ();
};
// HTMLDirectoryElement


class HTMLLIElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_list.h>
%End


public:
                            HTMLLIElement ();
                            HTMLLIElement (const DOM::HTMLLIElement& other);
                            HTMLLIElement (const DOM::Node& other);

protected:
//ig                            HTMLLIElement (HTMLLIElementImpl* impl);

public:
    DOM::DOMString          type () const;
    void                    setType (const DOM::DOMString&);
    long                    value () const;
    void                    setValue (long);
    ~HTMLLIElement ();
};
// HTMLLIElement


class HTMLMenuElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_list.h>
%End


public:
                            HTMLMenuElement ();
                            HTMLMenuElement (const DOM::HTMLMenuElement& other);
                            HTMLMenuElement (const DOM::Node& other);

protected:
//ig                            HTMLMenuElement (HTMLMenuElementImpl* impl);

public:
    bool                    compact () const;
    void                    setCompact (bool);
    ~HTMLMenuElement ();
};
// HTMLMenuElement


class HTMLOListElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_list.h>
%End


public:
                            HTMLOListElement ();
                            HTMLOListElement (const DOM::HTMLOListElement& other);
                            HTMLOListElement (const DOM::Node& other);

protected:
//ig                            HTMLOListElement (HTMLOListElementImpl* impl);

public:
    bool                    compact () const;
    void                    setCompact (bool);
    long                    start () const;
    void                    setStart (long);
    DOM::DOMString          type () const;
    void                    setType (const DOM::DOMString&);
    ~HTMLOListElement ();
};
// HTMLOListElement


class HTMLUListElement : DOM::HTMLElement
{
%TypeHeaderCode
#include <html_list.h>
%End


public:
                            HTMLUListElement ();
                            HTMLUListElement (const DOM::HTMLUListElement& other);
                            HTMLUListElement (const DOM::Node& other);

protected:
//ig                            HTMLUListElement (HTMLUListElementImpl* impl);

public:
    bool                    compact () const;
    void                    setCompact (bool);
    DOM::DOMString          type () const;
    void                    setType (const DOM::DOMString&);
    ~HTMLUListElement ();
};
// HTMLUListElement

};
// DOM


