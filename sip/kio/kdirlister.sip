//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KDirLister : QObject
{
%TypeHeaderCode
#include <kdirlister.h>
%End


public:
                         KDirLister (QObject* /TransferThis/ = 0);
    virtual bool         openUrl (const KUrl&, bool = 0, bool = 0);
    virtual void         stop ();
    virtual void         stop (const KUrl&);
    bool                 delayedMimeTypes () const;
    void                 setDelayedMimeTypes (bool);
    bool                 autoUpdate () const;
    virtual void         setAutoUpdate (bool);
    bool                 autoErrorHandlingEnabled () const;
    void                 setAutoErrorHandlingEnabled (bool, QWidget* /Transfer/);
    bool                 showingDotFiles () const;
    virtual void         setShowingDotFiles (bool);
    bool                 dirOnlyMode () const;
    virtual void         setDirOnlyMode (bool);
    KUrl                 url () const;
    KUrl::List           directories () const;
    virtual void         emitChanges ();
    virtual void         updateDirectory (const KUrl&);
    bool                 isFinished () const;
    KFileItem*           rootItem () const;
    virtual KFileItem*   findByUrl (const KUrl&) const;
    virtual KFileItem*   findByName (const QString&) const;
    virtual void         setNameFilter (const QString&);
    QString              nameFilter () const;
    virtual void         setMimeFilter (const QStringList&);
    void                 setMimeExcludeFilter (const QStringList&);
    virtual void         clearMimeFilter ();
    QStringList          mimeFilters () const;
    bool                 matchesFilter (const QString&) const;
    bool                 matchesMimeFilter (const QString&) const;
    void                 setMainWindow (QWidget*);
    QWidget*             mainWindow ();

    enum WhichItems
    {
        AllItems, 
        FilteredItems
    };

    KFileItemList        items (KDirLister::WhichItems = FilteredItems ) const;
    KFileItemList        itemsForDir (const KUrl&, KDirLister::WhichItems = KDirLister::FilteredItems ) const;

signals:
    void                 started (const KUrl&);
    void                 completed ();
    void                 completed (const KUrl&);
    void                 canceled ();
    void                 canceled (const KUrl&);
    void                 redirection (const KUrl&);
    void                 redirection (const KUrl&, const KUrl&);
    void                 clear ();
    void                 clear (const KUrl&);
    void                 newItems (const KFileItemList&);

    void                 newItems (const QList<KFileItem>&);

    void                 itemsFilteredByMime (const KFileItemList&);

    void                 itemsFilteredByMime (const QList<KFileItem>&);

    void                 deleteItem (KFileItem*);

    void                 deleteItem (KFileItem);

    void                 refreshItems (const KFileItemList&);

    void                 refreshItems (const QList<KFileItem>&);

    void                 infoMessage (const QString&);
    void                 percent (int);
    void                 totalSize (KIO::filesize_t);
    void                 processedSize (KIO::filesize_t);
    void                 speed (int);

protected:

    enum Changes
    {
        NONE, 
        NAME_FILTER, 
        MIME_FILTER, 
        DOT_FILES, 
        DIR_ONLY_MODE
    };

    virtual bool         matchesFilter (const KFileItem*) const;
    virtual bool         matchesMimeFilter (const KFileItem*) const;
    virtual bool         doNameFilter (const QString&, const QList<QRegExp>&) const;
    virtual bool         doMimeFilter (const QString&, const QStringList&) const;
    virtual void         handleError (KIO::Job*);

};  // class KDirLister

