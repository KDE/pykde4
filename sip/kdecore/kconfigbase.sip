//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine
//            PyKDE4 module kdecore  version KDE 4.0.2

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KConfigBase /Abstract/
{
%TypeHeaderCode
#include <kconfigbase.h>
%End


public:

    enum WriteConfigFlag
    {
        Persistent,
        Global,
        Localized,
        Normal
    };

    typedef QFlags<KConfigBase::WriteConfigFlag> WriteConfigFlags;

    virtual QStringList     groupList () const = 0;
    bool                    hasGroup (const QString& group) const;
    bool                    hasGroup (const char* group) const;
    bool                    hasGroup (const QByteArray& group) const;
    KConfigGroup            group (const QByteArray& group);
    KConfigGroup            group (const QString& group);
    KConfigGroup            group (const char* group);
//ig     const KConfigGroup  group (const QByteArray& group) const;
//ig     const KConfigGroup  group (const QString& group) const;
//ig     const KConfigGroup  group (const char* group) const;
    void                    deleteGroup (const QByteArray& group, KConfigBase::WriteConfigFlags flags = KConfigBase::Normal);
    void                    deleteGroup (const QString& group, KConfigBase::WriteConfigFlags flags = KConfigBase::Normal);
    void                    deleteGroup (const char* group, KConfigBase::WriteConfigFlags flags = KConfigBase::Normal);
    virtual void            sync () = 0;
    virtual void            markAsClean () = 0;

    enum AccessMode
    {
        NoAccess,
        ReadOnly,
        ReadWrite
    };

    virtual KConfigBase::AccessMode  accessMode () const = 0;
    virtual bool            isImmutable () const = 0;
    bool                    isGroupImmutable (const QByteArray& aGroup) const;
    bool                    isGroupImmutable (const QString& aGroup) const;
    bool                    isGroupImmutable (const char* aGroup) const;

protected:
                            KConfigBase ();
    virtual bool            hasGroupImpl (const QByteArray& group) const = 0;
    virtual KConfigGroup    groupImpl (const QByteArray& b) = 0;
//ig     virtual const KConfigGroup  groupImpl (const QByteArray& b) const = 0;
    virtual void            deleteGroupImpl (const QByteArray& group, KConfigBase::WriteConfigFlags flags = KConfigBase::Normal) = 0;
    virtual bool            isGroupImmutableImpl (const QByteArray& aGroup) const = 0;
//ig     virtual void       virtual_hook (int id, void* data);
};   // KConfigBase


