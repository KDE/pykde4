//
//     Copyright 2008 Simon Edwards <simon@simonzone.com>

//                 Generated by twine
//            PyKDE4 module soprano  version KDE 4.1.0

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


%ModuleHeaderCode
//ctscc
#include <soprano/asyncmodel.h>
#include <soprano/dbusclient.h>
#include <soprano/dbusexportiterator.h>
#include <soprano/dummymodel.h>
#include <soprano/filtermodel.h>
#include <soprano/localsocketclient.h>
#include <soprano/model.h>
#include <soprano/pluginmanager.h>
#include <soprano/readonlymodel.h>
#include <soprano/servercore.h>
#include <soprano/storagemodel.h>
#include <soprano/tcpclient.h>
%End

namespace Soprano
{
namespace Util
{

class AsyncResult : QObject, Soprano::Error::ErrorCache
{
%TypeHeaderCode
#include <soprano/asyncmodel.h>
%End

signals:
    void                    resultReady (Soprano::Util::AsyncResult*);

public:
    QVariant                value () const;
    void                    setResult (const QVariant& result, const Soprano::Error::Error& error);

private:
                            AsyncResult ();

public:

//  Subclasses of QObject

%ConvertToSubClassCode

    sipClass = NULL;

    if (dynamic_cast<Soprano::Util::AsyncResult*>(sipCpp))
        sipClass = sipClass_Soprano_Util_AsyncResult;
    else if (dynamic_cast<Soprano::Client::DBusClient*>(sipCpp))
        sipClass = sipClass_Soprano_Client_DBusClient;
    else if (dynamic_cast<Soprano::Client::DBusClient*>(sipCpp))
        sipClass = sipClass_Soprano_Client_DBusClient;
    else if (dynamic_cast<Soprano::Server::DBusExportIterator*>(sipCpp))
        sipClass = sipClass_Soprano_Server_DBusExportIterator;
    else if (dynamic_cast<Soprano::Server::DBusExportIterator*>(sipCpp))
        sipClass = sipClass_Soprano_Server_DBusExportIterator;
    else if (dynamic_cast<Soprano::Client::LocalSocketClient*>(sipCpp))
        sipClass = sipClass_Soprano_Client_LocalSocketClient;
    else if (dynamic_cast<Soprano::Model*>(sipCpp))
        {
            sipClass = sipClass_Soprano_Model;
            if (dynamic_cast<Soprano::Util::DummyModel*>(sipCpp))
                sipClass = sipClass_Soprano_Util_DummyModel;
            else if (dynamic_cast<Soprano::FilterModel*>(sipCpp))
                sipClass = sipClass_Soprano_FilterModel;
//            else if (dynamic_cast<Soprano::Util::ReadOnlyModel*>(sipCpp))
//                sipClass = sipClass_Soprano_Util_ReadOnlyModel;
            else if (dynamic_cast<Soprano::StorageModel*>(sipCpp))
                sipClass = sipClass_Soprano_StorageModel;
        }
    else if (dynamic_cast<Soprano::PluginManager*>(sipCpp))
        sipClass = sipClass_Soprano_PluginManager;
    else if (dynamic_cast<Soprano::Server::ServerCore*>(sipCpp))
        sipClass = sipClass_Soprano_Server_ServerCore;
    else if (dynamic_cast<Soprano::Client::TcpClient*>(sipCpp))
        sipClass = sipClass_Soprano_Client_TcpClient;
%End

};   // AsyncResult


class AsyncModel : Soprano::FilterModel
{
%TypeHeaderCode
#include <soprano/asyncmodel.h>
%End

public:
                            AsyncModel (Soprano::Model* parent = 0);
    Soprano::Util::AsyncResult*  addStatementAsync (const Soprano::Statement& statement);
    Soprano::Util::AsyncResult*  removeStatementAsync (const Soprano::Statement& statement);
    Soprano::Util::AsyncResult*  removeAllStatementsAsync (const Soprano::Statement& statement);
    Soprano::Util::AsyncResult*  isEmptyAsync () const;
    Soprano::Util::AsyncResult*  statementCountAsync () const;
    Soprano::Util::AsyncResult*  listStatementsAsync (const Soprano::Statement& statement) const;
    Soprano::Util::AsyncResult*  listContextsAsync () const;
    Soprano::Util::AsyncResult*  executeQueryAsync (const QString& query, Soprano::Query::QueryLanguage language, const QString& userQueryLanguage = QString()) const;
    Soprano::Util::AsyncResult*  containsStatementAsync (const Soprano::Statement& statement) const;
    Soprano::Util::AsyncResult*  containsAnyStatementAsync (const Soprano::Statement& statement) const;
    Soprano::Util::AsyncResult*  createBlankNodeAsync ();
};   // AsyncModel

};   // Util

};   // Soprano


