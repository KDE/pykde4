//
//     Copyright 2008 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2007 Jim Bublitz also apply

//                 Generated by twine
//            PyKDE4 module kdeui  version KDE 4.0.2

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.



%ModuleHeaderCode
//ctscc
#include <kconfigskeleton.h>
%End

class KConfigSkeleton : KCoreConfigSkeleton
{
%TypeHeaderCode
#include <kconfigskeleton.h>
%End


public:

    class ItemColor : KConfigSkeletonItem
    {

    public:
                                ItemColor (const QString& _group, const QString& _key, QColor& reference, const QColor& defaultValue = QColor(128,128,128));
        void                    readConfig (KConfig* config);
        void                    setProperty (const QVariant& p);
        bool                    isEqual (const QVariant& p) const;
        QVariant                property () const;

public:

//  Subclasses of KConfigSkeletonItem

%ConvertToSubClassCode

    sipClass = NULL;

    if (dynamic_cast<KConfigSkeleton::ItemColor*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemColor;
    else if (dynamic_cast<KConfigSkeleton::ItemFont*>(sipCpp))
        sipClass = sipClass_KConfigSkeleton_ItemFont;
%End

    };   // ItemColor


public:

    class ItemFont : KConfigSkeletonItem
    {

    public:
                                ItemFont (const QString& _group, const QString& _key, QFont& reference, const QFont& defaultValue = QFont());
        void                    readConfig (KConfig* config);
        void                    setProperty (const QVariant& p);
        bool                    isEqual (const QVariant& p) const;
        QVariant                property () const;
    };   // ItemFont


public:
    explicit                KConfigSkeleton (const QString& configname = QString(), QObject* parent /TransferThis/ = 0);
    explicit                KConfigSkeleton (KSharedConfig::Ptr config, QObject* parent /TransferThis/ = 0);
    KConfigSkeleton::ItemColor*  addItemColor (const QString& name, QColor& reference, const QColor& defaultValue = QColor(128,128,128), const QString& key = QString());
    KConfigSkeleton::ItemFont*  addItemFont (const QString& name, QFont& reference, const QFont& defaultValue = QFont(), const QString& key = QString());
};   // KConfigSkeleton




