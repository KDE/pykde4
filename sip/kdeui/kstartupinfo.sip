//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kdeui  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KStartupInfo : QObject
{
%TypeHeaderCode
#include <kstartupinfo.h>
%End


public:
    static void          disableAutoAppStartedSending (bool = 1);
    static void          appStarted ();
    static void          appStarted (const QByteArray&);
    static void          setNewStartupId (QWidget*, const QByteArray&);
    static void          silenceStartup (bool);
    static QByteArray    createNewStartupId ();

    enum 
    {
        CleanOnCantDetect, 
        DisableKWinModule, 
        AnnounceSilenceChanges
    };

                         KStartupInfo (int, QObject* /TransferThis/ = 0);
    static bool          sendStartup (const KStartupInfoId&, const KStartupInfoData&);
//ig     static bool          sendStartupX (Display*, const KStartupInfoId&, const KStartupInfoData&);
    static bool          sendChange (const KStartupInfoId&, const KStartupInfoData&);
//ig     static bool          sendChangeX (Display*, const KStartupInfoId&, const KStartupInfoData&);
    static bool          sendFinish (const KStartupInfoId&);
//ig     static bool          sendFinishX (Display*, const KStartupInfoId&);
    static bool          sendFinish (const KStartupInfoId&, const KStartupInfoData&);
//ig     static bool          sendFinishX (Display*, const KStartupInfoId&, const KStartupInfoData&);
    static KStartupInfoId currentStartupIdEnv ();
    static void          resetStartupEnv ();

    enum startup_t
    {
        NoMatch, 
        Match, 
        CantDetect
    };

    KStartupInfo::startup_t checkStartup (WId);
    KStartupInfo::startup_t checkStartup (WId, KStartupInfoId&);
    KStartupInfo::startup_t checkStartup (WId, KStartupInfoData&);
    KStartupInfo::startup_t checkStartup (WId, KStartupInfoId&, KStartupInfoData&);
    void                 setTimeout (uint);
    static void          setWindowStartupId (WId, const QByteArray&);
    static QByteArray    windowStartupId (WId);
    static void          handleAutoAppStartedSending ();

signals:
    void                 gotNewStartup (const KStartupInfoId&, const KStartupInfoData&);
    void                 gotStartupChange (const KStartupInfoId&, const KStartupInfoData&);
    void                 gotRemoveStartup (const KStartupInfoId&, const KStartupInfoData&);

protected:
    virtual void         customEvent (QEvent*);

private:
                         KStartupInfo (const KStartupInfo&) [()];

};  // class KStartupInfo


class KStartupInfoId
{
%TypeHeaderCode
#include <kstartupinfo.h>
%End


public:
    bool                 operator == (const KStartupInfoId&) const;
    bool                 operator != (const KStartupInfoId&) const;
    bool                 none () const;
    void                 initId (const QByteArray& = "");
    const QByteArray&    id () const;
    ulong                timestamp () const;
    bool                 setupStartupEnv () const;
                         KStartupInfoId ();
                         KStartupInfoId (const KStartupInfoId&);
    bool                 operator < (const KStartupInfoId&) const;

private:
                         KStartupInfoId (const QString&);

public:
//force
    typedef int pid_t;
//end


};  // class KStartupInfoId


class KStartupInfoData
{
%TypeHeaderCode
#include <kstartupinfo.h>
%End


public:
    void                 setBin (const QString&);
    const QString&       bin () const;
    void                 setName (const QString&);
    const QString&       findName () const;
    const QString&       name () const;
    void                 setDescription (const QString&);
    const QString&       findDescription () const;
    const QString&       description () const;
    void                 setIcon (const QString&);
    const QString&       findIcon () const;
    const QString&       icon () const;
    void                 setDesktop (int);
    int                  desktop () const;
    void                 setWMClass (const QByteArray&);
    const QByteArray     findWMClass () const;
    QByteArray           WMClass () const;
    void                 addPid (pid_t);
//ig     QList<pid_t>         pids () const;
    bool                 is_pid (pid_t) const;
    void                 setHostname (const QByteArray& = QByteArray ());
    QByteArray           hostname () const;

    enum TriState
    {
        Yes, 
        No, 
        Unknown
    };

    void                 setSilent (KStartupInfoData::TriState);
    KStartupInfoData::TriState silent () const;
    void                 setTimestamp (ulong);
    ulong                timestamp () const;
    int                  screen () const;
    void                 setScreen (int);
    int                  xinerama () const;
    void                 setXinerama (int);
    WId                  launchedBy () const;
    void                 setLaunchedBy (WId);
    void                 update (const KStartupInfoData&);
                         KStartupInfoData ();
                         KStartupInfoData (const KStartupInfoData&);

private:
                         KStartupInfoData (const QString&);

public:
//force
    QList<int>           pids () const;
//end


};  // class KStartupInfoData

