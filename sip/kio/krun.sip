//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kio  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


class KRun : QObject
{
%TypeHeaderCode
#include <krun.h>
%End


public:
                         KRun (const KUrl&, QWidget*, mode_t = 0, bool = 0, bool = 1, const QByteArray& = "");
    void                 abort ();
    bool                 hasError () const;
    bool                 hasFinished () const;
    bool                 autoDelete () const;
    void                 setAutoDelete (bool);
    void                 setPreferredService (const QString&);
    void                 setRunExecutables (bool);
    void                 setEnableExternalBrowser (bool);
    void                 setSuggestedFileName (const QString&);
    QString              suggestedFileName () const;
    static bool          run (const KService&, const KUrl::List&, QWidget*, bool = 0, const QString& = QString (), const QByteArray& = "");
    static bool          run (const QString&, const KUrl::List&, QWidget*, const QString& = QString (), const QString& = QString (), const QByteArray& = "");
    static bool          runUrl (const KUrl&, const QString&, QWidget*, bool = 0, bool = 1, const QString& = QString (), const QByteArray& = "");
    static bool          runCommand (const QString&, QWidget*);
    static bool          runCommand (const QString&, const QString&, const QString&, QWidget*, const QByteArray& = "");
    static bool          displayOpenWithDialog (const KUrl::List&, QWidget*, bool = 0, const QString& = QString (), const QByteArray& = "");
    static void          shellQuote (QString&);
    static QStringList   processDesktopExec (const KService&, const KUrl::List&, bool = 0, const QString& = QString ());
    static QString       binaryName (const QString&, bool);
    static bool          isExecutable (const QString&);
    static bool          isExecutableFile (const KUrl&, const QString&);
//ig     static bool          checkStartupNotify (const QString&, const KService*, bool*, QByteArray*);

signals:
    void                 finished ();
    void                 error ();

protected slots:
    void                 slotTimeout ();
    void                 slotScanFinished (KJob*);
    void                 slotScanMimeType (KIO::Job*, const QString&);
    virtual void         slotStatResult (KJob*);

protected:
    virtual void         init ();
    virtual void         scanFile ();
    virtual void         foundMimeType (const QString&);
    virtual void         killJob ();

    void                 setUrl (const KUrl&);
    KUrl                 url () const;
    void                 setError (bool);
    void                 setProgressInfo (bool);
    bool                 progressInfo () const;
    void                 setFinished (bool);
    void                 setJob (KIO::Job*);
    KIO::Job*            job ();
    QTimer&              timer ();
    void                 setDoScanFile (bool);
    bool                 doScanFile () const;
    void                 setIsDirecory (bool);
    bool                 isDirectory () const;
    void                 setInitializeNextAction (bool);
    bool                 initializeNextAction () const;
    void                 setIsLocalFile (bool);
    bool                 isLocalFile () const;
    void                 setMode (mode_t);
    mode_t               mode () const;


};  // class KRun

