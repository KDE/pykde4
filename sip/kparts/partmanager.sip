//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kparts  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace KParts
{

class PartManager : QObject
{
%TypeHeaderCode
#include <partmanager.h>
%End


public:

    enum SelectionPolicy
    {
        Direct, 
        TriState
    };


    enum Reason
    {
        ReasonLeftClick, 
        ReasonMidClick, 
        ReasonRightClick, 
        NoReason
    };

                         PartManager (QWidget* /TransferThis/);
                         PartManager (QWidget*, QObject* /TransferThis/);
    void                 setSelectionPolicy (KParts::PartManager::SelectionPolicy);
    KParts::PartManager::SelectionPolicy selectionPolicy () const;
    void                 setAllowNestedParts (bool);
    bool                 allowNestedParts () const;
    void                 setIgnoreScrollBars (bool);
    bool                 ignoreScrollBars () const;
    void                 setActivationButtonMask (short);
    short                activationButtonMask () const;
    virtual bool         eventFilter (QObject*, QEvent*);
    virtual void         addPart (KParts::Part*, bool = 1);
    virtual void         removePart (KParts::Part*);
    virtual void         replacePart (KParts::Part*, KParts::Part*, bool = 1);
    virtual void         setActivePart (KParts::Part*, QWidget* = 0);
    virtual KParts::Part* activePart () const;
    virtual QWidget*     activeWidget () const;
    virtual void         setSelectedPart (KParts::Part*, QWidget* = 0);
    virtual KParts::Part* selectedPart () const;
    virtual QWidget*     selectedWidget () const;
    const QList<KParts::Part*> parts () const;
    void                 addManagedTopLevelWidget (const QWidget*);
    void                 removeManagedTopLevelWidget (const QWidget*);
    int                  reason () const;

signals:
    void                 partAdded (KParts::Part*);
    void                 partRemoved (KParts::Part*);
    void                 activePartChanged (KParts::Part*);

protected:
    virtual void         setActiveComponent (const KComponentData&);

protected slots:
    void                 slotObjectDestroyed ();
    void                 slotWidgetDestroyed ();
    void                 slotManagedTopLevelWidgetDestroyed ();

};  // class PartManager

};  // namespace KParts

