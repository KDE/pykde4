//
//     Copyright 2007 Jim Bublitz <jbublitz@nwinternet.com>
//     Earlier copyrights 1998 - 2006 Jim Bublitz also apply


//                 Generated by preSip
//            PyKDE4 module kparts  version KDE 3.92.0


// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

%ModuleHeaderCode
//ctscc
#include <part.h>
#include <browserextension.h>
#include <browserinterface.h>
#include <browserrun.h>
#include <historyprovider.h>
#include <mainwindow.h>
#include <partmanager.h>
#include <plugin.h>
#include <statusbarextension.h>
%End

namespace KParts
{

class BrowserArguments
{
%TypeHeaderCode
#include <browserextension.h>
%End


public:
                         BrowserArguments ();
                         BrowserArguments (const KParts::BrowserArguments&);
    QStringList          docState;
    bool                 softReload;
    QByteArray           postData;
    void                 setContentType (const QString&);
    QString              contentType () const;
    void                 setDoPost (bool);
    bool                 doPost () const;
    void                 setLockHistory (bool);
    bool                 lockHistory () const;
    void                 setNewTab (bool);
    bool                 newTab () const;
    QString              frameName;
    bool                 trustedSource;
    bool                 redirectedRequest () const;
    void                 setRedirectedRequest (bool);
    void                 setForcesNewWindow (bool);
    bool                 forcesNewWindow () const;

};  // class BrowserArguments


class WindowArgs
{
%TypeHeaderCode
#include <browserextension.h>
%End


public:
                         WindowArgs ();
                         WindowArgs (const KParts::WindowArgs&);
                         WindowArgs (const QRect&, bool, bool, bool, bool, bool);
                         WindowArgs (int, int, int, int, bool, bool, bool, bool, bool);
    void                 setX (int);
    int                  x () const;
    void                 setY (int);
    int                  y () const;
    void                 setWidth (int);
    int                  width () const;
    void                 setHeight (int);
    int                  height () const;
    void                 setFullScreen (bool);
    bool                 isFullScreen () const;
    void                 setMenuBarVisible (bool);
    bool                 isMenuBarVisible () const;
    void                 setToolBarsVisible (bool);
    bool                 toolBarsVisible () const;
    void                 setStatusBarVisible (bool);
    bool                 isStatusBarVisible () const;
    void                 setResizable (bool);
    bool                 isResizable () const;
    void                 setLowerWindow (bool);
    bool                 lowerWindow () const;
    void                 setScrollBarsVisible (bool);
    bool                 scrollBarsVisible () const;

};  // class WindowArgs


class OpenUrlEvent : KParts::Event
{
%TypeHeaderCode
#include <browserextension.h>
%End


public:
                         OpenUrlEvent (KParts::ReadOnlyPart*, const KUrl&, const KParts::OpenUrlArguments& = KParts::OpenUrlArguments (), const KParts::BrowserArguments& = KParts::BrowserArguments ());
    KParts::ReadOnlyPart* part () const;
    KUrl                 url () const;
    KParts::OpenUrlArguments arguments () const;
    KParts::BrowserArguments browserArguments () const;
    static bool          test (const QEvent*);

};  // class OpenUrlEvent


class BrowserExtension : QObject
{
%TypeHeaderCode
#include <browserextension.h>
%End


public:
                         BrowserExtension (KParts::ReadOnlyPart* /TransferThis/);


    enum PopupFlag
    {
        DefaultPopupItems, 
        ShowNavigationItems, 
        ShowUp, 
        ShowReload, 
        ShowBookmark, 
        ShowCreateDirectory, 
        ShowTextSelectionItems, 
        NoDeletion, 
        IsLink, 
        ShowUrlOperations, 
        ShowProperties
    };


    typedef QFlags<KParts::BrowserExtension::PopupFlag> PopupFlags;
    virtual void         setBrowserArguments (const KParts::BrowserArguments&);
    KParts::BrowserArguments browserArguments () const;
    virtual int          xOffset ();
    virtual int          yOffset ();
    virtual void         saveState (QDataStream&);
    virtual void         restoreState (QDataStream&);
    bool                 isURLDropHandlingEnabled () const;
    void                 setURLDropHandlingEnabled (bool);
    void                 setBrowserInterface (KParts::BrowserInterface*);
    KParts::BrowserInterface* browserInterface () const;
    bool                 isActionEnabled (const char*) const;
    QString              actionText (const char*) const;
    typedef QMap<QByteArray, QByteArray> ActionSlotMap;
    static KParts::BrowserExtension::ActionSlotMap actionSlotMap ();
    static KParts::BrowserExtension::ActionSlotMap* actionSlotMapPtr ();
    static KParts::BrowserExtension* childObject (QObject*);
    void                 pasteRequest ();

    typedef QMap<QString, QList<QAction*>> ActionGroupMap;


public:
    void                 enableAction (const char*, bool);
    void                 setActionText (const char*, const QString&);
    void                 openUrlRequest (const KUrl&, const KParts::OpenUrlArguments& = KParts::OpenUrlArguments (), const KParts::BrowserArguments& = KParts::BrowserArguments ());
    void                 openUrlRequestDelayed (const KUrl&, const KParts::OpenUrlArguments&, const KParts::BrowserArguments&);
    void                 openUrlNotify ();
    void                 setLocationBarUrl (const QString&);
    void                 setIconUrl (const KUrl&);
//ig     void                 createNewWindow (const KUrl&, const KParts::OpenUrlArguments& = KParts::OpenUrlArguments (), const KParts::BrowserArguments& = KParts::BrowserArguments (), const KParts::WindowArgs& = KParts::WindowArgs (), KParts::ReadOnlyPart** = 0);
    void                 loadingProgress (int);
    void                 speedProgress (int);
    void                 infoMessage (const QString&);

//ig    void                 popupMenu (const QPoint&, const KFileItemList&, const KParts::OpenUrlArguments& = KParts::OpenUrlArguments (), const KParts::BrowserArguments& = KParts::BrowserArguments (), KParts::BrowserExtension::PopupFlags = KParts::BrowserExtension::DefaultPopupItems, const KParts::BrowserExtension::ActionGroupMap& = KParts::BrowserExtension::ActionGroupMap ());
//ig    void                 popupMenu (const QPoint&, const KUrl&, mode_t = -1 , const KParts::OpenUrlArguments& = KParts::OpenUrlArguments (), const KParts::BrowserArguments& = KParts::BrowserArguments (), KParts::BrowserExtension::PopupFlags = KParts::BrowserExtension::DefaultPopupItems, const KParts::BrowserExtension::ActionGroupMap& = KParts::BrowserExtension::ActionGroupMap ());

    void                 selectionInfo (const QList<KFileItem>&);
    void                 selectionInfo (const QString&);
    void                 selectionInfo (const KUrl::List&);
    void                 mouseOverInfo (const KFileItem&);
    void                 addWebSideBar (const KUrl&, const QString&);
    void                 moveTopLevelWidget (int, int);
    void                 resizeTopLevelWidget (int, int);
    void                 requestFocus (KParts::ReadOnlyPart*);
    void                 setPageSecurity (int);
    void                 itemsRemoved (const KFileItemList&);

public:
    typedef QMap<QByteArray, int> ActionNumberMap;

public:



public:



};  // class BrowserExtension


class BrowserHostExtension : QObject
{
%TypeHeaderCode
#include <browserextension.h>
%End


public:
                         BrowserHostExtension (KParts::ReadOnlyPart* /TransferThis/);
    virtual QStringList  frameNames () const;
    virtual const QList<KParts::ReadOnlyPart*> frames () const;
    virtual KParts::BrowserHostExtension* findFrameParent (KParts::ReadOnlyPart*, const QString&);
    virtual bool         openUrlInFrame (const KUrl&, const KParts::OpenUrlArguments&, const KParts::BrowserArguments&);
    static KParts::BrowserHostExtension* childObject (QObject*);

};  // class BrowserHostExtension


class LiveConnectExtension : QObject
{
%TypeHeaderCode
#include <browserextension.h>
%End


public:

    enum Type
    {
        TypeVoid, 
        TypeBool, 
        TypeFunction, 
        TypeNumber, 
        TypeObject, 
        TypeString
    };

//ig     typedef QList<QPair<Type, QString>> ArgList;
                         LiveConnectExtension (KParts::ReadOnlyPart* /TransferThis/);
//ig     virtual bool         get (const ulong, const QString&, KParts::LiveConnectExtension::Type&, ulong&, QString&);
    virtual bool         put (const ulong, const QString&, const QString&);
//ig     virtual bool         call (const ulong, const QString&, const QStringList&, KParts::LiveConnectExtension::Type&, ulong&, QString&);
    virtual void         unregister (const ulong);
    static KParts::LiveConnectExtension* childObject (QObject*);

public:
    void                 partEvent (const ulong, const QString&, const KParts::LiveConnectExtension::ArgList&);

};  // class LiveConnectExtension

};  // namespace KParts



%MappedType KParts::LiveConnectExtension::ArgList
{
%TypeHeaderCode
#include <qlist.h>
%End

%ConvertFromTypeCode
    if (!sipCpp)
        return PyList_New(0);

    // Create the list
    PyObject *pylist;
    if ((pylist = PyList_New(0)) == NULL)
        return NULL;

    QList<QPair<KParts::LiveConnectExtension::Type, QString> > *cpplist = (QList<QPair<KParts::LiveConnectExtension::Type, QString> > *)sipCpp;
    PyObject *inst = NULL;

    // Get it.
    QList<QPair<KParts::LiveConnectExtension::Type, QString> >::Iterator it;
    for( it = cpplist->begin(); it != cpplist->end(); ++it )
    {
        KParts::LiveConnectExtension::Type s = (*it).first;
        QString u = (*it).second;
        PyObject *pys = sipBuildResult (NULL, "N", new QString (u), sipClass_QString);
        if ((pys == NULL) || ((inst = Py_BuildValue ("iN", (int)s, pys)) == NULL)
            || (PyList_Append (pylist, inst) < 0))
        {
            Py_XDECREF (inst);
            Py_XDECREF (pys);
            Py_DECREF (pylist);
            return NULL;
        }
    }

    return pylist;
%End


%ConvertToTypeCode
    if (sipIsErr == NULL)
        return PyList_Check(sipPy);

    QList<QPair<KParts::LiveConnectExtension::Type, QString> > *cpplist = new QList<QPair<KParts::LiveConnectExtension::Type, QString> >;

    int iserr = 0;

    for (int i = 0; i < PyList_Size (sipPy); i++)
    {
        PyObject *elem = PyList_GET_ITEM (sipPy, i);
        PyObject *pyp1 = PyTuple_GET_ITEM (elem, 1);
        QString *p2 = (QString *)sipForceConvertTo_QString (pyp1, &iserr);

        if (iserr)
        {
            *sipIsErr = 1;
            delete cpplist;
            return 0;
        }
        KParts::LiveConnectExtension::Type p1 = (KParts::LiveConnectExtension::Type)(PyInt_AS_LONG (PyTuple_GET_ITEM (elem, 0)));

        cpplist->append (QPair<KParts::LiveConnectExtension::Type, QString> (p1, *p2));
    }

    *sipCppPtr = cpplist;

    return 1;
%End
};


