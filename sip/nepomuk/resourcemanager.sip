//
//     Copyright 2008 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


namespace Nepomuk
{

class ResourceManager : QObject
{
%TypeHeaderCode
#include <nepomuk/resourcemanager.h>
%End


public:
    static Nepomuk::ResourceManager*  instance ();
    void                    deleteInstance ();
    int                     init ();
    bool                    initialized () const;


//mt undefined symbol: Model* None -- need mapped type?
//mt     Soprano::Model*    mainModel ();




//mt undefined symbol: Model* model -- need mapped type?
//mt     void               setOverrideMainModel (Soprano::Model* model);


    Nepomuk::Resource       createResourceFromUri (const QString& uri);
    void                    removeResource (const QString& uri);

//Missing implementation.
//ig    QList<Nepomuk::Resource>  allResources ();

    QList<Nepomuk::Resource>  allResourcesOfType (const QUrl& type);
    QList<Nepomuk::Resource>  allResourcesOfType (const QString& type);
    QList<Nepomuk::Resource>  allResourcesWithProperty (const QUrl& uri, const Nepomuk::Variant& v);
    QList<Nepomuk::Resource>  allResourcesWithProperty (const QString& uri, const Nepomuk::Variant& v);
    QString                 generateUniqueUri ();
    QUrl                    generateUniqueUri (const QString& label);
    void                    notifyError (const QString& uri, int errorCode);

signals:
    void                    resourceModified (const QString& uri);
    void                    error (const QString& uri, int errorCode);

private:
                            ResourceManager ();
    ~ResourceManager ();
public:
    Soprano::Model*         mainModel ();
    void                    setOverrideMainModel (Soprano::Model* model);
    static Nepomuk::ResourceManager*  createManagerForModel (Soprano::Model* model);
signals:
    void                    nepomukSystemStarted ();
    void                    nepomukSystemStopped ();
};
// ResourceManager

};
// Nepomuk




